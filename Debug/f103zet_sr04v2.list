
f103zet_sr04v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004724  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08004908  08004908  00014908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004984  08004984  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08004984  08004984  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004984  08004984  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004984  08004984  00014984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004988  08004988  00014988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0800498c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000308  2000005c  080049e8  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000364  080049e8  00020364  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d2af  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002305  00000000  00000000  0002d377  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cb0  00000000  00000000  0002f680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009d7  00000000  00000000  00030330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000197ee  00000000  00000000  00030d07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000103ca  00000000  00000000  0004a4f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00096c90  00000000  00000000  0005a8bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003878  00000000  00000000  000f1550  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000f4dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000005c 	.word	0x2000005c
 8000200:	00000000 	.word	0x00000000
 8000204:	080048f0 	.word	0x080048f0

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000060 	.word	0x20000060
 8000220:	080048f0 	.word	0x080048f0

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800023a:	4b10      	ldr	r3, [pc, #64]	; (800027c <MX_DMA_Init+0x48>)
 800023c:	695b      	ldr	r3, [r3, #20]
 800023e:	4a0f      	ldr	r2, [pc, #60]	; (800027c <MX_DMA_Init+0x48>)
 8000240:	f043 0301 	orr.w	r3, r3, #1
 8000244:	6153      	str	r3, [r2, #20]
 8000246:	4b0d      	ldr	r3, [pc, #52]	; (800027c <MX_DMA_Init+0x48>)
 8000248:	695b      	ldr	r3, [r3, #20]
 800024a:	f003 0301 	and.w	r3, r3, #1
 800024e:	607b      	str	r3, [r7, #4]
 8000250:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000252:	2200      	movs	r2, #0
 8000254:	2100      	movs	r1, #0
 8000256:	200e      	movs	r0, #14
 8000258:	f000 feeb 	bl	8001032 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800025c:	200e      	movs	r0, #14
 800025e:	f000 ff04 	bl	800106a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000262:	2200      	movs	r2, #0
 8000264:	2100      	movs	r1, #0
 8000266:	200f      	movs	r0, #15
 8000268:	f000 fee3 	bl	8001032 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800026c:	200f      	movs	r0, #15
 800026e:	f000 fefc 	bl	800106a <HAL_NVIC_EnableIRQ>

}
 8000272:	bf00      	nop
 8000274:	3708      	adds	r7, #8
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}
 800027a:	bf00      	nop
 800027c:	40021000 	.word	0x40021000

08000280 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b086      	sub	sp, #24
 8000284:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000286:	f107 0308 	add.w	r3, r7, #8
 800028a:	2200      	movs	r2, #0
 800028c:	601a      	str	r2, [r3, #0]
 800028e:	605a      	str	r2, [r3, #4]
 8000290:	609a      	str	r2, [r3, #8]
 8000292:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000294:	4b11      	ldr	r3, [pc, #68]	; (80002dc <MX_GPIO_Init+0x5c>)
 8000296:	699b      	ldr	r3, [r3, #24]
 8000298:	4a10      	ldr	r2, [pc, #64]	; (80002dc <MX_GPIO_Init+0x5c>)
 800029a:	f043 0304 	orr.w	r3, r3, #4
 800029e:	6193      	str	r3, [r2, #24]
 80002a0:	4b0e      	ldr	r3, [pc, #56]	; (80002dc <MX_GPIO_Init+0x5c>)
 80002a2:	699b      	ldr	r3, [r3, #24]
 80002a4:	f003 0304 	and.w	r3, r3, #4
 80002a8:	607b      	str	r3, [r7, #4]
 80002aa:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_7, GPIO_PIN_RESET);
 80002ac:	2200      	movs	r2, #0
 80002ae:	2182      	movs	r1, #130	; 0x82
 80002b0:	480b      	ldr	r0, [pc, #44]	; (80002e0 <MX_GPIO_Init+0x60>)
 80002b2:	f001 fc7f 	bl	8001bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 80002b6:	2382      	movs	r3, #130	; 0x82
 80002b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002ba:	2301      	movs	r3, #1
 80002bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80002be:	2301      	movs	r3, #1
 80002c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002c2:	2303      	movs	r3, #3
 80002c4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002c6:	f107 0308 	add.w	r3, r7, #8
 80002ca:	4619      	mov	r1, r3
 80002cc:	4804      	ldr	r0, [pc, #16]	; (80002e0 <MX_GPIO_Init+0x60>)
 80002ce:	f001 fadd 	bl	800188c <HAL_GPIO_Init>

}
 80002d2:	bf00      	nop
 80002d4:	3718      	adds	r7, #24
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	40021000 	.word	0x40021000
 80002e0:	40010800 	.word	0x40010800

080002e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002e8:	f000 fd46 	bl	8000d78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002ec:	f000 f844 	bl	8000378 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002f0:	f7ff ffc6 	bl	8000280 <MX_GPIO_Init>
  MX_DMA_Init();
 80002f4:	f7ff ff9e 	bl	8000234 <MX_DMA_Init>
  MX_TIM2_Init();
 80002f8:	f000 faec 	bl	80008d4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80002fc:	f000 fb5a 	bl	80009b4 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000300:	f000 fc40 	bl	8000b84 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim2);
 8000304:	4815      	ldr	r0, [pc, #84]	; (800035c <main+0x78>)
 8000306:	f002 f8cd 	bl	80024a4 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim2,TIM_CHANNEL_1);
 800030a:	2100      	movs	r1, #0
 800030c:	4813      	ldr	r0, [pc, #76]	; (800035c <main+0x78>)
 800030e:	f002 f979 	bl	8002604 <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start(&htim3);
 8000312:	4813      	ldr	r0, [pc, #76]	; (8000360 <main+0x7c>)
 8000314:	f002 f8c6 	bl	80024a4 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim3,TIM_CHANNEL_1);
 8000318:	2100      	movs	r1, #0
 800031a:	4811      	ldr	r0, [pc, #68]	; (8000360 <main+0x7c>)
 800031c:	f002 f972 	bl	8002604 <HAL_TIM_IC_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HCSR04_Read();
 8000320:	f000 f88c 	bl	800043c <HCSR04_Read>
	  _HCSR04_Read();
 8000324:	f000 f8c2 	bl	80004ac <_HCSR04_Read>
	  sprintf(message, "distance: %d distance2: %d\n", distance1, distance2);
 8000328:	4b0e      	ldr	r3, [pc, #56]	; (8000364 <main+0x80>)
 800032a:	881b      	ldrh	r3, [r3, #0]
 800032c:	461a      	mov	r2, r3
 800032e:	4b0e      	ldr	r3, [pc, #56]	; (8000368 <main+0x84>)
 8000330:	881b      	ldrh	r3, [r3, #0]
 8000332:	490e      	ldr	r1, [pc, #56]	; (800036c <main+0x88>)
 8000334:	480e      	ldr	r0, [pc, #56]	; (8000370 <main+0x8c>)
 8000336:	f003 fe29 	bl	8003f8c <siprintf>
	  HAL_UART_Transmit(&huart1, message, strlen(message), HAL_MAX_DELAY);
 800033a:	480d      	ldr	r0, [pc, #52]	; (8000370 <main+0x8c>)
 800033c:	f7ff ff72 	bl	8000224 <strlen>
 8000340:	4603      	mov	r3, r0
 8000342:	b29a      	uxth	r2, r3
 8000344:	f04f 33ff 	mov.w	r3, #4294967295
 8000348:	4909      	ldr	r1, [pc, #36]	; (8000370 <main+0x8c>)
 800034a:	480a      	ldr	r0, [pc, #40]	; (8000374 <main+0x90>)
 800034c:	f003 f858 	bl	8003400 <HAL_UART_Transmit>
	  HAL_Delay(500);
 8000350:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000354:	f000 fd72 	bl	8000e3c <HAL_Delay>
  {
 8000358:	e7e2      	b.n	8000320 <main+0x3c>
 800035a:	bf00      	nop
 800035c:	200000b8 	.word	0x200000b8
 8000360:	20000100 	.word	0x20000100
 8000364:	200000a8 	.word	0x200000a8
 8000368:	200000b2 	.word	0x200000b2
 800036c:	08004908 	.word	0x08004908
 8000370:	20000078 	.word	0x20000078
 8000374:	20000148 	.word	0x20000148

08000378 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b090      	sub	sp, #64	; 0x40
 800037c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800037e:	f107 0318 	add.w	r3, r7, #24
 8000382:	2228      	movs	r2, #40	; 0x28
 8000384:	2100      	movs	r1, #0
 8000386:	4618      	mov	r0, r3
 8000388:	f003 fe20 	bl	8003fcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800038c:	1d3b      	adds	r3, r7, #4
 800038e:	2200      	movs	r2, #0
 8000390:	601a      	str	r2, [r3, #0]
 8000392:	605a      	str	r2, [r3, #4]
 8000394:	609a      	str	r2, [r3, #8]
 8000396:	60da      	str	r2, [r3, #12]
 8000398:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800039a:	2301      	movs	r3, #1
 800039c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800039e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003a4:	2300      	movs	r3, #0
 80003a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003a8:	2301      	movs	r3, #1
 80003aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003ac:	2302      	movs	r3, #2
 80003ae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003b6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003bc:	f107 0318 	add.w	r3, r7, #24
 80003c0:	4618      	mov	r0, r3
 80003c2:	f001 fc0f 	bl	8001be4 <HAL_RCC_OscConfig>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d001      	beq.n	80003d0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80003cc:	f000 f819 	bl	8000402 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003d0:	230f      	movs	r3, #15
 80003d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003d4:	2302      	movs	r3, #2
 80003d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003d8:	2300      	movs	r3, #0
 80003da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003e2:	2300      	movs	r3, #0
 80003e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003e6:	1d3b      	adds	r3, r7, #4
 80003e8:	2102      	movs	r1, #2
 80003ea:	4618      	mov	r0, r3
 80003ec:	f001 fe7c 	bl	80020e8 <HAL_RCC_ClockConfig>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d001      	beq.n	80003fa <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003f6:	f000 f804 	bl	8000402 <Error_Handler>
  }
}
 80003fa:	bf00      	nop
 80003fc:	3740      	adds	r7, #64	; 0x40
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}

08000402 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000402:	b480      	push	{r7}
 8000404:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000406:	b672      	cpsid	i
}
 8000408:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800040a:	e7fe      	b.n	800040a <Error_Handler+0x8>

0800040c <delay_us>:
uint16_t _IC_value2=0;
uint16_t _Difference =0;
uint16_t distance2 =0;

void delay_us(uint16_t time)
{
 800040c:	b480      	push	{r7}
 800040e:	b083      	sub	sp, #12
 8000410:	af00      	add	r7, sp, #0
 8000412:	4603      	mov	r3, r0
 8000414:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim2,0);
 8000416:	4b08      	ldr	r3, [pc, #32]	; (8000438 <delay_us+0x2c>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	2200      	movs	r2, #0
 800041c:	625a      	str	r2, [r3, #36]	; 0x24
  while(__HAL_TIM_GET_COUNTER(&htim2)<time);
 800041e:	bf00      	nop
 8000420:	4b05      	ldr	r3, [pc, #20]	; (8000438 <delay_us+0x2c>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000426:	88fb      	ldrh	r3, [r7, #6]
 8000428:	429a      	cmp	r2, r3
 800042a:	d3f9      	bcc.n	8000420 <delay_us+0x14>
}
 800042c:	bf00      	nop
 800042e:	bf00      	nop
 8000430:	370c      	adds	r7, #12
 8000432:	46bd      	mov	sp, r7
 8000434:	bc80      	pop	{r7}
 8000436:	4770      	bx	lr
 8000438:	200000b8 	.word	0x200000b8

0800043c <HCSR04_Read>:

uint16_t HCSR04_Read(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_RESET);
 8000440:	2200      	movs	r2, #0
 8000442:	2102      	movs	r1, #2
 8000444:	4816      	ldr	r0, [pc, #88]	; (80004a0 <HCSR04_Read+0x64>)
 8000446:	f001 fbb5 	bl	8001bb4 <HAL_GPIO_WritePin>
	delay_us(2);
 800044a:	2002      	movs	r0, #2
 800044c:	f7ff ffde 	bl	800040c <delay_us>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_SET);
 8000450:	2201      	movs	r2, #1
 8000452:	2102      	movs	r1, #2
 8000454:	4812      	ldr	r0, [pc, #72]	; (80004a0 <HCSR04_Read+0x64>)
 8000456:	f001 fbad 	bl	8001bb4 <HAL_GPIO_WritePin>
	delay_us(12);
 800045a:	200c      	movs	r0, #12
 800045c:	f7ff ffd6 	bl	800040c <delay_us>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_RESET);
 8000460:	2200      	movs	r2, #0
 8000462:	2102      	movs	r1, #2
 8000464:	480e      	ldr	r0, [pc, #56]	; (80004a0 <HCSR04_Read+0x64>)
 8000466:	f001 fba5 	bl	8001bb4 <HAL_GPIO_WritePin>

	__HAL_TIM_SET_CAPTUREPOLARITY(&htim2,TIM_CHANNEL_1,TIM_INPUTCHANNELPOLARITY_RISING);
 800046a:	4b0e      	ldr	r3, [pc, #56]	; (80004a4 <HCSR04_Read+0x68>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	6a1a      	ldr	r2, [r3, #32]
 8000470:	4b0c      	ldr	r3, [pc, #48]	; (80004a4 <HCSR04_Read+0x68>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	f022 020a 	bic.w	r2, r2, #10
 8000478:	621a      	str	r2, [r3, #32]
 800047a:	4b0a      	ldr	r3, [pc, #40]	; (80004a4 <HCSR04_Read+0x68>)
 800047c:	681a      	ldr	r2, [r3, #0]
 800047e:	4b09      	ldr	r3, [pc, #36]	; (80004a4 <HCSR04_Read+0x68>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	6a12      	ldr	r2, [r2, #32]
 8000484:	621a      	str	r2, [r3, #32]

	__HAL_TIM_ENABLE_IT(&htim2,TIM_IT_CC1);
 8000486:	4b07      	ldr	r3, [pc, #28]	; (80004a4 <HCSR04_Read+0x68>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	68da      	ldr	r2, [r3, #12]
 800048c:	4b05      	ldr	r3, [pc, #20]	; (80004a4 <HCSR04_Read+0x68>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	f042 0202 	orr.w	r2, r2, #2
 8000494:	60da      	str	r2, [r3, #12]
	//HAL_Delay(100);
	return distance1;
 8000496:	4b04      	ldr	r3, [pc, #16]	; (80004a8 <HCSR04_Read+0x6c>)
 8000498:	881b      	ldrh	r3, [r3, #0]
}
 800049a:	4618      	mov	r0, r3
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	40010800 	.word	0x40010800
 80004a4:	200000b8 	.word	0x200000b8
 80004a8:	200000a8 	.word	0x200000a8

080004ac <_HCSR04_Read>:

uint16_t _HCSR04_Read(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);
 80004b0:	2200      	movs	r2, #0
 80004b2:	2180      	movs	r1, #128	; 0x80
 80004b4:	4816      	ldr	r0, [pc, #88]	; (8000510 <_HCSR04_Read+0x64>)
 80004b6:	f001 fb7d 	bl	8001bb4 <HAL_GPIO_WritePin>
	delay_us(2);
 80004ba:	2002      	movs	r0, #2
 80004bc:	f7ff ffa6 	bl	800040c <delay_us>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_SET);
 80004c0:	2201      	movs	r2, #1
 80004c2:	2180      	movs	r1, #128	; 0x80
 80004c4:	4812      	ldr	r0, [pc, #72]	; (8000510 <_HCSR04_Read+0x64>)
 80004c6:	f001 fb75 	bl	8001bb4 <HAL_GPIO_WritePin>
	delay_us(12);
 80004ca:	200c      	movs	r0, #12
 80004cc:	f7ff ff9e 	bl	800040c <delay_us>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);
 80004d0:	2200      	movs	r2, #0
 80004d2:	2180      	movs	r1, #128	; 0x80
 80004d4:	480e      	ldr	r0, [pc, #56]	; (8000510 <_HCSR04_Read+0x64>)
 80004d6:	f001 fb6d 	bl	8001bb4 <HAL_GPIO_WritePin>

	__HAL_TIM_SET_CAPTUREPOLARITY(&htim3,TIM_CHANNEL_1,TIM_INPUTCHANNELPOLARITY_RISING);
 80004da:	4b0e      	ldr	r3, [pc, #56]	; (8000514 <_HCSR04_Read+0x68>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	6a1a      	ldr	r2, [r3, #32]
 80004e0:	4b0c      	ldr	r3, [pc, #48]	; (8000514 <_HCSR04_Read+0x68>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	f022 020a 	bic.w	r2, r2, #10
 80004e8:	621a      	str	r2, [r3, #32]
 80004ea:	4b0a      	ldr	r3, [pc, #40]	; (8000514 <_HCSR04_Read+0x68>)
 80004ec:	681a      	ldr	r2, [r3, #0]
 80004ee:	4b09      	ldr	r3, [pc, #36]	; (8000514 <_HCSR04_Read+0x68>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	6a12      	ldr	r2, [r2, #32]
 80004f4:	621a      	str	r2, [r3, #32]

	__HAL_TIM_ENABLE_IT(&htim3,TIM_IT_CC1);
 80004f6:	4b07      	ldr	r3, [pc, #28]	; (8000514 <_HCSR04_Read+0x68>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	68da      	ldr	r2, [r3, #12]
 80004fc:	4b05      	ldr	r3, [pc, #20]	; (8000514 <_HCSR04_Read+0x68>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	f042 0202 	orr.w	r2, r2, #2
 8000504:	60da      	str	r2, [r3, #12]
	//HAL_Delay(100);
	return distance2;
 8000506:	4b04      	ldr	r3, [pc, #16]	; (8000518 <_HCSR04_Read+0x6c>)
 8000508:	881b      	ldrh	r3, [r3, #0]
}
 800050a:	4618      	mov	r0, r3
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	40010800 	.word	0x40010800
 8000514:	20000100 	.word	0x20000100
 8000518:	200000b2 	.word	0x200000b2

0800051c <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]

  if(htim==&htim2 &&htim->Channel==HAL_TIM_ACTIVE_CHANNEL_1)
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	4a7a      	ldr	r2, [pc, #488]	; (8000710 <HAL_TIM_IC_CaptureCallback+0x1f4>)
 8000528:	4293      	cmp	r3, r2
 800052a:	d174      	bne.n	8000616 <HAL_TIM_IC_CaptureCallback+0xfa>
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	7f1b      	ldrb	r3, [r3, #28]
 8000530:	2b01      	cmp	r3, #1
 8000532:	d170      	bne.n	8000616 <HAL_TIM_IC_CaptureCallback+0xfa>
	{
		if(IS_First_CAPTURED==0)
 8000534:	4b77      	ldr	r3, [pc, #476]	; (8000714 <HAL_TIM_IC_CaptureCallback+0x1f8>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	2b00      	cmp	r3, #0
 800053a:	d11b      	bne.n	8000574 <HAL_TIM_IC_CaptureCallback+0x58>
		{
			IS_First_CAPTURED=1;
 800053c:	4b75      	ldr	r3, [pc, #468]	; (8000714 <HAL_TIM_IC_CaptureCallback+0x1f8>)
 800053e:	2201      	movs	r2, #1
 8000540:	701a      	strb	r2, [r3, #0]
			IC_value1=HAL_TIM_ReadCapturedValue(htim,TIM_CHANNEL_1);
 8000542:	2100      	movs	r1, #0
 8000544:	6878      	ldr	r0, [r7, #4]
 8000546:	f002 fbcb 	bl	8002ce0 <HAL_TIM_ReadCapturedValue>
 800054a:	4603      	mov	r3, r0
 800054c:	b29a      	uxth	r2, r3
 800054e:	4b72      	ldr	r3, [pc, #456]	; (8000718 <HAL_TIM_IC_CaptureCallback+0x1fc>)
 8000550:	801a      	strh	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim,TIM_CHANNEL_1,TIM_INPUTCHANNELPOLARITY_FALLING);
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	6a1a      	ldr	r2, [r3, #32]
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f022 020a 	bic.w	r2, r2, #10
 8000560:	621a      	str	r2, [r3, #32]
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	6a1a      	ldr	r2, [r3, #32]
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f042 0202 	orr.w	r2, r2, #2
 8000570:	621a      	str	r2, [r3, #32]
 8000572:	e050      	b.n	8000616 <HAL_TIM_IC_CaptureCallback+0xfa>
		}
		else if(IS_First_CAPTURED==1)
 8000574:	4b67      	ldr	r3, [pc, #412]	; (8000714 <HAL_TIM_IC_CaptureCallback+0x1f8>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	2b01      	cmp	r3, #1
 800057a:	d14c      	bne.n	8000616 <HAL_TIM_IC_CaptureCallback+0xfa>
		{
			IS_First_CAPTURED=0;
 800057c:	4b65      	ldr	r3, [pc, #404]	; (8000714 <HAL_TIM_IC_CaptureCallback+0x1f8>)
 800057e:	2200      	movs	r2, #0
 8000580:	701a      	strb	r2, [r3, #0]
			IC_value2=HAL_TIM_ReadCapturedValue(htim,TIM_CHANNEL_1);
 8000582:	2100      	movs	r1, #0
 8000584:	6878      	ldr	r0, [r7, #4]
 8000586:	f002 fbab 	bl	8002ce0 <HAL_TIM_ReadCapturedValue>
 800058a:	4603      	mov	r3, r0
 800058c:	b29a      	uxth	r2, r3
 800058e:	4b63      	ldr	r3, [pc, #396]	; (800071c <HAL_TIM_IC_CaptureCallback+0x200>)
 8000590:	801a      	strh	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(htim,0);
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	2200      	movs	r2, #0
 8000598:	625a      	str	r2, [r3, #36]	; 0x24

			//����
			if(IC_value1 < IC_value2)
 800059a:	4b5f      	ldr	r3, [pc, #380]	; (8000718 <HAL_TIM_IC_CaptureCallback+0x1fc>)
 800059c:	881a      	ldrh	r2, [r3, #0]
 800059e:	4b5f      	ldr	r3, [pc, #380]	; (800071c <HAL_TIM_IC_CaptureCallback+0x200>)
 80005a0:	881b      	ldrh	r3, [r3, #0]
 80005a2:	429a      	cmp	r2, r3
 80005a4:	d208      	bcs.n	80005b8 <HAL_TIM_IC_CaptureCallback+0x9c>
			{
				Difference = IC_value2-IC_value1;
 80005a6:	4b5d      	ldr	r3, [pc, #372]	; (800071c <HAL_TIM_IC_CaptureCallback+0x200>)
 80005a8:	881a      	ldrh	r2, [r3, #0]
 80005aa:	4b5b      	ldr	r3, [pc, #364]	; (8000718 <HAL_TIM_IC_CaptureCallback+0x1fc>)
 80005ac:	881b      	ldrh	r3, [r3, #0]
 80005ae:	1ad3      	subs	r3, r2, r3
 80005b0:	b29a      	uxth	r2, r3
 80005b2:	4b5b      	ldr	r3, [pc, #364]	; (8000720 <HAL_TIM_IC_CaptureCallback+0x204>)
 80005b4:	801a      	strh	r2, [r3, #0]
 80005b6:	e00f      	b.n	80005d8 <HAL_TIM_IC_CaptureCallback+0xbc>
			}
			else if(IC_value1 > IC_value2)
 80005b8:	4b57      	ldr	r3, [pc, #348]	; (8000718 <HAL_TIM_IC_CaptureCallback+0x1fc>)
 80005ba:	881a      	ldrh	r2, [r3, #0]
 80005bc:	4b57      	ldr	r3, [pc, #348]	; (800071c <HAL_TIM_IC_CaptureCallback+0x200>)
 80005be:	881b      	ldrh	r3, [r3, #0]
 80005c0:	429a      	cmp	r2, r3
 80005c2:	d909      	bls.n	80005d8 <HAL_TIM_IC_CaptureCallback+0xbc>
			{
				Difference = 0xffff - IC_value1+IC_value2;
 80005c4:	4b55      	ldr	r3, [pc, #340]	; (800071c <HAL_TIM_IC_CaptureCallback+0x200>)
 80005c6:	881a      	ldrh	r2, [r3, #0]
 80005c8:	4b53      	ldr	r3, [pc, #332]	; (8000718 <HAL_TIM_IC_CaptureCallback+0x1fc>)
 80005ca:	881b      	ldrh	r3, [r3, #0]
 80005cc:	1ad3      	subs	r3, r2, r3
 80005ce:	b29b      	uxth	r3, r3
 80005d0:	3b01      	subs	r3, #1
 80005d2:	b29a      	uxth	r2, r3
 80005d4:	4b52      	ldr	r3, [pc, #328]	; (8000720 <HAL_TIM_IC_CaptureCallback+0x204>)
 80005d6:	801a      	strh	r2, [r3, #0]
			}

			distance1 = Difference/58;
 80005d8:	4b51      	ldr	r3, [pc, #324]	; (8000720 <HAL_TIM_IC_CaptureCallback+0x204>)
 80005da:	881b      	ldrh	r3, [r3, #0]
 80005dc:	4a51      	ldr	r2, [pc, #324]	; (8000724 <HAL_TIM_IC_CaptureCallback+0x208>)
 80005de:	fba2 2303 	umull	r2, r3, r2, r3
 80005e2:	095b      	lsrs	r3, r3, #5
 80005e4:	b29a      	uxth	r2, r3
 80005e6:	4b50      	ldr	r3, [pc, #320]	; (8000728 <HAL_TIM_IC_CaptureCallback+0x20c>)
 80005e8:	801a      	strh	r2, [r3, #0]

			__HAL_TIM_SET_CAPTUREPOLARITY(htim,TIM_CHANNEL_1,TIM_INPUTCHANNELPOLARITY_RISING);
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	6a1a      	ldr	r2, [r3, #32]
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f022 020a 	bic.w	r2, r2, #10
 80005f8:	621a      	str	r2, [r3, #32]
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	681a      	ldr	r2, [r3, #0]
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	6a12      	ldr	r2, [r2, #32]
 8000604:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(htim,TIM_IT_CC1);
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	68da      	ldr	r2, [r3, #12]
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f022 0202 	bic.w	r2, r2, #2
 8000614:	60da      	str	r2, [r3, #12]

			}
	 }
  if(htim==&htim3 &&htim->Channel==HAL_TIM_ACTIVE_CHANNEL_1)
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	4a44      	ldr	r2, [pc, #272]	; (800072c <HAL_TIM_IC_CaptureCallback+0x210>)
 800061a:	4293      	cmp	r3, r2
 800061c:	d174      	bne.n	8000708 <HAL_TIM_IC_CaptureCallback+0x1ec>
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	7f1b      	ldrb	r3, [r3, #28]
 8000622:	2b01      	cmp	r3, #1
 8000624:	d170      	bne.n	8000708 <HAL_TIM_IC_CaptureCallback+0x1ec>
  	{
  		if(_IS_First_CAPTURED==0)
 8000626:	4b42      	ldr	r3, [pc, #264]	; (8000730 <HAL_TIM_IC_CaptureCallback+0x214>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d11b      	bne.n	8000666 <HAL_TIM_IC_CaptureCallback+0x14a>
  		{
  			_IS_First_CAPTURED=1;
 800062e:	4b40      	ldr	r3, [pc, #256]	; (8000730 <HAL_TIM_IC_CaptureCallback+0x214>)
 8000630:	2201      	movs	r2, #1
 8000632:	701a      	strb	r2, [r3, #0]
  			_IC_value1=HAL_TIM_ReadCapturedValue(htim,TIM_CHANNEL_1);
 8000634:	2100      	movs	r1, #0
 8000636:	6878      	ldr	r0, [r7, #4]
 8000638:	f002 fb52 	bl	8002ce0 <HAL_TIM_ReadCapturedValue>
 800063c:	4603      	mov	r3, r0
 800063e:	b29a      	uxth	r2, r3
 8000640:	4b3c      	ldr	r3, [pc, #240]	; (8000734 <HAL_TIM_IC_CaptureCallback+0x218>)
 8000642:	801a      	strh	r2, [r3, #0]
  			__HAL_TIM_SET_CAPTUREPOLARITY(htim,TIM_CHANNEL_1,TIM_INPUTCHANNELPOLARITY_FALLING);
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	6a1a      	ldr	r2, [r3, #32]
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	f022 020a 	bic.w	r2, r2, #10
 8000652:	621a      	str	r2, [r3, #32]
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	6a1a      	ldr	r2, [r3, #32]
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	f042 0202 	orr.w	r2, r2, #2
 8000662:	621a      	str	r2, [r3, #32]
  			__HAL_TIM_SET_CAPTUREPOLARITY(htim,TIM_CHANNEL_1,TIM_INPUTCHANNELPOLARITY_RISING);
  			__HAL_TIM_DISABLE_IT(htim,TIM_IT_CC1);

  			}
  	 }
}
 8000664:	e050      	b.n	8000708 <HAL_TIM_IC_CaptureCallback+0x1ec>
  		else if(_IS_First_CAPTURED==1)
 8000666:	4b32      	ldr	r3, [pc, #200]	; (8000730 <HAL_TIM_IC_CaptureCallback+0x214>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	2b01      	cmp	r3, #1
 800066c:	d14c      	bne.n	8000708 <HAL_TIM_IC_CaptureCallback+0x1ec>
  			_IS_First_CAPTURED=0;
 800066e:	4b30      	ldr	r3, [pc, #192]	; (8000730 <HAL_TIM_IC_CaptureCallback+0x214>)
 8000670:	2200      	movs	r2, #0
 8000672:	701a      	strb	r2, [r3, #0]
  			_IC_value2=HAL_TIM_ReadCapturedValue(htim,TIM_CHANNEL_1);
 8000674:	2100      	movs	r1, #0
 8000676:	6878      	ldr	r0, [r7, #4]
 8000678:	f002 fb32 	bl	8002ce0 <HAL_TIM_ReadCapturedValue>
 800067c:	4603      	mov	r3, r0
 800067e:	b29a      	uxth	r2, r3
 8000680:	4b2d      	ldr	r3, [pc, #180]	; (8000738 <HAL_TIM_IC_CaptureCallback+0x21c>)
 8000682:	801a      	strh	r2, [r3, #0]
  			__HAL_TIM_SET_COUNTER(htim,0);
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	2200      	movs	r2, #0
 800068a:	625a      	str	r2, [r3, #36]	; 0x24
  			if(_IC_value1 < _IC_value2)
 800068c:	4b29      	ldr	r3, [pc, #164]	; (8000734 <HAL_TIM_IC_CaptureCallback+0x218>)
 800068e:	881a      	ldrh	r2, [r3, #0]
 8000690:	4b29      	ldr	r3, [pc, #164]	; (8000738 <HAL_TIM_IC_CaptureCallback+0x21c>)
 8000692:	881b      	ldrh	r3, [r3, #0]
 8000694:	429a      	cmp	r2, r3
 8000696:	d208      	bcs.n	80006aa <HAL_TIM_IC_CaptureCallback+0x18e>
  				_Difference = _IC_value2-_IC_value1;
 8000698:	4b27      	ldr	r3, [pc, #156]	; (8000738 <HAL_TIM_IC_CaptureCallback+0x21c>)
 800069a:	881a      	ldrh	r2, [r3, #0]
 800069c:	4b25      	ldr	r3, [pc, #148]	; (8000734 <HAL_TIM_IC_CaptureCallback+0x218>)
 800069e:	881b      	ldrh	r3, [r3, #0]
 80006a0:	1ad3      	subs	r3, r2, r3
 80006a2:	b29a      	uxth	r2, r3
 80006a4:	4b25      	ldr	r3, [pc, #148]	; (800073c <HAL_TIM_IC_CaptureCallback+0x220>)
 80006a6:	801a      	strh	r2, [r3, #0]
 80006a8:	e00f      	b.n	80006ca <HAL_TIM_IC_CaptureCallback+0x1ae>
  			else if(_IC_value1 > _IC_value2)
 80006aa:	4b22      	ldr	r3, [pc, #136]	; (8000734 <HAL_TIM_IC_CaptureCallback+0x218>)
 80006ac:	881a      	ldrh	r2, [r3, #0]
 80006ae:	4b22      	ldr	r3, [pc, #136]	; (8000738 <HAL_TIM_IC_CaptureCallback+0x21c>)
 80006b0:	881b      	ldrh	r3, [r3, #0]
 80006b2:	429a      	cmp	r2, r3
 80006b4:	d909      	bls.n	80006ca <HAL_TIM_IC_CaptureCallback+0x1ae>
  				_Difference = 0xffff - _IC_value1+ _IC_value2;
 80006b6:	4b20      	ldr	r3, [pc, #128]	; (8000738 <HAL_TIM_IC_CaptureCallback+0x21c>)
 80006b8:	881a      	ldrh	r2, [r3, #0]
 80006ba:	4b1e      	ldr	r3, [pc, #120]	; (8000734 <HAL_TIM_IC_CaptureCallback+0x218>)
 80006bc:	881b      	ldrh	r3, [r3, #0]
 80006be:	1ad3      	subs	r3, r2, r3
 80006c0:	b29b      	uxth	r3, r3
 80006c2:	3b01      	subs	r3, #1
 80006c4:	b29a      	uxth	r2, r3
 80006c6:	4b1d      	ldr	r3, [pc, #116]	; (800073c <HAL_TIM_IC_CaptureCallback+0x220>)
 80006c8:	801a      	strh	r2, [r3, #0]
  			distance2 = _Difference/58;
 80006ca:	4b1c      	ldr	r3, [pc, #112]	; (800073c <HAL_TIM_IC_CaptureCallback+0x220>)
 80006cc:	881b      	ldrh	r3, [r3, #0]
 80006ce:	4a15      	ldr	r2, [pc, #84]	; (8000724 <HAL_TIM_IC_CaptureCallback+0x208>)
 80006d0:	fba2 2303 	umull	r2, r3, r2, r3
 80006d4:	095b      	lsrs	r3, r3, #5
 80006d6:	b29a      	uxth	r2, r3
 80006d8:	4b19      	ldr	r3, [pc, #100]	; (8000740 <HAL_TIM_IC_CaptureCallback+0x224>)
 80006da:	801a      	strh	r2, [r3, #0]
  			__HAL_TIM_SET_CAPTUREPOLARITY(htim,TIM_CHANNEL_1,TIM_INPUTCHANNELPOLARITY_RISING);
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	6a1a      	ldr	r2, [r3, #32]
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	f022 020a 	bic.w	r2, r2, #10
 80006ea:	621a      	str	r2, [r3, #32]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681a      	ldr	r2, [r3, #0]
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	6a12      	ldr	r2, [r2, #32]
 80006f6:	621a      	str	r2, [r3, #32]
  			__HAL_TIM_DISABLE_IT(htim,TIM_IT_CC1);
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	68da      	ldr	r2, [r3, #12]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	f022 0202 	bic.w	r2, r2, #2
 8000706:	60da      	str	r2, [r3, #12]
}
 8000708:	bf00      	nop
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	200000b8 	.word	0x200000b8
 8000714:	200000a0 	.word	0x200000a0
 8000718:	200000a2 	.word	0x200000a2
 800071c:	200000a4 	.word	0x200000a4
 8000720:	200000a6 	.word	0x200000a6
 8000724:	8d3dcb09 	.word	0x8d3dcb09
 8000728:	200000a8 	.word	0x200000a8
 800072c:	20000100 	.word	0x20000100
 8000730:	200000aa 	.word	0x200000aa
 8000734:	200000ac 	.word	0x200000ac
 8000738:	200000ae 	.word	0x200000ae
 800073c:	200000b0 	.word	0x200000b0
 8000740:	200000b2 	.word	0x200000b2

08000744 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000744:	b480      	push	{r7}
 8000746:	b085      	sub	sp, #20
 8000748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800074a:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <HAL_MspInit+0x5c>)
 800074c:	699b      	ldr	r3, [r3, #24]
 800074e:	4a14      	ldr	r2, [pc, #80]	; (80007a0 <HAL_MspInit+0x5c>)
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	6193      	str	r3, [r2, #24]
 8000756:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <HAL_MspInit+0x5c>)
 8000758:	699b      	ldr	r3, [r3, #24]
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000762:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <HAL_MspInit+0x5c>)
 8000764:	69db      	ldr	r3, [r3, #28]
 8000766:	4a0e      	ldr	r2, [pc, #56]	; (80007a0 <HAL_MspInit+0x5c>)
 8000768:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800076c:	61d3      	str	r3, [r2, #28]
 800076e:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <HAL_MspInit+0x5c>)
 8000770:	69db      	ldr	r3, [r3, #28]
 8000772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800077a:	4b0a      	ldr	r3, [pc, #40]	; (80007a4 <HAL_MspInit+0x60>)
 800077c:	685b      	ldr	r3, [r3, #4]
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	4a04      	ldr	r2, [pc, #16]	; (80007a4 <HAL_MspInit+0x60>)
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000796:	bf00      	nop
 8000798:	3714      	adds	r7, #20
 800079a:	46bd      	mov	sp, r7
 800079c:	bc80      	pop	{r7}
 800079e:	4770      	bx	lr
 80007a0:	40021000 	.word	0x40021000
 80007a4:	40010000 	.word	0x40010000

080007a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007ac:	e7fe      	b.n	80007ac <NMI_Handler+0x4>

080007ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ae:	b480      	push	{r7}
 80007b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007b2:	e7fe      	b.n	80007b2 <HardFault_Handler+0x4>

080007b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007b8:	e7fe      	b.n	80007b8 <MemManage_Handler+0x4>

080007ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ba:	b480      	push	{r7}
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007be:	e7fe      	b.n	80007be <BusFault_Handler+0x4>

080007c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007c4:	e7fe      	b.n	80007c4 <UsageFault_Handler+0x4>

080007c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007c6:	b480      	push	{r7}
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007ca:	bf00      	nop
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bc80      	pop	{r7}
 80007d0:	4770      	bx	lr

080007d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007d2:	b480      	push	{r7}
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007d6:	bf00      	nop
 80007d8:	46bd      	mov	sp, r7
 80007da:	bc80      	pop	{r7}
 80007dc:	4770      	bx	lr

080007de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007de:	b480      	push	{r7}
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007e2:	bf00      	nop
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bc80      	pop	{r7}
 80007e8:	4770      	bx	lr

080007ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007ea:	b580      	push	{r7, lr}
 80007ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007ee:	f000 fb09 	bl	8000e04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
	...

080007f8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80007fc:	4802      	ldr	r0, [pc, #8]	; (8000808 <DMA1_Channel4_IRQHandler+0x10>)
 80007fe:	f000 fe09 	bl	8001414 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	200001d4 	.word	0x200001d4

0800080c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000810:	4802      	ldr	r0, [pc, #8]	; (800081c <DMA1_Channel5_IRQHandler+0x10>)
 8000812:	f000 fdff 	bl	8001414 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	20000190 	.word	0x20000190

08000820 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000824:	4802      	ldr	r0, [pc, #8]	; (8000830 <TIM2_IRQHandler+0x10>)
 8000826:	f002 f807 	bl	8002838 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	200000b8 	.word	0x200000b8

08000834 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000838:	4802      	ldr	r0, [pc, #8]	; (8000844 <TIM3_IRQHandler+0x10>)
 800083a:	f001 fffd 	bl	8002838 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	20000100 	.word	0x20000100

08000848 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800084c:	4802      	ldr	r0, [pc, #8]	; (8000858 <USART1_IRQHandler+0x10>)
 800084e:	f002 fe63 	bl	8003518 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	20000148 	.word	0x20000148

0800085c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b086      	sub	sp, #24
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000864:	4a14      	ldr	r2, [pc, #80]	; (80008b8 <_sbrk+0x5c>)
 8000866:	4b15      	ldr	r3, [pc, #84]	; (80008bc <_sbrk+0x60>)
 8000868:	1ad3      	subs	r3, r2, r3
 800086a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800086c:	697b      	ldr	r3, [r7, #20]
 800086e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000870:	4b13      	ldr	r3, [pc, #76]	; (80008c0 <_sbrk+0x64>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d102      	bne.n	800087e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000878:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <_sbrk+0x64>)
 800087a:	4a12      	ldr	r2, [pc, #72]	; (80008c4 <_sbrk+0x68>)
 800087c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800087e:	4b10      	ldr	r3, [pc, #64]	; (80008c0 <_sbrk+0x64>)
 8000880:	681a      	ldr	r2, [r3, #0]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	4413      	add	r3, r2
 8000886:	693a      	ldr	r2, [r7, #16]
 8000888:	429a      	cmp	r2, r3
 800088a:	d207      	bcs.n	800089c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800088c:	f003 fba6 	bl	8003fdc <__errno>
 8000890:	4603      	mov	r3, r0
 8000892:	220c      	movs	r2, #12
 8000894:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000896:	f04f 33ff 	mov.w	r3, #4294967295
 800089a:	e009      	b.n	80008b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800089c:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <_sbrk+0x64>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008a2:	4b07      	ldr	r3, [pc, #28]	; (80008c0 <_sbrk+0x64>)
 80008a4:	681a      	ldr	r2, [r3, #0]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	4413      	add	r3, r2
 80008aa:	4a05      	ldr	r2, [pc, #20]	; (80008c0 <_sbrk+0x64>)
 80008ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008ae:	68fb      	ldr	r3, [r7, #12]
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	3718      	adds	r7, #24
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	20010000 	.word	0x20010000
 80008bc:	00000400 	.word	0x00000400
 80008c0:	200000b4 	.word	0x200000b4
 80008c4:	20000368 	.word	0x20000368

080008c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008cc:	bf00      	nop
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bc80      	pop	{r7}
 80008d2:	4770      	bx	lr

080008d4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b08a      	sub	sp, #40	; 0x28
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008da:	f107 0318 	add.w	r3, r7, #24
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	605a      	str	r2, [r3, #4]
 80008e4:	609a      	str	r2, [r3, #8]
 80008e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008e8:	f107 0310 	add.w	r3, r7, #16
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80008f2:	463b      	mov	r3, r7
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008fe:	4b2c      	ldr	r3, [pc, #176]	; (80009b0 <MX_TIM2_Init+0xdc>)
 8000900:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000904:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8000906:	4b2a      	ldr	r3, [pc, #168]	; (80009b0 <MX_TIM2_Init+0xdc>)
 8000908:	2247      	movs	r2, #71	; 0x47
 800090a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800090c:	4b28      	ldr	r3, [pc, #160]	; (80009b0 <MX_TIM2_Init+0xdc>)
 800090e:	2200      	movs	r2, #0
 8000910:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000912:	4b27      	ldr	r3, [pc, #156]	; (80009b0 <MX_TIM2_Init+0xdc>)
 8000914:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000918:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800091a:	4b25      	ldr	r3, [pc, #148]	; (80009b0 <MX_TIM2_Init+0xdc>)
 800091c:	2200      	movs	r2, #0
 800091e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000920:	4b23      	ldr	r3, [pc, #140]	; (80009b0 <MX_TIM2_Init+0xdc>)
 8000922:	2280      	movs	r2, #128	; 0x80
 8000924:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000926:	4822      	ldr	r0, [pc, #136]	; (80009b0 <MX_TIM2_Init+0xdc>)
 8000928:	f001 fd6c 	bl	8002404 <HAL_TIM_Base_Init>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8000932:	f7ff fd66 	bl	8000402 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000936:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800093a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800093c:	f107 0318 	add.w	r3, r7, #24
 8000940:	4619      	mov	r1, r3
 8000942:	481b      	ldr	r0, [pc, #108]	; (80009b0 <MX_TIM2_Init+0xdc>)
 8000944:	f002 f904 	bl	8002b50 <HAL_TIM_ConfigClockSource>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800094e:	f7ff fd58 	bl	8000402 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000952:	4817      	ldr	r0, [pc, #92]	; (80009b0 <MX_TIM2_Init+0xdc>)
 8000954:	f001 fdfe 	bl	8002554 <HAL_TIM_IC_Init>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800095e:	f7ff fd50 	bl	8000402 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000962:	2300      	movs	r3, #0
 8000964:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000966:	2300      	movs	r3, #0
 8000968:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800096a:	f107 0310 	add.w	r3, r7, #16
 800096e:	4619      	mov	r1, r3
 8000970:	480f      	ldr	r0, [pc, #60]	; (80009b0 <MX_TIM2_Init+0xdc>)
 8000972:	f002 fc77 	bl	8003264 <HAL_TIMEx_MasterConfigSynchronization>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 800097c:	f7ff fd41 	bl	8000402 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000980:	2300      	movs	r3, #0
 8000982:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000984:	2301      	movs	r3, #1
 8000986:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000988:	2300      	movs	r3, #0
 800098a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800098c:	2300      	movs	r3, #0
 800098e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000990:	463b      	mov	r3, r7
 8000992:	2200      	movs	r2, #0
 8000994:	4619      	mov	r1, r3
 8000996:	4806      	ldr	r0, [pc, #24]	; (80009b0 <MX_TIM2_Init+0xdc>)
 8000998:	f002 f83e 	bl	8002a18 <HAL_TIM_IC_ConfigChannel>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 80009a2:	f7ff fd2e 	bl	8000402 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009a6:	bf00      	nop
 80009a8:	3728      	adds	r7, #40	; 0x28
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	200000b8 	.word	0x200000b8

080009b4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b08a      	sub	sp, #40	; 0x28
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ba:	f107 0318 	add.w	r3, r7, #24
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	605a      	str	r2, [r3, #4]
 80009c4:	609a      	str	r2, [r3, #8]
 80009c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009c8:	f107 0310 	add.w	r3, r7, #16
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80009d2:	463b      	mov	r3, r7
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009de:	4b2b      	ldr	r3, [pc, #172]	; (8000a8c <MX_TIM3_Init+0xd8>)
 80009e0:	4a2b      	ldr	r2, [pc, #172]	; (8000a90 <MX_TIM3_Init+0xdc>)
 80009e2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72;
 80009e4:	4b29      	ldr	r3, [pc, #164]	; (8000a8c <MX_TIM3_Init+0xd8>)
 80009e6:	2248      	movs	r2, #72	; 0x48
 80009e8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ea:	4b28      	ldr	r3, [pc, #160]	; (8000a8c <MX_TIM3_Init+0xd8>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80009f0:	4b26      	ldr	r3, [pc, #152]	; (8000a8c <MX_TIM3_Init+0xd8>)
 80009f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009f6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009f8:	4b24      	ldr	r3, [pc, #144]	; (8000a8c <MX_TIM3_Init+0xd8>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009fe:	4b23      	ldr	r3, [pc, #140]	; (8000a8c <MX_TIM3_Init+0xd8>)
 8000a00:	2280      	movs	r2, #128	; 0x80
 8000a02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a04:	4821      	ldr	r0, [pc, #132]	; (8000a8c <MX_TIM3_Init+0xd8>)
 8000a06:	f001 fcfd 	bl	8002404 <HAL_TIM_Base_Init>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8000a10:	f7ff fcf7 	bl	8000402 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a18:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a1a:	f107 0318 	add.w	r3, r7, #24
 8000a1e:	4619      	mov	r1, r3
 8000a20:	481a      	ldr	r0, [pc, #104]	; (8000a8c <MX_TIM3_Init+0xd8>)
 8000a22:	f002 f895 	bl	8002b50 <HAL_TIM_ConfigClockSource>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000a2c:	f7ff fce9 	bl	8000402 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000a30:	4816      	ldr	r0, [pc, #88]	; (8000a8c <MX_TIM3_Init+0xd8>)
 8000a32:	f001 fd8f 	bl	8002554 <HAL_TIM_IC_Init>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000a3c:	f7ff fce1 	bl	8000402 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a40:	2300      	movs	r3, #0
 8000a42:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a44:	2300      	movs	r3, #0
 8000a46:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a48:	f107 0310 	add.w	r3, r7, #16
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	480f      	ldr	r0, [pc, #60]	; (8000a8c <MX_TIM3_Init+0xd8>)
 8000a50:	f002 fc08 	bl	8003264 <HAL_TIMEx_MasterConfigSynchronization>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8000a5a:	f7ff fcd2 	bl	8000402 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000a62:	2301      	movs	r3, #1
 8000a64:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000a66:	2300      	movs	r3, #0
 8000a68:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000a6e:	463b      	mov	r3, r7
 8000a70:	2200      	movs	r2, #0
 8000a72:	4619      	mov	r1, r3
 8000a74:	4805      	ldr	r0, [pc, #20]	; (8000a8c <MX_TIM3_Init+0xd8>)
 8000a76:	f001 ffcf 	bl	8002a18 <HAL_TIM_IC_ConfigChannel>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8000a80:	f7ff fcbf 	bl	8000402 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a84:	bf00      	nop
 8000a86:	3728      	adds	r7, #40	; 0x28
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	20000100 	.word	0x20000100
 8000a90:	40000400 	.word	0x40000400

08000a94 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b08a      	sub	sp, #40	; 0x28
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9c:	f107 0318 	add.w	r3, r7, #24
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM2)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ab2:	d12c      	bne.n	8000b0e <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ab4:	4b30      	ldr	r3, [pc, #192]	; (8000b78 <HAL_TIM_Base_MspInit+0xe4>)
 8000ab6:	69db      	ldr	r3, [r3, #28]
 8000ab8:	4a2f      	ldr	r2, [pc, #188]	; (8000b78 <HAL_TIM_Base_MspInit+0xe4>)
 8000aba:	f043 0301 	orr.w	r3, r3, #1
 8000abe:	61d3      	str	r3, [r2, #28]
 8000ac0:	4b2d      	ldr	r3, [pc, #180]	; (8000b78 <HAL_TIM_Base_MspInit+0xe4>)
 8000ac2:	69db      	ldr	r3, [r3, #28]
 8000ac4:	f003 0301 	and.w	r3, r3, #1
 8000ac8:	617b      	str	r3, [r7, #20]
 8000aca:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000acc:	4b2a      	ldr	r3, [pc, #168]	; (8000b78 <HAL_TIM_Base_MspInit+0xe4>)
 8000ace:	699b      	ldr	r3, [r3, #24]
 8000ad0:	4a29      	ldr	r2, [pc, #164]	; (8000b78 <HAL_TIM_Base_MspInit+0xe4>)
 8000ad2:	f043 0304 	orr.w	r3, r3, #4
 8000ad6:	6193      	str	r3, [r2, #24]
 8000ad8:	4b27      	ldr	r3, [pc, #156]	; (8000b78 <HAL_TIM_Base_MspInit+0xe4>)
 8000ada:	699b      	ldr	r3, [r3, #24]
 8000adc:	f003 0304 	and.w	r3, r3, #4
 8000ae0:	613b      	str	r3, [r7, #16]
 8000ae2:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af0:	f107 0318 	add.w	r3, r7, #24
 8000af4:	4619      	mov	r1, r3
 8000af6:	4821      	ldr	r0, [pc, #132]	; (8000b7c <HAL_TIM_Base_MspInit+0xe8>)
 8000af8:	f000 fec8 	bl	800188c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000afc:	2200      	movs	r2, #0
 8000afe:	2100      	movs	r1, #0
 8000b00:	201c      	movs	r0, #28
 8000b02:	f000 fa96 	bl	8001032 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b06:	201c      	movs	r0, #28
 8000b08:	f000 faaf 	bl	800106a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000b0c:	e030      	b.n	8000b70 <HAL_TIM_Base_MspInit+0xdc>
  else if(tim_baseHandle->Instance==TIM3)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4a1b      	ldr	r2, [pc, #108]	; (8000b80 <HAL_TIM_Base_MspInit+0xec>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d12b      	bne.n	8000b70 <HAL_TIM_Base_MspInit+0xdc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b18:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <HAL_TIM_Base_MspInit+0xe4>)
 8000b1a:	69db      	ldr	r3, [r3, #28]
 8000b1c:	4a16      	ldr	r2, [pc, #88]	; (8000b78 <HAL_TIM_Base_MspInit+0xe4>)
 8000b1e:	f043 0302 	orr.w	r3, r3, #2
 8000b22:	61d3      	str	r3, [r2, #28]
 8000b24:	4b14      	ldr	r3, [pc, #80]	; (8000b78 <HAL_TIM_Base_MspInit+0xe4>)
 8000b26:	69db      	ldr	r3, [r3, #28]
 8000b28:	f003 0302 	and.w	r3, r3, #2
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b30:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <HAL_TIM_Base_MspInit+0xe4>)
 8000b32:	699b      	ldr	r3, [r3, #24]
 8000b34:	4a10      	ldr	r2, [pc, #64]	; (8000b78 <HAL_TIM_Base_MspInit+0xe4>)
 8000b36:	f043 0304 	orr.w	r3, r3, #4
 8000b3a:	6193      	str	r3, [r2, #24]
 8000b3c:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <HAL_TIM_Base_MspInit+0xe4>)
 8000b3e:	699b      	ldr	r3, [r3, #24]
 8000b40:	f003 0304 	and.w	r3, r3, #4
 8000b44:	60bb      	str	r3, [r7, #8]
 8000b46:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b48:	2340      	movs	r3, #64	; 0x40
 8000b4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b54:	f107 0318 	add.w	r3, r7, #24
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4808      	ldr	r0, [pc, #32]	; (8000b7c <HAL_TIM_Base_MspInit+0xe8>)
 8000b5c:	f000 fe96 	bl	800188c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000b60:	2200      	movs	r2, #0
 8000b62:	2100      	movs	r1, #0
 8000b64:	201d      	movs	r0, #29
 8000b66:	f000 fa64 	bl	8001032 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000b6a:	201d      	movs	r0, #29
 8000b6c:	f000 fa7d 	bl	800106a <HAL_NVIC_EnableIRQ>
}
 8000b70:	bf00      	nop
 8000b72:	3728      	adds	r7, #40	; 0x28
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	40021000 	.word	0x40021000
 8000b7c:	40010800 	.word	0x40010800
 8000b80:	40000400 	.word	0x40000400

08000b84 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b88:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <MX_USART1_UART_Init+0x4c>)
 8000b8a:	4a12      	ldr	r2, [pc, #72]	; (8000bd4 <MX_USART1_UART_Init+0x50>)
 8000b8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b8e:	4b10      	ldr	r3, [pc, #64]	; (8000bd0 <MX_USART1_UART_Init+0x4c>)
 8000b90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b96:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <MX_USART1_UART_Init+0x4c>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b9c:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <MX_USART1_UART_Init+0x4c>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ba2:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <MX_USART1_UART_Init+0x4c>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ba8:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <MX_USART1_UART_Init+0x4c>)
 8000baa:	220c      	movs	r2, #12
 8000bac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bae:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <MX_USART1_UART_Init+0x4c>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bb4:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <MX_USART1_UART_Init+0x4c>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bba:	4805      	ldr	r0, [pc, #20]	; (8000bd0 <MX_USART1_UART_Init+0x4c>)
 8000bbc:	f002 fbd0 	bl	8003360 <HAL_UART_Init>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000bc6:	f7ff fc1c 	bl	8000402 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	20000148 	.word	0x20000148
 8000bd4:	40013800 	.word	0x40013800

08000bd8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b088      	sub	sp, #32
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be0:	f107 0310 	add.w	r3, r7, #16
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a47      	ldr	r2, [pc, #284]	; (8000d10 <HAL_UART_MspInit+0x138>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	f040 8086 	bne.w	8000d06 <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bfa:	4b46      	ldr	r3, [pc, #280]	; (8000d14 <HAL_UART_MspInit+0x13c>)
 8000bfc:	699b      	ldr	r3, [r3, #24]
 8000bfe:	4a45      	ldr	r2, [pc, #276]	; (8000d14 <HAL_UART_MspInit+0x13c>)
 8000c00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c04:	6193      	str	r3, [r2, #24]
 8000c06:	4b43      	ldr	r3, [pc, #268]	; (8000d14 <HAL_UART_MspInit+0x13c>)
 8000c08:	699b      	ldr	r3, [r3, #24]
 8000c0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c12:	4b40      	ldr	r3, [pc, #256]	; (8000d14 <HAL_UART_MspInit+0x13c>)
 8000c14:	699b      	ldr	r3, [r3, #24]
 8000c16:	4a3f      	ldr	r2, [pc, #252]	; (8000d14 <HAL_UART_MspInit+0x13c>)
 8000c18:	f043 0304 	orr.w	r3, r3, #4
 8000c1c:	6193      	str	r3, [r2, #24]
 8000c1e:	4b3d      	ldr	r3, [pc, #244]	; (8000d14 <HAL_UART_MspInit+0x13c>)
 8000c20:	699b      	ldr	r3, [r3, #24]
 8000c22:	f003 0304 	and.w	r3, r3, #4
 8000c26:	60bb      	str	r3, [r7, #8]
 8000c28:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c30:	2302      	movs	r3, #2
 8000c32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c34:	2303      	movs	r3, #3
 8000c36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c38:	f107 0310 	add.w	r3, r7, #16
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4836      	ldr	r0, [pc, #216]	; (8000d18 <HAL_UART_MspInit+0x140>)
 8000c40:	f000 fe24 	bl	800188c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c48:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c52:	f107 0310 	add.w	r3, r7, #16
 8000c56:	4619      	mov	r1, r3
 8000c58:	482f      	ldr	r0, [pc, #188]	; (8000d18 <HAL_UART_MspInit+0x140>)
 8000c5a:	f000 fe17 	bl	800188c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000c5e:	4b2f      	ldr	r3, [pc, #188]	; (8000d1c <HAL_UART_MspInit+0x144>)
 8000c60:	4a2f      	ldr	r2, [pc, #188]	; (8000d20 <HAL_UART_MspInit+0x148>)
 8000c62:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c64:	4b2d      	ldr	r3, [pc, #180]	; (8000d1c <HAL_UART_MspInit+0x144>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c6a:	4b2c      	ldr	r3, [pc, #176]	; (8000d1c <HAL_UART_MspInit+0x144>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c70:	4b2a      	ldr	r3, [pc, #168]	; (8000d1c <HAL_UART_MspInit+0x144>)
 8000c72:	2280      	movs	r2, #128	; 0x80
 8000c74:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c76:	4b29      	ldr	r3, [pc, #164]	; (8000d1c <HAL_UART_MspInit+0x144>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c7c:	4b27      	ldr	r3, [pc, #156]	; (8000d1c <HAL_UART_MspInit+0x144>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000c82:	4b26      	ldr	r3, [pc, #152]	; (8000d1c <HAL_UART_MspInit+0x144>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c88:	4b24      	ldr	r3, [pc, #144]	; (8000d1c <HAL_UART_MspInit+0x144>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000c8e:	4823      	ldr	r0, [pc, #140]	; (8000d1c <HAL_UART_MspInit+0x144>)
 8000c90:	f000 fa06 	bl	80010a0 <HAL_DMA_Init>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8000c9a:	f7ff fbb2 	bl	8000402 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4a1e      	ldr	r2, [pc, #120]	; (8000d1c <HAL_UART_MspInit+0x144>)
 8000ca2:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ca4:	4a1d      	ldr	r2, [pc, #116]	; (8000d1c <HAL_UART_MspInit+0x144>)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8000caa:	4b1e      	ldr	r3, [pc, #120]	; (8000d24 <HAL_UART_MspInit+0x14c>)
 8000cac:	4a1e      	ldr	r2, [pc, #120]	; (8000d28 <HAL_UART_MspInit+0x150>)
 8000cae:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000cb0:	4b1c      	ldr	r3, [pc, #112]	; (8000d24 <HAL_UART_MspInit+0x14c>)
 8000cb2:	2210      	movs	r2, #16
 8000cb4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cb6:	4b1b      	ldr	r3, [pc, #108]	; (8000d24 <HAL_UART_MspInit+0x14c>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000cbc:	4b19      	ldr	r3, [pc, #100]	; (8000d24 <HAL_UART_MspInit+0x14c>)
 8000cbe:	2280      	movs	r2, #128	; 0x80
 8000cc0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cc2:	4b18      	ldr	r3, [pc, #96]	; (8000d24 <HAL_UART_MspInit+0x14c>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cc8:	4b16      	ldr	r3, [pc, #88]	; (8000d24 <HAL_UART_MspInit+0x14c>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000cce:	4b15      	ldr	r3, [pc, #84]	; (8000d24 <HAL_UART_MspInit+0x14c>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000cd4:	4b13      	ldr	r3, [pc, #76]	; (8000d24 <HAL_UART_MspInit+0x14c>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000cda:	4812      	ldr	r0, [pc, #72]	; (8000d24 <HAL_UART_MspInit+0x14c>)
 8000cdc:	f000 f9e0 	bl	80010a0 <HAL_DMA_Init>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8000ce6:	f7ff fb8c 	bl	8000402 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4a0d      	ldr	r2, [pc, #52]	; (8000d24 <HAL_UART_MspInit+0x14c>)
 8000cee:	639a      	str	r2, [r3, #56]	; 0x38
 8000cf0:	4a0c      	ldr	r2, [pc, #48]	; (8000d24 <HAL_UART_MspInit+0x14c>)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	2025      	movs	r0, #37	; 0x25
 8000cfc:	f000 f999 	bl	8001032 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d00:	2025      	movs	r0, #37	; 0x25
 8000d02:	f000 f9b2 	bl	800106a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000d06:	bf00      	nop
 8000d08:	3720      	adds	r7, #32
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40013800 	.word	0x40013800
 8000d14:	40021000 	.word	0x40021000
 8000d18:	40010800 	.word	0x40010800
 8000d1c:	20000190 	.word	0x20000190
 8000d20:	40020058 	.word	0x40020058
 8000d24:	200001d4 	.word	0x200001d4
 8000d28:	40020044 	.word	0x40020044

08000d2c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d2c:	f7ff fdcc 	bl	80008c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d30:	480b      	ldr	r0, [pc, #44]	; (8000d60 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d32:	490c      	ldr	r1, [pc, #48]	; (8000d64 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d34:	4a0c      	ldr	r2, [pc, #48]	; (8000d68 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d38:	e002      	b.n	8000d40 <LoopCopyDataInit>

08000d3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d3e:	3304      	adds	r3, #4

08000d40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d44:	d3f9      	bcc.n	8000d3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d46:	4a09      	ldr	r2, [pc, #36]	; (8000d6c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d48:	4c09      	ldr	r4, [pc, #36]	; (8000d70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d4c:	e001      	b.n	8000d52 <LoopFillZerobss>

08000d4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d50:	3204      	adds	r2, #4

08000d52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d54:	d3fb      	bcc.n	8000d4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d56:	f003 f947 	bl	8003fe8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d5a:	f7ff fac3 	bl	80002e4 <main>
  bx lr
 8000d5e:	4770      	bx	lr
  ldr r0, =_sdata
 8000d60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d64:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000d68:	0800498c 	.word	0x0800498c
  ldr r2, =_sbss
 8000d6c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000d70:	20000364 	.word	0x20000364

08000d74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d74:	e7fe      	b.n	8000d74 <ADC1_2_IRQHandler>
	...

08000d78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d7c:	4b08      	ldr	r3, [pc, #32]	; (8000da0 <HAL_Init+0x28>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a07      	ldr	r2, [pc, #28]	; (8000da0 <HAL_Init+0x28>)
 8000d82:	f043 0310 	orr.w	r3, r3, #16
 8000d86:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d88:	2003      	movs	r0, #3
 8000d8a:	f000 f947 	bl	800101c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d8e:	200f      	movs	r0, #15
 8000d90:	f000 f808 	bl	8000da4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d94:	f7ff fcd6 	bl	8000744 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d98:	2300      	movs	r3, #0
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40022000 	.word	0x40022000

08000da4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dac:	4b12      	ldr	r3, [pc, #72]	; (8000df8 <HAL_InitTick+0x54>)
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	4b12      	ldr	r3, [pc, #72]	; (8000dfc <HAL_InitTick+0x58>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	4619      	mov	r1, r3
 8000db6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f000 f95f 	bl	8001086 <HAL_SYSTICK_Config>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e00e      	b.n	8000df0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2b0f      	cmp	r3, #15
 8000dd6:	d80a      	bhi.n	8000dee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	6879      	ldr	r1, [r7, #4]
 8000ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8000de0:	f000 f927 	bl	8001032 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000de4:	4a06      	ldr	r2, [pc, #24]	; (8000e00 <HAL_InitTick+0x5c>)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dea:	2300      	movs	r3, #0
 8000dec:	e000      	b.n	8000df0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3708      	adds	r7, #8
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20000000 	.word	0x20000000
 8000dfc:	20000008 	.word	0x20000008
 8000e00:	20000004 	.word	0x20000004

08000e04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e08:	4b05      	ldr	r3, [pc, #20]	; (8000e20 <HAL_IncTick+0x1c>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	4b05      	ldr	r3, [pc, #20]	; (8000e24 <HAL_IncTick+0x20>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4413      	add	r3, r2
 8000e14:	4a03      	ldr	r2, [pc, #12]	; (8000e24 <HAL_IncTick+0x20>)
 8000e16:	6013      	str	r3, [r2, #0]
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bc80      	pop	{r7}
 8000e1e:	4770      	bx	lr
 8000e20:	20000008 	.word	0x20000008
 8000e24:	20000218 	.word	0x20000218

08000e28 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e2c:	4b02      	ldr	r3, [pc, #8]	; (8000e38 <HAL_GetTick+0x10>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bc80      	pop	{r7}
 8000e36:	4770      	bx	lr
 8000e38:	20000218 	.word	0x20000218

08000e3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e44:	f7ff fff0 	bl	8000e28 <HAL_GetTick>
 8000e48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e54:	d005      	beq.n	8000e62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e56:	4b0a      	ldr	r3, [pc, #40]	; (8000e80 <HAL_Delay+0x44>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	4413      	add	r3, r2
 8000e60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e62:	bf00      	nop
 8000e64:	f7ff ffe0 	bl	8000e28 <HAL_GetTick>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	68fa      	ldr	r2, [r7, #12]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d8f7      	bhi.n	8000e64 <HAL_Delay+0x28>
  {
  }
}
 8000e74:	bf00      	nop
 8000e76:	bf00      	nop
 8000e78:	3710      	adds	r7, #16
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20000008 	.word	0x20000008

08000e84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	f003 0307 	and.w	r3, r3, #7
 8000e92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e94:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e9a:	68ba      	ldr	r2, [r7, #8]
 8000e9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000eac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000eb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eb6:	4a04      	ldr	r2, [pc, #16]	; (8000ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	60d3      	str	r3, [r2, #12]
}
 8000ebc:	bf00      	nop
 8000ebe:	3714      	adds	r7, #20
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bc80      	pop	{r7}
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ed0:	4b04      	ldr	r3, [pc, #16]	; (8000ee4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	0a1b      	lsrs	r3, r3, #8
 8000ed6:	f003 0307 	and.w	r3, r3, #7
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bc80      	pop	{r7}
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	db0b      	blt.n	8000f12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	f003 021f 	and.w	r2, r3, #31
 8000f00:	4906      	ldr	r1, [pc, #24]	; (8000f1c <__NVIC_EnableIRQ+0x34>)
 8000f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f06:	095b      	lsrs	r3, r3, #5
 8000f08:	2001      	movs	r0, #1
 8000f0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f12:	bf00      	nop
 8000f14:	370c      	adds	r7, #12
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bc80      	pop	{r7}
 8000f1a:	4770      	bx	lr
 8000f1c:	e000e100 	.word	0xe000e100

08000f20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	6039      	str	r1, [r7, #0]
 8000f2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	db0a      	blt.n	8000f4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	b2da      	uxtb	r2, r3
 8000f38:	490c      	ldr	r1, [pc, #48]	; (8000f6c <__NVIC_SetPriority+0x4c>)
 8000f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3e:	0112      	lsls	r2, r2, #4
 8000f40:	b2d2      	uxtb	r2, r2
 8000f42:	440b      	add	r3, r1
 8000f44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f48:	e00a      	b.n	8000f60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	b2da      	uxtb	r2, r3
 8000f4e:	4908      	ldr	r1, [pc, #32]	; (8000f70 <__NVIC_SetPriority+0x50>)
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	f003 030f 	and.w	r3, r3, #15
 8000f56:	3b04      	subs	r3, #4
 8000f58:	0112      	lsls	r2, r2, #4
 8000f5a:	b2d2      	uxtb	r2, r2
 8000f5c:	440b      	add	r3, r1
 8000f5e:	761a      	strb	r2, [r3, #24]
}
 8000f60:	bf00      	nop
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bc80      	pop	{r7}
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	e000e100 	.word	0xe000e100
 8000f70:	e000ed00 	.word	0xe000ed00

08000f74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b089      	sub	sp, #36	; 0x24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	f003 0307 	and.w	r3, r3, #7
 8000f86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	f1c3 0307 	rsb	r3, r3, #7
 8000f8e:	2b04      	cmp	r3, #4
 8000f90:	bf28      	it	cs
 8000f92:	2304      	movcs	r3, #4
 8000f94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	3304      	adds	r3, #4
 8000f9a:	2b06      	cmp	r3, #6
 8000f9c:	d902      	bls.n	8000fa4 <NVIC_EncodePriority+0x30>
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	3b03      	subs	r3, #3
 8000fa2:	e000      	b.n	8000fa6 <NVIC_EncodePriority+0x32>
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fac:	69bb      	ldr	r3, [r7, #24]
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	43da      	mvns	r2, r3
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	401a      	ands	r2, r3
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fbc:	f04f 31ff 	mov.w	r1, #4294967295
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc6:	43d9      	mvns	r1, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fcc:	4313      	orrs	r3, r2
         );
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3724      	adds	r7, #36	; 0x24
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bc80      	pop	{r7}
 8000fd6:	4770      	bx	lr

08000fd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3b01      	subs	r3, #1
 8000fe4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fe8:	d301      	bcc.n	8000fee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fea:	2301      	movs	r3, #1
 8000fec:	e00f      	b.n	800100e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fee:	4a0a      	ldr	r2, [pc, #40]	; (8001018 <SysTick_Config+0x40>)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	3b01      	subs	r3, #1
 8000ff4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ff6:	210f      	movs	r1, #15
 8000ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ffc:	f7ff ff90 	bl	8000f20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001000:	4b05      	ldr	r3, [pc, #20]	; (8001018 <SysTick_Config+0x40>)
 8001002:	2200      	movs	r2, #0
 8001004:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001006:	4b04      	ldr	r3, [pc, #16]	; (8001018 <SysTick_Config+0x40>)
 8001008:	2207      	movs	r2, #7
 800100a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800100c:	2300      	movs	r3, #0
}
 800100e:	4618      	mov	r0, r3
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	e000e010 	.word	0xe000e010

0800101c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f7ff ff2d 	bl	8000e84 <__NVIC_SetPriorityGrouping>
}
 800102a:	bf00      	nop
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001032:	b580      	push	{r7, lr}
 8001034:	b086      	sub	sp, #24
 8001036:	af00      	add	r7, sp, #0
 8001038:	4603      	mov	r3, r0
 800103a:	60b9      	str	r1, [r7, #8]
 800103c:	607a      	str	r2, [r7, #4]
 800103e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001040:	2300      	movs	r3, #0
 8001042:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001044:	f7ff ff42 	bl	8000ecc <__NVIC_GetPriorityGrouping>
 8001048:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800104a:	687a      	ldr	r2, [r7, #4]
 800104c:	68b9      	ldr	r1, [r7, #8]
 800104e:	6978      	ldr	r0, [r7, #20]
 8001050:	f7ff ff90 	bl	8000f74 <NVIC_EncodePriority>
 8001054:	4602      	mov	r2, r0
 8001056:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800105a:	4611      	mov	r1, r2
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff ff5f 	bl	8000f20 <__NVIC_SetPriority>
}
 8001062:	bf00      	nop
 8001064:	3718      	adds	r7, #24
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	b082      	sub	sp, #8
 800106e:	af00      	add	r7, sp, #0
 8001070:	4603      	mov	r3, r0
 8001072:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff ff35 	bl	8000ee8 <__NVIC_EnableIRQ>
}
 800107e:	bf00      	nop
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001086:	b580      	push	{r7, lr}
 8001088:	b082      	sub	sp, #8
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f7ff ffa2 	bl	8000fd8 <SysTick_Config>
 8001094:	4603      	mov	r3, r0
}
 8001096:	4618      	mov	r0, r3
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
	...

080010a0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b085      	sub	sp, #20
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80010a8:	2300      	movs	r3, #0
 80010aa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d101      	bne.n	80010b6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e059      	b.n	800116a <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	461a      	mov	r2, r3
 80010bc:	4b2d      	ldr	r3, [pc, #180]	; (8001174 <HAL_DMA_Init+0xd4>)
 80010be:	429a      	cmp	r2, r3
 80010c0:	d80f      	bhi.n	80010e2 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	461a      	mov	r2, r3
 80010c8:	4b2b      	ldr	r3, [pc, #172]	; (8001178 <HAL_DMA_Init+0xd8>)
 80010ca:	4413      	add	r3, r2
 80010cc:	4a2b      	ldr	r2, [pc, #172]	; (800117c <HAL_DMA_Init+0xdc>)
 80010ce:	fba2 2303 	umull	r2, r3, r2, r3
 80010d2:	091b      	lsrs	r3, r3, #4
 80010d4:	009a      	lsls	r2, r3, #2
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a28      	ldr	r2, [pc, #160]	; (8001180 <HAL_DMA_Init+0xe0>)
 80010de:	63da      	str	r2, [r3, #60]	; 0x3c
 80010e0:	e00e      	b.n	8001100 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	461a      	mov	r2, r3
 80010e8:	4b26      	ldr	r3, [pc, #152]	; (8001184 <HAL_DMA_Init+0xe4>)
 80010ea:	4413      	add	r3, r2
 80010ec:	4a23      	ldr	r2, [pc, #140]	; (800117c <HAL_DMA_Init+0xdc>)
 80010ee:	fba2 2303 	umull	r2, r3, r2, r3
 80010f2:	091b      	lsrs	r3, r3, #4
 80010f4:	009a      	lsls	r2, r3, #2
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a22      	ldr	r2, [pc, #136]	; (8001188 <HAL_DMA_Init+0xe8>)
 80010fe:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2202      	movs	r2, #2
 8001104:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001116:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800111a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001124:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	68db      	ldr	r3, [r3, #12]
 800112a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001130:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	695b      	ldr	r3, [r3, #20]
 8001136:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800113c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	69db      	ldr	r3, [r3, #28]
 8001142:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001144:	68fa      	ldr	r2, [r7, #12]
 8001146:	4313      	orrs	r3, r2
 8001148:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	68fa      	ldr	r2, [r7, #12]
 8001150:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2200      	movs	r2, #0
 8001156:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2201      	movs	r2, #1
 800115c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2200      	movs	r2, #0
 8001164:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	3714      	adds	r7, #20
 800116e:	46bd      	mov	sp, r7
 8001170:	bc80      	pop	{r7}
 8001172:	4770      	bx	lr
 8001174:	40020407 	.word	0x40020407
 8001178:	bffdfff8 	.word	0xbffdfff8
 800117c:	cccccccd 	.word	0xcccccccd
 8001180:	40020000 	.word	0x40020000
 8001184:	bffdfbf8 	.word	0xbffdfbf8
 8001188:	40020400 	.word	0x40020400

0800118c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800118c:	b480      	push	{r7}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001194:	2300      	movs	r3, #0
 8001196:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d008      	beq.n	80011b6 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2204      	movs	r2, #4
 80011a8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2200      	movs	r2, #0
 80011ae:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e020      	b.n	80011f8 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f022 020e 	bic.w	r2, r2, #14
 80011c4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f022 0201 	bic.w	r2, r2, #1
 80011d4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011de:	2101      	movs	r1, #1
 80011e0:	fa01 f202 	lsl.w	r2, r1, r2
 80011e4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2201      	movs	r2, #1
 80011ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2200      	movs	r2, #0
 80011f2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80011f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3714      	adds	r7, #20
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bc80      	pop	{r7}
 8001200:	4770      	bx	lr
	...

08001204 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800120c:	2300      	movs	r3, #0
 800120e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001216:	b2db      	uxtb	r3, r3
 8001218:	2b02      	cmp	r3, #2
 800121a:	d005      	beq.n	8001228 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2204      	movs	r2, #4
 8001220:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	73fb      	strb	r3, [r7, #15]
 8001226:	e0d6      	b.n	80013d6 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f022 020e 	bic.w	r2, r2, #14
 8001236:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f022 0201 	bic.w	r2, r2, #1
 8001246:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	461a      	mov	r2, r3
 800124e:	4b64      	ldr	r3, [pc, #400]	; (80013e0 <HAL_DMA_Abort_IT+0x1dc>)
 8001250:	429a      	cmp	r2, r3
 8001252:	d958      	bls.n	8001306 <HAL_DMA_Abort_IT+0x102>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a62      	ldr	r2, [pc, #392]	; (80013e4 <HAL_DMA_Abort_IT+0x1e0>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d04f      	beq.n	80012fe <HAL_DMA_Abort_IT+0xfa>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a61      	ldr	r2, [pc, #388]	; (80013e8 <HAL_DMA_Abort_IT+0x1e4>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d048      	beq.n	80012fa <HAL_DMA_Abort_IT+0xf6>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a5f      	ldr	r2, [pc, #380]	; (80013ec <HAL_DMA_Abort_IT+0x1e8>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d040      	beq.n	80012f4 <HAL_DMA_Abort_IT+0xf0>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a5e      	ldr	r2, [pc, #376]	; (80013f0 <HAL_DMA_Abort_IT+0x1ec>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d038      	beq.n	80012ee <HAL_DMA_Abort_IT+0xea>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a5c      	ldr	r2, [pc, #368]	; (80013f4 <HAL_DMA_Abort_IT+0x1f0>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d030      	beq.n	80012e8 <HAL_DMA_Abort_IT+0xe4>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a5b      	ldr	r2, [pc, #364]	; (80013f8 <HAL_DMA_Abort_IT+0x1f4>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d028      	beq.n	80012e2 <HAL_DMA_Abort_IT+0xde>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a52      	ldr	r2, [pc, #328]	; (80013e0 <HAL_DMA_Abort_IT+0x1dc>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d020      	beq.n	80012dc <HAL_DMA_Abort_IT+0xd8>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a57      	ldr	r2, [pc, #348]	; (80013fc <HAL_DMA_Abort_IT+0x1f8>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d019      	beq.n	80012d8 <HAL_DMA_Abort_IT+0xd4>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a55      	ldr	r2, [pc, #340]	; (8001400 <HAL_DMA_Abort_IT+0x1fc>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d012      	beq.n	80012d4 <HAL_DMA_Abort_IT+0xd0>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a54      	ldr	r2, [pc, #336]	; (8001404 <HAL_DMA_Abort_IT+0x200>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d00a      	beq.n	80012ce <HAL_DMA_Abort_IT+0xca>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a52      	ldr	r2, [pc, #328]	; (8001408 <HAL_DMA_Abort_IT+0x204>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d102      	bne.n	80012c8 <HAL_DMA_Abort_IT+0xc4>
 80012c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012c6:	e01b      	b.n	8001300 <HAL_DMA_Abort_IT+0xfc>
 80012c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012cc:	e018      	b.n	8001300 <HAL_DMA_Abort_IT+0xfc>
 80012ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012d2:	e015      	b.n	8001300 <HAL_DMA_Abort_IT+0xfc>
 80012d4:	2310      	movs	r3, #16
 80012d6:	e013      	b.n	8001300 <HAL_DMA_Abort_IT+0xfc>
 80012d8:	2301      	movs	r3, #1
 80012da:	e011      	b.n	8001300 <HAL_DMA_Abort_IT+0xfc>
 80012dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012e0:	e00e      	b.n	8001300 <HAL_DMA_Abort_IT+0xfc>
 80012e2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80012e6:	e00b      	b.n	8001300 <HAL_DMA_Abort_IT+0xfc>
 80012e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012ec:	e008      	b.n	8001300 <HAL_DMA_Abort_IT+0xfc>
 80012ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012f2:	e005      	b.n	8001300 <HAL_DMA_Abort_IT+0xfc>
 80012f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012f8:	e002      	b.n	8001300 <HAL_DMA_Abort_IT+0xfc>
 80012fa:	2310      	movs	r3, #16
 80012fc:	e000      	b.n	8001300 <HAL_DMA_Abort_IT+0xfc>
 80012fe:	2301      	movs	r3, #1
 8001300:	4a42      	ldr	r2, [pc, #264]	; (800140c <HAL_DMA_Abort_IT+0x208>)
 8001302:	6053      	str	r3, [r2, #4]
 8001304:	e057      	b.n	80013b6 <HAL_DMA_Abort_IT+0x1b2>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a36      	ldr	r2, [pc, #216]	; (80013e4 <HAL_DMA_Abort_IT+0x1e0>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d04f      	beq.n	80013b0 <HAL_DMA_Abort_IT+0x1ac>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a34      	ldr	r2, [pc, #208]	; (80013e8 <HAL_DMA_Abort_IT+0x1e4>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d048      	beq.n	80013ac <HAL_DMA_Abort_IT+0x1a8>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a33      	ldr	r2, [pc, #204]	; (80013ec <HAL_DMA_Abort_IT+0x1e8>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d040      	beq.n	80013a6 <HAL_DMA_Abort_IT+0x1a2>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a31      	ldr	r2, [pc, #196]	; (80013f0 <HAL_DMA_Abort_IT+0x1ec>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d038      	beq.n	80013a0 <HAL_DMA_Abort_IT+0x19c>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a30      	ldr	r2, [pc, #192]	; (80013f4 <HAL_DMA_Abort_IT+0x1f0>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d030      	beq.n	800139a <HAL_DMA_Abort_IT+0x196>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a2e      	ldr	r2, [pc, #184]	; (80013f8 <HAL_DMA_Abort_IT+0x1f4>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d028      	beq.n	8001394 <HAL_DMA_Abort_IT+0x190>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a26      	ldr	r2, [pc, #152]	; (80013e0 <HAL_DMA_Abort_IT+0x1dc>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d020      	beq.n	800138e <HAL_DMA_Abort_IT+0x18a>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a2a      	ldr	r2, [pc, #168]	; (80013fc <HAL_DMA_Abort_IT+0x1f8>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d019      	beq.n	800138a <HAL_DMA_Abort_IT+0x186>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a29      	ldr	r2, [pc, #164]	; (8001400 <HAL_DMA_Abort_IT+0x1fc>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d012      	beq.n	8001386 <HAL_DMA_Abort_IT+0x182>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a27      	ldr	r2, [pc, #156]	; (8001404 <HAL_DMA_Abort_IT+0x200>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d00a      	beq.n	8001380 <HAL_DMA_Abort_IT+0x17c>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a26      	ldr	r2, [pc, #152]	; (8001408 <HAL_DMA_Abort_IT+0x204>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d102      	bne.n	800137a <HAL_DMA_Abort_IT+0x176>
 8001374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001378:	e01b      	b.n	80013b2 <HAL_DMA_Abort_IT+0x1ae>
 800137a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800137e:	e018      	b.n	80013b2 <HAL_DMA_Abort_IT+0x1ae>
 8001380:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001384:	e015      	b.n	80013b2 <HAL_DMA_Abort_IT+0x1ae>
 8001386:	2310      	movs	r3, #16
 8001388:	e013      	b.n	80013b2 <HAL_DMA_Abort_IT+0x1ae>
 800138a:	2301      	movs	r3, #1
 800138c:	e011      	b.n	80013b2 <HAL_DMA_Abort_IT+0x1ae>
 800138e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001392:	e00e      	b.n	80013b2 <HAL_DMA_Abort_IT+0x1ae>
 8001394:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001398:	e00b      	b.n	80013b2 <HAL_DMA_Abort_IT+0x1ae>
 800139a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800139e:	e008      	b.n	80013b2 <HAL_DMA_Abort_IT+0x1ae>
 80013a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013a4:	e005      	b.n	80013b2 <HAL_DMA_Abort_IT+0x1ae>
 80013a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013aa:	e002      	b.n	80013b2 <HAL_DMA_Abort_IT+0x1ae>
 80013ac:	2310      	movs	r3, #16
 80013ae:	e000      	b.n	80013b2 <HAL_DMA_Abort_IT+0x1ae>
 80013b0:	2301      	movs	r3, #1
 80013b2:	4a17      	ldr	r2, [pc, #92]	; (8001410 <HAL_DMA_Abort_IT+0x20c>)
 80013b4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2201      	movs	r2, #1
 80013ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d003      	beq.n	80013d6 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	4798      	blx	r3
    } 
  }
  return status;
 80013d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3710      	adds	r7, #16
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	40020080 	.word	0x40020080
 80013e4:	40020008 	.word	0x40020008
 80013e8:	4002001c 	.word	0x4002001c
 80013ec:	40020030 	.word	0x40020030
 80013f0:	40020044 	.word	0x40020044
 80013f4:	40020058 	.word	0x40020058
 80013f8:	4002006c 	.word	0x4002006c
 80013fc:	40020408 	.word	0x40020408
 8001400:	4002041c 	.word	0x4002041c
 8001404:	40020430 	.word	0x40020430
 8001408:	40020444 	.word	0x40020444
 800140c:	40020400 	.word	0x40020400
 8001410:	40020000 	.word	0x40020000

08001414 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001430:	2204      	movs	r2, #4
 8001432:	409a      	lsls	r2, r3
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	4013      	ands	r3, r2
 8001438:	2b00      	cmp	r3, #0
 800143a:	f000 80f1 	beq.w	8001620 <HAL_DMA_IRQHandler+0x20c>
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	f003 0304 	and.w	r3, r3, #4
 8001444:	2b00      	cmp	r3, #0
 8001446:	f000 80eb 	beq.w	8001620 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 0320 	and.w	r3, r3, #32
 8001454:	2b00      	cmp	r3, #0
 8001456:	d107      	bne.n	8001468 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f022 0204 	bic.w	r2, r2, #4
 8001466:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	461a      	mov	r2, r3
 800146e:	4b5f      	ldr	r3, [pc, #380]	; (80015ec <HAL_DMA_IRQHandler+0x1d8>)
 8001470:	429a      	cmp	r2, r3
 8001472:	d958      	bls.n	8001526 <HAL_DMA_IRQHandler+0x112>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a5d      	ldr	r2, [pc, #372]	; (80015f0 <HAL_DMA_IRQHandler+0x1dc>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d04f      	beq.n	800151e <HAL_DMA_IRQHandler+0x10a>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a5c      	ldr	r2, [pc, #368]	; (80015f4 <HAL_DMA_IRQHandler+0x1e0>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d048      	beq.n	800151a <HAL_DMA_IRQHandler+0x106>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a5a      	ldr	r2, [pc, #360]	; (80015f8 <HAL_DMA_IRQHandler+0x1e4>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d040      	beq.n	8001514 <HAL_DMA_IRQHandler+0x100>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a59      	ldr	r2, [pc, #356]	; (80015fc <HAL_DMA_IRQHandler+0x1e8>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d038      	beq.n	800150e <HAL_DMA_IRQHandler+0xfa>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a57      	ldr	r2, [pc, #348]	; (8001600 <HAL_DMA_IRQHandler+0x1ec>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d030      	beq.n	8001508 <HAL_DMA_IRQHandler+0xf4>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a56      	ldr	r2, [pc, #344]	; (8001604 <HAL_DMA_IRQHandler+0x1f0>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d028      	beq.n	8001502 <HAL_DMA_IRQHandler+0xee>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a4d      	ldr	r2, [pc, #308]	; (80015ec <HAL_DMA_IRQHandler+0x1d8>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d020      	beq.n	80014fc <HAL_DMA_IRQHandler+0xe8>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a52      	ldr	r2, [pc, #328]	; (8001608 <HAL_DMA_IRQHandler+0x1f4>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d019      	beq.n	80014f8 <HAL_DMA_IRQHandler+0xe4>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a50      	ldr	r2, [pc, #320]	; (800160c <HAL_DMA_IRQHandler+0x1f8>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d012      	beq.n	80014f4 <HAL_DMA_IRQHandler+0xe0>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a4f      	ldr	r2, [pc, #316]	; (8001610 <HAL_DMA_IRQHandler+0x1fc>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d00a      	beq.n	80014ee <HAL_DMA_IRQHandler+0xda>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a4d      	ldr	r2, [pc, #308]	; (8001614 <HAL_DMA_IRQHandler+0x200>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d102      	bne.n	80014e8 <HAL_DMA_IRQHandler+0xd4>
 80014e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80014e6:	e01b      	b.n	8001520 <HAL_DMA_IRQHandler+0x10c>
 80014e8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80014ec:	e018      	b.n	8001520 <HAL_DMA_IRQHandler+0x10c>
 80014ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014f2:	e015      	b.n	8001520 <HAL_DMA_IRQHandler+0x10c>
 80014f4:	2340      	movs	r3, #64	; 0x40
 80014f6:	e013      	b.n	8001520 <HAL_DMA_IRQHandler+0x10c>
 80014f8:	2304      	movs	r3, #4
 80014fa:	e011      	b.n	8001520 <HAL_DMA_IRQHandler+0x10c>
 80014fc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001500:	e00e      	b.n	8001520 <HAL_DMA_IRQHandler+0x10c>
 8001502:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001506:	e00b      	b.n	8001520 <HAL_DMA_IRQHandler+0x10c>
 8001508:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800150c:	e008      	b.n	8001520 <HAL_DMA_IRQHandler+0x10c>
 800150e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001512:	e005      	b.n	8001520 <HAL_DMA_IRQHandler+0x10c>
 8001514:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001518:	e002      	b.n	8001520 <HAL_DMA_IRQHandler+0x10c>
 800151a:	2340      	movs	r3, #64	; 0x40
 800151c:	e000      	b.n	8001520 <HAL_DMA_IRQHandler+0x10c>
 800151e:	2304      	movs	r3, #4
 8001520:	4a3d      	ldr	r2, [pc, #244]	; (8001618 <HAL_DMA_IRQHandler+0x204>)
 8001522:	6053      	str	r3, [r2, #4]
 8001524:	e057      	b.n	80015d6 <HAL_DMA_IRQHandler+0x1c2>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a31      	ldr	r2, [pc, #196]	; (80015f0 <HAL_DMA_IRQHandler+0x1dc>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d04f      	beq.n	80015d0 <HAL_DMA_IRQHandler+0x1bc>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a2f      	ldr	r2, [pc, #188]	; (80015f4 <HAL_DMA_IRQHandler+0x1e0>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d048      	beq.n	80015cc <HAL_DMA_IRQHandler+0x1b8>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a2e      	ldr	r2, [pc, #184]	; (80015f8 <HAL_DMA_IRQHandler+0x1e4>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d040      	beq.n	80015c6 <HAL_DMA_IRQHandler+0x1b2>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a2c      	ldr	r2, [pc, #176]	; (80015fc <HAL_DMA_IRQHandler+0x1e8>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d038      	beq.n	80015c0 <HAL_DMA_IRQHandler+0x1ac>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a2b      	ldr	r2, [pc, #172]	; (8001600 <HAL_DMA_IRQHandler+0x1ec>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d030      	beq.n	80015ba <HAL_DMA_IRQHandler+0x1a6>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a29      	ldr	r2, [pc, #164]	; (8001604 <HAL_DMA_IRQHandler+0x1f0>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d028      	beq.n	80015b4 <HAL_DMA_IRQHandler+0x1a0>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a21      	ldr	r2, [pc, #132]	; (80015ec <HAL_DMA_IRQHandler+0x1d8>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d020      	beq.n	80015ae <HAL_DMA_IRQHandler+0x19a>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a25      	ldr	r2, [pc, #148]	; (8001608 <HAL_DMA_IRQHandler+0x1f4>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d019      	beq.n	80015aa <HAL_DMA_IRQHandler+0x196>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a24      	ldr	r2, [pc, #144]	; (800160c <HAL_DMA_IRQHandler+0x1f8>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d012      	beq.n	80015a6 <HAL_DMA_IRQHandler+0x192>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a22      	ldr	r2, [pc, #136]	; (8001610 <HAL_DMA_IRQHandler+0x1fc>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d00a      	beq.n	80015a0 <HAL_DMA_IRQHandler+0x18c>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a21      	ldr	r2, [pc, #132]	; (8001614 <HAL_DMA_IRQHandler+0x200>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d102      	bne.n	800159a <HAL_DMA_IRQHandler+0x186>
 8001594:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001598:	e01b      	b.n	80015d2 <HAL_DMA_IRQHandler+0x1be>
 800159a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800159e:	e018      	b.n	80015d2 <HAL_DMA_IRQHandler+0x1be>
 80015a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015a4:	e015      	b.n	80015d2 <HAL_DMA_IRQHandler+0x1be>
 80015a6:	2340      	movs	r3, #64	; 0x40
 80015a8:	e013      	b.n	80015d2 <HAL_DMA_IRQHandler+0x1be>
 80015aa:	2304      	movs	r3, #4
 80015ac:	e011      	b.n	80015d2 <HAL_DMA_IRQHandler+0x1be>
 80015ae:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80015b2:	e00e      	b.n	80015d2 <HAL_DMA_IRQHandler+0x1be>
 80015b4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015b8:	e00b      	b.n	80015d2 <HAL_DMA_IRQHandler+0x1be>
 80015ba:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80015be:	e008      	b.n	80015d2 <HAL_DMA_IRQHandler+0x1be>
 80015c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015c4:	e005      	b.n	80015d2 <HAL_DMA_IRQHandler+0x1be>
 80015c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015ca:	e002      	b.n	80015d2 <HAL_DMA_IRQHandler+0x1be>
 80015cc:	2340      	movs	r3, #64	; 0x40
 80015ce:	e000      	b.n	80015d2 <HAL_DMA_IRQHandler+0x1be>
 80015d0:	2304      	movs	r3, #4
 80015d2:	4a12      	ldr	r2, [pc, #72]	; (800161c <HAL_DMA_IRQHandler+0x208>)
 80015d4:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015da:	2b00      	cmp	r3, #0
 80015dc:	f000 8136 	beq.w	800184c <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80015e8:	e130      	b.n	800184c <HAL_DMA_IRQHandler+0x438>
 80015ea:	bf00      	nop
 80015ec:	40020080 	.word	0x40020080
 80015f0:	40020008 	.word	0x40020008
 80015f4:	4002001c 	.word	0x4002001c
 80015f8:	40020030 	.word	0x40020030
 80015fc:	40020044 	.word	0x40020044
 8001600:	40020058 	.word	0x40020058
 8001604:	4002006c 	.word	0x4002006c
 8001608:	40020408 	.word	0x40020408
 800160c:	4002041c 	.word	0x4002041c
 8001610:	40020430 	.word	0x40020430
 8001614:	40020444 	.word	0x40020444
 8001618:	40020400 	.word	0x40020400
 800161c:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001624:	2202      	movs	r2, #2
 8001626:	409a      	lsls	r2, r3
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	4013      	ands	r3, r2
 800162c:	2b00      	cmp	r3, #0
 800162e:	f000 80dd 	beq.w	80017ec <HAL_DMA_IRQHandler+0x3d8>
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	f003 0302 	and.w	r3, r3, #2
 8001638:	2b00      	cmp	r3, #0
 800163a:	f000 80d7 	beq.w	80017ec <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0320 	and.w	r3, r3, #32
 8001648:	2b00      	cmp	r3, #0
 800164a:	d10b      	bne.n	8001664 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f022 020a 	bic.w	r2, r2, #10
 800165a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2201      	movs	r2, #1
 8001660:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	461a      	mov	r2, r3
 800166a:	4b7b      	ldr	r3, [pc, #492]	; (8001858 <HAL_DMA_IRQHandler+0x444>)
 800166c:	429a      	cmp	r2, r3
 800166e:	d958      	bls.n	8001722 <HAL_DMA_IRQHandler+0x30e>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a79      	ldr	r2, [pc, #484]	; (800185c <HAL_DMA_IRQHandler+0x448>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d04f      	beq.n	800171a <HAL_DMA_IRQHandler+0x306>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a78      	ldr	r2, [pc, #480]	; (8001860 <HAL_DMA_IRQHandler+0x44c>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d048      	beq.n	8001716 <HAL_DMA_IRQHandler+0x302>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a76      	ldr	r2, [pc, #472]	; (8001864 <HAL_DMA_IRQHandler+0x450>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d040      	beq.n	8001710 <HAL_DMA_IRQHandler+0x2fc>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a75      	ldr	r2, [pc, #468]	; (8001868 <HAL_DMA_IRQHandler+0x454>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d038      	beq.n	800170a <HAL_DMA_IRQHandler+0x2f6>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a73      	ldr	r2, [pc, #460]	; (800186c <HAL_DMA_IRQHandler+0x458>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d030      	beq.n	8001704 <HAL_DMA_IRQHandler+0x2f0>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a72      	ldr	r2, [pc, #456]	; (8001870 <HAL_DMA_IRQHandler+0x45c>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d028      	beq.n	80016fe <HAL_DMA_IRQHandler+0x2ea>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a69      	ldr	r2, [pc, #420]	; (8001858 <HAL_DMA_IRQHandler+0x444>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d020      	beq.n	80016f8 <HAL_DMA_IRQHandler+0x2e4>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a6e      	ldr	r2, [pc, #440]	; (8001874 <HAL_DMA_IRQHandler+0x460>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d019      	beq.n	80016f4 <HAL_DMA_IRQHandler+0x2e0>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a6c      	ldr	r2, [pc, #432]	; (8001878 <HAL_DMA_IRQHandler+0x464>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d012      	beq.n	80016f0 <HAL_DMA_IRQHandler+0x2dc>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a6b      	ldr	r2, [pc, #428]	; (800187c <HAL_DMA_IRQHandler+0x468>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d00a      	beq.n	80016ea <HAL_DMA_IRQHandler+0x2d6>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a69      	ldr	r2, [pc, #420]	; (8001880 <HAL_DMA_IRQHandler+0x46c>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d102      	bne.n	80016e4 <HAL_DMA_IRQHandler+0x2d0>
 80016de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016e2:	e01b      	b.n	800171c <HAL_DMA_IRQHandler+0x308>
 80016e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016e8:	e018      	b.n	800171c <HAL_DMA_IRQHandler+0x308>
 80016ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016ee:	e015      	b.n	800171c <HAL_DMA_IRQHandler+0x308>
 80016f0:	2320      	movs	r3, #32
 80016f2:	e013      	b.n	800171c <HAL_DMA_IRQHandler+0x308>
 80016f4:	2302      	movs	r3, #2
 80016f6:	e011      	b.n	800171c <HAL_DMA_IRQHandler+0x308>
 80016f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016fc:	e00e      	b.n	800171c <HAL_DMA_IRQHandler+0x308>
 80016fe:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001702:	e00b      	b.n	800171c <HAL_DMA_IRQHandler+0x308>
 8001704:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001708:	e008      	b.n	800171c <HAL_DMA_IRQHandler+0x308>
 800170a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800170e:	e005      	b.n	800171c <HAL_DMA_IRQHandler+0x308>
 8001710:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001714:	e002      	b.n	800171c <HAL_DMA_IRQHandler+0x308>
 8001716:	2320      	movs	r3, #32
 8001718:	e000      	b.n	800171c <HAL_DMA_IRQHandler+0x308>
 800171a:	2302      	movs	r3, #2
 800171c:	4a59      	ldr	r2, [pc, #356]	; (8001884 <HAL_DMA_IRQHandler+0x470>)
 800171e:	6053      	str	r3, [r2, #4]
 8001720:	e057      	b.n	80017d2 <HAL_DMA_IRQHandler+0x3be>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a4d      	ldr	r2, [pc, #308]	; (800185c <HAL_DMA_IRQHandler+0x448>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d04f      	beq.n	80017cc <HAL_DMA_IRQHandler+0x3b8>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a4b      	ldr	r2, [pc, #300]	; (8001860 <HAL_DMA_IRQHandler+0x44c>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d048      	beq.n	80017c8 <HAL_DMA_IRQHandler+0x3b4>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a4a      	ldr	r2, [pc, #296]	; (8001864 <HAL_DMA_IRQHandler+0x450>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d040      	beq.n	80017c2 <HAL_DMA_IRQHandler+0x3ae>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a48      	ldr	r2, [pc, #288]	; (8001868 <HAL_DMA_IRQHandler+0x454>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d038      	beq.n	80017bc <HAL_DMA_IRQHandler+0x3a8>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a47      	ldr	r2, [pc, #284]	; (800186c <HAL_DMA_IRQHandler+0x458>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d030      	beq.n	80017b6 <HAL_DMA_IRQHandler+0x3a2>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a45      	ldr	r2, [pc, #276]	; (8001870 <HAL_DMA_IRQHandler+0x45c>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d028      	beq.n	80017b0 <HAL_DMA_IRQHandler+0x39c>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a3d      	ldr	r2, [pc, #244]	; (8001858 <HAL_DMA_IRQHandler+0x444>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d020      	beq.n	80017aa <HAL_DMA_IRQHandler+0x396>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a41      	ldr	r2, [pc, #260]	; (8001874 <HAL_DMA_IRQHandler+0x460>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d019      	beq.n	80017a6 <HAL_DMA_IRQHandler+0x392>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a40      	ldr	r2, [pc, #256]	; (8001878 <HAL_DMA_IRQHandler+0x464>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d012      	beq.n	80017a2 <HAL_DMA_IRQHandler+0x38e>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a3e      	ldr	r2, [pc, #248]	; (800187c <HAL_DMA_IRQHandler+0x468>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d00a      	beq.n	800179c <HAL_DMA_IRQHandler+0x388>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a3d      	ldr	r2, [pc, #244]	; (8001880 <HAL_DMA_IRQHandler+0x46c>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d102      	bne.n	8001796 <HAL_DMA_IRQHandler+0x382>
 8001790:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001794:	e01b      	b.n	80017ce <HAL_DMA_IRQHandler+0x3ba>
 8001796:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800179a:	e018      	b.n	80017ce <HAL_DMA_IRQHandler+0x3ba>
 800179c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017a0:	e015      	b.n	80017ce <HAL_DMA_IRQHandler+0x3ba>
 80017a2:	2320      	movs	r3, #32
 80017a4:	e013      	b.n	80017ce <HAL_DMA_IRQHandler+0x3ba>
 80017a6:	2302      	movs	r3, #2
 80017a8:	e011      	b.n	80017ce <HAL_DMA_IRQHandler+0x3ba>
 80017aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017ae:	e00e      	b.n	80017ce <HAL_DMA_IRQHandler+0x3ba>
 80017b0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80017b4:	e00b      	b.n	80017ce <HAL_DMA_IRQHandler+0x3ba>
 80017b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017ba:	e008      	b.n	80017ce <HAL_DMA_IRQHandler+0x3ba>
 80017bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017c0:	e005      	b.n	80017ce <HAL_DMA_IRQHandler+0x3ba>
 80017c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017c6:	e002      	b.n	80017ce <HAL_DMA_IRQHandler+0x3ba>
 80017c8:	2320      	movs	r3, #32
 80017ca:	e000      	b.n	80017ce <HAL_DMA_IRQHandler+0x3ba>
 80017cc:	2302      	movs	r3, #2
 80017ce:	4a2e      	ldr	r2, [pc, #184]	; (8001888 <HAL_DMA_IRQHandler+0x474>)
 80017d0:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2200      	movs	r2, #0
 80017d6:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d034      	beq.n	800184c <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80017ea:	e02f      	b.n	800184c <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f0:	2208      	movs	r2, #8
 80017f2:	409a      	lsls	r2, r3
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	4013      	ands	r3, r2
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d028      	beq.n	800184e <HAL_DMA_IRQHandler+0x43a>
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	f003 0308 	and.w	r3, r3, #8
 8001802:	2b00      	cmp	r3, #0
 8001804:	d023      	beq.n	800184e <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f022 020e 	bic.w	r2, r2, #14
 8001814:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800181e:	2101      	movs	r1, #1
 8001820:	fa01 f202 	lsl.w	r2, r1, r2
 8001824:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2201      	movs	r2, #1
 800182a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2201      	movs	r2, #1
 8001830:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2200      	movs	r2, #0
 8001838:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001840:	2b00      	cmp	r3, #0
 8001842:	d004      	beq.n	800184e <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	4798      	blx	r3
    }
  }
  return;
 800184c:	bf00      	nop
 800184e:	bf00      	nop
}
 8001850:	3710      	adds	r7, #16
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	40020080 	.word	0x40020080
 800185c:	40020008 	.word	0x40020008
 8001860:	4002001c 	.word	0x4002001c
 8001864:	40020030 	.word	0x40020030
 8001868:	40020044 	.word	0x40020044
 800186c:	40020058 	.word	0x40020058
 8001870:	4002006c 	.word	0x4002006c
 8001874:	40020408 	.word	0x40020408
 8001878:	4002041c 	.word	0x4002041c
 800187c:	40020430 	.word	0x40020430
 8001880:	40020444 	.word	0x40020444
 8001884:	40020400 	.word	0x40020400
 8001888:	40020000 	.word	0x40020000

0800188c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800188c:	b480      	push	{r7}
 800188e:	b08b      	sub	sp, #44	; 0x2c
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001896:	2300      	movs	r3, #0
 8001898:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800189a:	2300      	movs	r3, #0
 800189c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800189e:	e179      	b.n	8001b94 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018a0:	2201      	movs	r2, #1
 80018a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	69fa      	ldr	r2, [r7, #28]
 80018b0:	4013      	ands	r3, r2
 80018b2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	f040 8168 	bne.w	8001b8e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	4a96      	ldr	r2, [pc, #600]	; (8001b1c <HAL_GPIO_Init+0x290>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d05e      	beq.n	8001986 <HAL_GPIO_Init+0xfa>
 80018c8:	4a94      	ldr	r2, [pc, #592]	; (8001b1c <HAL_GPIO_Init+0x290>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d875      	bhi.n	80019ba <HAL_GPIO_Init+0x12e>
 80018ce:	4a94      	ldr	r2, [pc, #592]	; (8001b20 <HAL_GPIO_Init+0x294>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d058      	beq.n	8001986 <HAL_GPIO_Init+0xfa>
 80018d4:	4a92      	ldr	r2, [pc, #584]	; (8001b20 <HAL_GPIO_Init+0x294>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d86f      	bhi.n	80019ba <HAL_GPIO_Init+0x12e>
 80018da:	4a92      	ldr	r2, [pc, #584]	; (8001b24 <HAL_GPIO_Init+0x298>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d052      	beq.n	8001986 <HAL_GPIO_Init+0xfa>
 80018e0:	4a90      	ldr	r2, [pc, #576]	; (8001b24 <HAL_GPIO_Init+0x298>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d869      	bhi.n	80019ba <HAL_GPIO_Init+0x12e>
 80018e6:	4a90      	ldr	r2, [pc, #576]	; (8001b28 <HAL_GPIO_Init+0x29c>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d04c      	beq.n	8001986 <HAL_GPIO_Init+0xfa>
 80018ec:	4a8e      	ldr	r2, [pc, #568]	; (8001b28 <HAL_GPIO_Init+0x29c>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d863      	bhi.n	80019ba <HAL_GPIO_Init+0x12e>
 80018f2:	4a8e      	ldr	r2, [pc, #568]	; (8001b2c <HAL_GPIO_Init+0x2a0>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d046      	beq.n	8001986 <HAL_GPIO_Init+0xfa>
 80018f8:	4a8c      	ldr	r2, [pc, #560]	; (8001b2c <HAL_GPIO_Init+0x2a0>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d85d      	bhi.n	80019ba <HAL_GPIO_Init+0x12e>
 80018fe:	2b12      	cmp	r3, #18
 8001900:	d82a      	bhi.n	8001958 <HAL_GPIO_Init+0xcc>
 8001902:	2b12      	cmp	r3, #18
 8001904:	d859      	bhi.n	80019ba <HAL_GPIO_Init+0x12e>
 8001906:	a201      	add	r2, pc, #4	; (adr r2, 800190c <HAL_GPIO_Init+0x80>)
 8001908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800190c:	08001987 	.word	0x08001987
 8001910:	08001961 	.word	0x08001961
 8001914:	08001973 	.word	0x08001973
 8001918:	080019b5 	.word	0x080019b5
 800191c:	080019bb 	.word	0x080019bb
 8001920:	080019bb 	.word	0x080019bb
 8001924:	080019bb 	.word	0x080019bb
 8001928:	080019bb 	.word	0x080019bb
 800192c:	080019bb 	.word	0x080019bb
 8001930:	080019bb 	.word	0x080019bb
 8001934:	080019bb 	.word	0x080019bb
 8001938:	080019bb 	.word	0x080019bb
 800193c:	080019bb 	.word	0x080019bb
 8001940:	080019bb 	.word	0x080019bb
 8001944:	080019bb 	.word	0x080019bb
 8001948:	080019bb 	.word	0x080019bb
 800194c:	080019bb 	.word	0x080019bb
 8001950:	08001969 	.word	0x08001969
 8001954:	0800197d 	.word	0x0800197d
 8001958:	4a75      	ldr	r2, [pc, #468]	; (8001b30 <HAL_GPIO_Init+0x2a4>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d013      	beq.n	8001986 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800195e:	e02c      	b.n	80019ba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	623b      	str	r3, [r7, #32]
          break;
 8001966:	e029      	b.n	80019bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	3304      	adds	r3, #4
 800196e:	623b      	str	r3, [r7, #32]
          break;
 8001970:	e024      	b.n	80019bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	68db      	ldr	r3, [r3, #12]
 8001976:	3308      	adds	r3, #8
 8001978:	623b      	str	r3, [r7, #32]
          break;
 800197a:	e01f      	b.n	80019bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	330c      	adds	r3, #12
 8001982:	623b      	str	r3, [r7, #32]
          break;
 8001984:	e01a      	b.n	80019bc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d102      	bne.n	8001994 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800198e:	2304      	movs	r3, #4
 8001990:	623b      	str	r3, [r7, #32]
          break;
 8001992:	e013      	b.n	80019bc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d105      	bne.n	80019a8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800199c:	2308      	movs	r3, #8
 800199e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	69fa      	ldr	r2, [r7, #28]
 80019a4:	611a      	str	r2, [r3, #16]
          break;
 80019a6:	e009      	b.n	80019bc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019a8:	2308      	movs	r3, #8
 80019aa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	69fa      	ldr	r2, [r7, #28]
 80019b0:	615a      	str	r2, [r3, #20]
          break;
 80019b2:	e003      	b.n	80019bc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019b4:	2300      	movs	r3, #0
 80019b6:	623b      	str	r3, [r7, #32]
          break;
 80019b8:	e000      	b.n	80019bc <HAL_GPIO_Init+0x130>
          break;
 80019ba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	2bff      	cmp	r3, #255	; 0xff
 80019c0:	d801      	bhi.n	80019c6 <HAL_GPIO_Init+0x13a>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	e001      	b.n	80019ca <HAL_GPIO_Init+0x13e>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	3304      	adds	r3, #4
 80019ca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	2bff      	cmp	r3, #255	; 0xff
 80019d0:	d802      	bhi.n	80019d8 <HAL_GPIO_Init+0x14c>
 80019d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	e002      	b.n	80019de <HAL_GPIO_Init+0x152>
 80019d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019da:	3b08      	subs	r3, #8
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	210f      	movs	r1, #15
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	fa01 f303 	lsl.w	r3, r1, r3
 80019ec:	43db      	mvns	r3, r3
 80019ee:	401a      	ands	r2, r3
 80019f0:	6a39      	ldr	r1, [r7, #32]
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	fa01 f303 	lsl.w	r3, r1, r3
 80019f8:	431a      	orrs	r2, r3
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	f000 80c1 	beq.w	8001b8e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a0c:	4b49      	ldr	r3, [pc, #292]	; (8001b34 <HAL_GPIO_Init+0x2a8>)
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	4a48      	ldr	r2, [pc, #288]	; (8001b34 <HAL_GPIO_Init+0x2a8>)
 8001a12:	f043 0301 	orr.w	r3, r3, #1
 8001a16:	6193      	str	r3, [r2, #24]
 8001a18:	4b46      	ldr	r3, [pc, #280]	; (8001b34 <HAL_GPIO_Init+0x2a8>)
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	f003 0301 	and.w	r3, r3, #1
 8001a20:	60bb      	str	r3, [r7, #8]
 8001a22:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a24:	4a44      	ldr	r2, [pc, #272]	; (8001b38 <HAL_GPIO_Init+0x2ac>)
 8001a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a28:	089b      	lsrs	r3, r3, #2
 8001a2a:	3302      	adds	r3, #2
 8001a2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a30:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a34:	f003 0303 	and.w	r3, r3, #3
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	220f      	movs	r2, #15
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	43db      	mvns	r3, r3
 8001a42:	68fa      	ldr	r2, [r7, #12]
 8001a44:	4013      	ands	r3, r2
 8001a46:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4a3c      	ldr	r2, [pc, #240]	; (8001b3c <HAL_GPIO_Init+0x2b0>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d01f      	beq.n	8001a90 <HAL_GPIO_Init+0x204>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	4a3b      	ldr	r2, [pc, #236]	; (8001b40 <HAL_GPIO_Init+0x2b4>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d019      	beq.n	8001a8c <HAL_GPIO_Init+0x200>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4a3a      	ldr	r2, [pc, #232]	; (8001b44 <HAL_GPIO_Init+0x2b8>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d013      	beq.n	8001a88 <HAL_GPIO_Init+0x1fc>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	4a39      	ldr	r2, [pc, #228]	; (8001b48 <HAL_GPIO_Init+0x2bc>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d00d      	beq.n	8001a84 <HAL_GPIO_Init+0x1f8>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4a38      	ldr	r2, [pc, #224]	; (8001b4c <HAL_GPIO_Init+0x2c0>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d007      	beq.n	8001a80 <HAL_GPIO_Init+0x1f4>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4a37      	ldr	r2, [pc, #220]	; (8001b50 <HAL_GPIO_Init+0x2c4>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d101      	bne.n	8001a7c <HAL_GPIO_Init+0x1f0>
 8001a78:	2305      	movs	r3, #5
 8001a7a:	e00a      	b.n	8001a92 <HAL_GPIO_Init+0x206>
 8001a7c:	2306      	movs	r3, #6
 8001a7e:	e008      	b.n	8001a92 <HAL_GPIO_Init+0x206>
 8001a80:	2304      	movs	r3, #4
 8001a82:	e006      	b.n	8001a92 <HAL_GPIO_Init+0x206>
 8001a84:	2303      	movs	r3, #3
 8001a86:	e004      	b.n	8001a92 <HAL_GPIO_Init+0x206>
 8001a88:	2302      	movs	r3, #2
 8001a8a:	e002      	b.n	8001a92 <HAL_GPIO_Init+0x206>
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e000      	b.n	8001a92 <HAL_GPIO_Init+0x206>
 8001a90:	2300      	movs	r3, #0
 8001a92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a94:	f002 0203 	and.w	r2, r2, #3
 8001a98:	0092      	lsls	r2, r2, #2
 8001a9a:	4093      	lsls	r3, r2
 8001a9c:	68fa      	ldr	r2, [r7, #12]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001aa2:	4925      	ldr	r1, [pc, #148]	; (8001b38 <HAL_GPIO_Init+0x2ac>)
 8001aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa6:	089b      	lsrs	r3, r3, #2
 8001aa8:	3302      	adds	r3, #2
 8001aaa:	68fa      	ldr	r2, [r7, #12]
 8001aac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d006      	beq.n	8001aca <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001abc:	4b25      	ldr	r3, [pc, #148]	; (8001b54 <HAL_GPIO_Init+0x2c8>)
 8001abe:	689a      	ldr	r2, [r3, #8]
 8001ac0:	4924      	ldr	r1, [pc, #144]	; (8001b54 <HAL_GPIO_Init+0x2c8>)
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	608b      	str	r3, [r1, #8]
 8001ac8:	e006      	b.n	8001ad8 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001aca:	4b22      	ldr	r3, [pc, #136]	; (8001b54 <HAL_GPIO_Init+0x2c8>)
 8001acc:	689a      	ldr	r2, [r3, #8]
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	4920      	ldr	r1, [pc, #128]	; (8001b54 <HAL_GPIO_Init+0x2c8>)
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d006      	beq.n	8001af2 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ae4:	4b1b      	ldr	r3, [pc, #108]	; (8001b54 <HAL_GPIO_Init+0x2c8>)
 8001ae6:	68da      	ldr	r2, [r3, #12]
 8001ae8:	491a      	ldr	r1, [pc, #104]	; (8001b54 <HAL_GPIO_Init+0x2c8>)
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	60cb      	str	r3, [r1, #12]
 8001af0:	e006      	b.n	8001b00 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001af2:	4b18      	ldr	r3, [pc, #96]	; (8001b54 <HAL_GPIO_Init+0x2c8>)
 8001af4:	68da      	ldr	r2, [r3, #12]
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	43db      	mvns	r3, r3
 8001afa:	4916      	ldr	r1, [pc, #88]	; (8001b54 <HAL_GPIO_Init+0x2c8>)
 8001afc:	4013      	ands	r3, r2
 8001afe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d025      	beq.n	8001b58 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b0c:	4b11      	ldr	r3, [pc, #68]	; (8001b54 <HAL_GPIO_Init+0x2c8>)
 8001b0e:	685a      	ldr	r2, [r3, #4]
 8001b10:	4910      	ldr	r1, [pc, #64]	; (8001b54 <HAL_GPIO_Init+0x2c8>)
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	604b      	str	r3, [r1, #4]
 8001b18:	e025      	b.n	8001b66 <HAL_GPIO_Init+0x2da>
 8001b1a:	bf00      	nop
 8001b1c:	10320000 	.word	0x10320000
 8001b20:	10310000 	.word	0x10310000
 8001b24:	10220000 	.word	0x10220000
 8001b28:	10210000 	.word	0x10210000
 8001b2c:	10120000 	.word	0x10120000
 8001b30:	10110000 	.word	0x10110000
 8001b34:	40021000 	.word	0x40021000
 8001b38:	40010000 	.word	0x40010000
 8001b3c:	40010800 	.word	0x40010800
 8001b40:	40010c00 	.word	0x40010c00
 8001b44:	40011000 	.word	0x40011000
 8001b48:	40011400 	.word	0x40011400
 8001b4c:	40011800 	.word	0x40011800
 8001b50:	40011c00 	.word	0x40011c00
 8001b54:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b58:	4b15      	ldr	r3, [pc, #84]	; (8001bb0 <HAL_GPIO_Init+0x324>)
 8001b5a:	685a      	ldr	r2, [r3, #4]
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	43db      	mvns	r3, r3
 8001b60:	4913      	ldr	r1, [pc, #76]	; (8001bb0 <HAL_GPIO_Init+0x324>)
 8001b62:	4013      	ands	r3, r2
 8001b64:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d006      	beq.n	8001b80 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b72:	4b0f      	ldr	r3, [pc, #60]	; (8001bb0 <HAL_GPIO_Init+0x324>)
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	490e      	ldr	r1, [pc, #56]	; (8001bb0 <HAL_GPIO_Init+0x324>)
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	600b      	str	r3, [r1, #0]
 8001b7e:	e006      	b.n	8001b8e <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b80:	4b0b      	ldr	r3, [pc, #44]	; (8001bb0 <HAL_GPIO_Init+0x324>)
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	43db      	mvns	r3, r3
 8001b88:	4909      	ldr	r1, [pc, #36]	; (8001bb0 <HAL_GPIO_Init+0x324>)
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b90:	3301      	adds	r3, #1
 8001b92:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f47f ae7e 	bne.w	80018a0 <HAL_GPIO_Init+0x14>
  }
}
 8001ba4:	bf00      	nop
 8001ba6:	bf00      	nop
 8001ba8:	372c      	adds	r7, #44	; 0x2c
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bc80      	pop	{r7}
 8001bae:	4770      	bx	lr
 8001bb0:	40010400 	.word	0x40010400

08001bb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	807b      	strh	r3, [r7, #2]
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bc4:	787b      	ldrb	r3, [r7, #1]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d003      	beq.n	8001bd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bca:	887a      	ldrh	r2, [r7, #2]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001bd0:	e003      	b.n	8001bda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001bd2:	887b      	ldrh	r3, [r7, #2]
 8001bd4:	041a      	lsls	r2, r3, #16
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	611a      	str	r2, [r3, #16]
}
 8001bda:	bf00      	nop
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bc80      	pop	{r7}
 8001be2:	4770      	bx	lr

08001be4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d101      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e272      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	f000 8087 	beq.w	8001d12 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c04:	4b92      	ldr	r3, [pc, #584]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f003 030c 	and.w	r3, r3, #12
 8001c0c:	2b04      	cmp	r3, #4
 8001c0e:	d00c      	beq.n	8001c2a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c10:	4b8f      	ldr	r3, [pc, #572]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f003 030c 	and.w	r3, r3, #12
 8001c18:	2b08      	cmp	r3, #8
 8001c1a:	d112      	bne.n	8001c42 <HAL_RCC_OscConfig+0x5e>
 8001c1c:	4b8c      	ldr	r3, [pc, #560]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c28:	d10b      	bne.n	8001c42 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c2a:	4b89      	ldr	r3, [pc, #548]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d06c      	beq.n	8001d10 <HAL_RCC_OscConfig+0x12c>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d168      	bne.n	8001d10 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e24c      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c4a:	d106      	bne.n	8001c5a <HAL_RCC_OscConfig+0x76>
 8001c4c:	4b80      	ldr	r3, [pc, #512]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a7f      	ldr	r2, [pc, #508]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c56:	6013      	str	r3, [r2, #0]
 8001c58:	e02e      	b.n	8001cb8 <HAL_RCC_OscConfig+0xd4>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d10c      	bne.n	8001c7c <HAL_RCC_OscConfig+0x98>
 8001c62:	4b7b      	ldr	r3, [pc, #492]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a7a      	ldr	r2, [pc, #488]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c6c:	6013      	str	r3, [r2, #0]
 8001c6e:	4b78      	ldr	r3, [pc, #480]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a77      	ldr	r2, [pc, #476]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c78:	6013      	str	r3, [r2, #0]
 8001c7a:	e01d      	b.n	8001cb8 <HAL_RCC_OscConfig+0xd4>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c84:	d10c      	bne.n	8001ca0 <HAL_RCC_OscConfig+0xbc>
 8001c86:	4b72      	ldr	r3, [pc, #456]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a71      	ldr	r2, [pc, #452]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c90:	6013      	str	r3, [r2, #0]
 8001c92:	4b6f      	ldr	r3, [pc, #444]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a6e      	ldr	r2, [pc, #440]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c9c:	6013      	str	r3, [r2, #0]
 8001c9e:	e00b      	b.n	8001cb8 <HAL_RCC_OscConfig+0xd4>
 8001ca0:	4b6b      	ldr	r3, [pc, #428]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a6a      	ldr	r2, [pc, #424]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001ca6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001caa:	6013      	str	r3, [r2, #0]
 8001cac:	4b68      	ldr	r3, [pc, #416]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a67      	ldr	r2, [pc, #412]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001cb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cb6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d013      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc0:	f7ff f8b2 	bl	8000e28 <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cc8:	f7ff f8ae 	bl	8000e28 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b64      	cmp	r3, #100	; 0x64
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e200      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cda:	4b5d      	ldr	r3, [pc, #372]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d0f0      	beq.n	8001cc8 <HAL_RCC_OscConfig+0xe4>
 8001ce6:	e014      	b.n	8001d12 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce8:	f7ff f89e 	bl	8000e28 <HAL_GetTick>
 8001cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cee:	e008      	b.n	8001d02 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cf0:	f7ff f89a 	bl	8000e28 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b64      	cmp	r3, #100	; 0x64
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e1ec      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d02:	4b53      	ldr	r3, [pc, #332]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1f0      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x10c>
 8001d0e:	e000      	b.n	8001d12 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d063      	beq.n	8001de6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d1e:	4b4c      	ldr	r3, [pc, #304]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f003 030c 	and.w	r3, r3, #12
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d00b      	beq.n	8001d42 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d2a:	4b49      	ldr	r3, [pc, #292]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f003 030c 	and.w	r3, r3, #12
 8001d32:	2b08      	cmp	r3, #8
 8001d34:	d11c      	bne.n	8001d70 <HAL_RCC_OscConfig+0x18c>
 8001d36:	4b46      	ldr	r3, [pc, #280]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d116      	bne.n	8001d70 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d42:	4b43      	ldr	r3, [pc, #268]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d005      	beq.n	8001d5a <HAL_RCC_OscConfig+0x176>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	691b      	ldr	r3, [r3, #16]
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d001      	beq.n	8001d5a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e1c0      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d5a:	4b3d      	ldr	r3, [pc, #244]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	695b      	ldr	r3, [r3, #20]
 8001d66:	00db      	lsls	r3, r3, #3
 8001d68:	4939      	ldr	r1, [pc, #228]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d6e:	e03a      	b.n	8001de6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	691b      	ldr	r3, [r3, #16]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d020      	beq.n	8001dba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d78:	4b36      	ldr	r3, [pc, #216]	; (8001e54 <HAL_RCC_OscConfig+0x270>)
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7e:	f7ff f853 	bl	8000e28 <HAL_GetTick>
 8001d82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d84:	e008      	b.n	8001d98 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d86:	f7ff f84f 	bl	8000e28 <HAL_GetTick>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d901      	bls.n	8001d98 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d94:	2303      	movs	r3, #3
 8001d96:	e1a1      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d98:	4b2d      	ldr	r3, [pc, #180]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0302 	and.w	r3, r3, #2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d0f0      	beq.n	8001d86 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001da4:	4b2a      	ldr	r3, [pc, #168]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	695b      	ldr	r3, [r3, #20]
 8001db0:	00db      	lsls	r3, r3, #3
 8001db2:	4927      	ldr	r1, [pc, #156]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001db4:	4313      	orrs	r3, r2
 8001db6:	600b      	str	r3, [r1, #0]
 8001db8:	e015      	b.n	8001de6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dba:	4b26      	ldr	r3, [pc, #152]	; (8001e54 <HAL_RCC_OscConfig+0x270>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc0:	f7ff f832 	bl	8000e28 <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dc8:	f7ff f82e 	bl	8000e28 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e180      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dda:	4b1d      	ldr	r3, [pc, #116]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1f0      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0308 	and.w	r3, r3, #8
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d03a      	beq.n	8001e68 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	699b      	ldr	r3, [r3, #24]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d019      	beq.n	8001e2e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dfa:	4b17      	ldr	r3, [pc, #92]	; (8001e58 <HAL_RCC_OscConfig+0x274>)
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e00:	f7ff f812 	bl	8000e28 <HAL_GetTick>
 8001e04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e06:	e008      	b.n	8001e1a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e08:	f7ff f80e 	bl	8000e28 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e160      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e1a:	4b0d      	ldr	r3, [pc, #52]	; (8001e50 <HAL_RCC_OscConfig+0x26c>)
 8001e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d0f0      	beq.n	8001e08 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e26:	2001      	movs	r0, #1
 8001e28:	f000 face 	bl	80023c8 <RCC_Delay>
 8001e2c:	e01c      	b.n	8001e68 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e2e:	4b0a      	ldr	r3, [pc, #40]	; (8001e58 <HAL_RCC_OscConfig+0x274>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e34:	f7fe fff8 	bl	8000e28 <HAL_GetTick>
 8001e38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e3a:	e00f      	b.n	8001e5c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e3c:	f7fe fff4 	bl	8000e28 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d908      	bls.n	8001e5c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e146      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>
 8001e4e:	bf00      	nop
 8001e50:	40021000 	.word	0x40021000
 8001e54:	42420000 	.word	0x42420000
 8001e58:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e5c:	4b92      	ldr	r3, [pc, #584]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e60:	f003 0302 	and.w	r3, r3, #2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d1e9      	bne.n	8001e3c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0304 	and.w	r3, r3, #4
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f000 80a6 	beq.w	8001fc2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e76:	2300      	movs	r3, #0
 8001e78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e7a:	4b8b      	ldr	r3, [pc, #556]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001e7c:	69db      	ldr	r3, [r3, #28]
 8001e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d10d      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e86:	4b88      	ldr	r3, [pc, #544]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001e88:	69db      	ldr	r3, [r3, #28]
 8001e8a:	4a87      	ldr	r2, [pc, #540]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001e8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e90:	61d3      	str	r3, [r2, #28]
 8001e92:	4b85      	ldr	r3, [pc, #532]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001e94:	69db      	ldr	r3, [r3, #28]
 8001e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e9a:	60bb      	str	r3, [r7, #8]
 8001e9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea2:	4b82      	ldr	r3, [pc, #520]	; (80020ac <HAL_RCC_OscConfig+0x4c8>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d118      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eae:	4b7f      	ldr	r3, [pc, #508]	; (80020ac <HAL_RCC_OscConfig+0x4c8>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a7e      	ldr	r2, [pc, #504]	; (80020ac <HAL_RCC_OscConfig+0x4c8>)
 8001eb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eba:	f7fe ffb5 	bl	8000e28 <HAL_GetTick>
 8001ebe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec0:	e008      	b.n	8001ed4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ec2:	f7fe ffb1 	bl	8000e28 <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	2b64      	cmp	r3, #100	; 0x64
 8001ece:	d901      	bls.n	8001ed4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e103      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed4:	4b75      	ldr	r3, [pc, #468]	; (80020ac <HAL_RCC_OscConfig+0x4c8>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d0f0      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d106      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x312>
 8001ee8:	4b6f      	ldr	r3, [pc, #444]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001eea:	6a1b      	ldr	r3, [r3, #32]
 8001eec:	4a6e      	ldr	r2, [pc, #440]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001eee:	f043 0301 	orr.w	r3, r3, #1
 8001ef2:	6213      	str	r3, [r2, #32]
 8001ef4:	e02d      	b.n	8001f52 <HAL_RCC_OscConfig+0x36e>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d10c      	bne.n	8001f18 <HAL_RCC_OscConfig+0x334>
 8001efe:	4b6a      	ldr	r3, [pc, #424]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001f00:	6a1b      	ldr	r3, [r3, #32]
 8001f02:	4a69      	ldr	r2, [pc, #420]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001f04:	f023 0301 	bic.w	r3, r3, #1
 8001f08:	6213      	str	r3, [r2, #32]
 8001f0a:	4b67      	ldr	r3, [pc, #412]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001f0c:	6a1b      	ldr	r3, [r3, #32]
 8001f0e:	4a66      	ldr	r2, [pc, #408]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001f10:	f023 0304 	bic.w	r3, r3, #4
 8001f14:	6213      	str	r3, [r2, #32]
 8001f16:	e01c      	b.n	8001f52 <HAL_RCC_OscConfig+0x36e>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	2b05      	cmp	r3, #5
 8001f1e:	d10c      	bne.n	8001f3a <HAL_RCC_OscConfig+0x356>
 8001f20:	4b61      	ldr	r3, [pc, #388]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001f22:	6a1b      	ldr	r3, [r3, #32]
 8001f24:	4a60      	ldr	r2, [pc, #384]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001f26:	f043 0304 	orr.w	r3, r3, #4
 8001f2a:	6213      	str	r3, [r2, #32]
 8001f2c:	4b5e      	ldr	r3, [pc, #376]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001f2e:	6a1b      	ldr	r3, [r3, #32]
 8001f30:	4a5d      	ldr	r2, [pc, #372]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001f32:	f043 0301 	orr.w	r3, r3, #1
 8001f36:	6213      	str	r3, [r2, #32]
 8001f38:	e00b      	b.n	8001f52 <HAL_RCC_OscConfig+0x36e>
 8001f3a:	4b5b      	ldr	r3, [pc, #364]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001f3c:	6a1b      	ldr	r3, [r3, #32]
 8001f3e:	4a5a      	ldr	r2, [pc, #360]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001f40:	f023 0301 	bic.w	r3, r3, #1
 8001f44:	6213      	str	r3, [r2, #32]
 8001f46:	4b58      	ldr	r3, [pc, #352]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001f48:	6a1b      	ldr	r3, [r3, #32]
 8001f4a:	4a57      	ldr	r2, [pc, #348]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001f4c:	f023 0304 	bic.w	r3, r3, #4
 8001f50:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d015      	beq.n	8001f86 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f5a:	f7fe ff65 	bl	8000e28 <HAL_GetTick>
 8001f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f60:	e00a      	b.n	8001f78 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f62:	f7fe ff61 	bl	8000e28 <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d901      	bls.n	8001f78 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e0b1      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f78:	4b4b      	ldr	r3, [pc, #300]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001f7a:	6a1b      	ldr	r3, [r3, #32]
 8001f7c:	f003 0302 	and.w	r3, r3, #2
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d0ee      	beq.n	8001f62 <HAL_RCC_OscConfig+0x37e>
 8001f84:	e014      	b.n	8001fb0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f86:	f7fe ff4f 	bl	8000e28 <HAL_GetTick>
 8001f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f8c:	e00a      	b.n	8001fa4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f8e:	f7fe ff4b 	bl	8000e28 <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d901      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e09b      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fa4:	4b40      	ldr	r3, [pc, #256]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001fa6:	6a1b      	ldr	r3, [r3, #32]
 8001fa8:	f003 0302 	and.w	r3, r3, #2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d1ee      	bne.n	8001f8e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fb0:	7dfb      	ldrb	r3, [r7, #23]
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d105      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fb6:	4b3c      	ldr	r3, [pc, #240]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001fb8:	69db      	ldr	r3, [r3, #28]
 8001fba:	4a3b      	ldr	r2, [pc, #236]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001fbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fc0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	69db      	ldr	r3, [r3, #28]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	f000 8087 	beq.w	80020da <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fcc:	4b36      	ldr	r3, [pc, #216]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f003 030c 	and.w	r3, r3, #12
 8001fd4:	2b08      	cmp	r3, #8
 8001fd6:	d061      	beq.n	800209c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	69db      	ldr	r3, [r3, #28]
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d146      	bne.n	800206e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fe0:	4b33      	ldr	r3, [pc, #204]	; (80020b0 <HAL_RCC_OscConfig+0x4cc>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe6:	f7fe ff1f 	bl	8000e28 <HAL_GetTick>
 8001fea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fec:	e008      	b.n	8002000 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fee:	f7fe ff1b 	bl	8000e28 <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d901      	bls.n	8002000 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e06d      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002000:	4b29      	ldr	r3, [pc, #164]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d1f0      	bne.n	8001fee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a1b      	ldr	r3, [r3, #32]
 8002010:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002014:	d108      	bne.n	8002028 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002016:	4b24      	ldr	r3, [pc, #144]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	4921      	ldr	r1, [pc, #132]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8002024:	4313      	orrs	r3, r2
 8002026:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002028:	4b1f      	ldr	r3, [pc, #124]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a19      	ldr	r1, [r3, #32]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002038:	430b      	orrs	r3, r1
 800203a:	491b      	ldr	r1, [pc, #108]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 800203c:	4313      	orrs	r3, r2
 800203e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002040:	4b1b      	ldr	r3, [pc, #108]	; (80020b0 <HAL_RCC_OscConfig+0x4cc>)
 8002042:	2201      	movs	r2, #1
 8002044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002046:	f7fe feef 	bl	8000e28 <HAL_GetTick>
 800204a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800204c:	e008      	b.n	8002060 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800204e:	f7fe feeb 	bl	8000e28 <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b02      	cmp	r3, #2
 800205a:	d901      	bls.n	8002060 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e03d      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002060:	4b11      	ldr	r3, [pc, #68]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d0f0      	beq.n	800204e <HAL_RCC_OscConfig+0x46a>
 800206c:	e035      	b.n	80020da <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800206e:	4b10      	ldr	r3, [pc, #64]	; (80020b0 <HAL_RCC_OscConfig+0x4cc>)
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002074:	f7fe fed8 	bl	8000e28 <HAL_GetTick>
 8002078:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800207a:	e008      	b.n	800208e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800207c:	f7fe fed4 	bl	8000e28 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	2b02      	cmp	r3, #2
 8002088:	d901      	bls.n	800208e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e026      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800208e:	4b06      	ldr	r3, [pc, #24]	; (80020a8 <HAL_RCC_OscConfig+0x4c4>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d1f0      	bne.n	800207c <HAL_RCC_OscConfig+0x498>
 800209a:	e01e      	b.n	80020da <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	69db      	ldr	r3, [r3, #28]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d107      	bne.n	80020b4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e019      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>
 80020a8:	40021000 	.word	0x40021000
 80020ac:	40007000 	.word	0x40007000
 80020b0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020b4:	4b0b      	ldr	r3, [pc, #44]	; (80020e4 <HAL_RCC_OscConfig+0x500>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a1b      	ldr	r3, [r3, #32]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d106      	bne.n	80020d6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d001      	beq.n	80020da <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e000      	b.n	80020dc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80020da:	2300      	movs	r3, #0
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3718      	adds	r7, #24
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	40021000 	.word	0x40021000

080020e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d101      	bne.n	80020fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e0d0      	b.n	800229e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020fc:	4b6a      	ldr	r3, [pc, #424]	; (80022a8 <HAL_RCC_ClockConfig+0x1c0>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0307 	and.w	r3, r3, #7
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	429a      	cmp	r2, r3
 8002108:	d910      	bls.n	800212c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800210a:	4b67      	ldr	r3, [pc, #412]	; (80022a8 <HAL_RCC_ClockConfig+0x1c0>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f023 0207 	bic.w	r2, r3, #7
 8002112:	4965      	ldr	r1, [pc, #404]	; (80022a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	4313      	orrs	r3, r2
 8002118:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800211a:	4b63      	ldr	r3, [pc, #396]	; (80022a8 <HAL_RCC_ClockConfig+0x1c0>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0307 	and.w	r3, r3, #7
 8002122:	683a      	ldr	r2, [r7, #0]
 8002124:	429a      	cmp	r2, r3
 8002126:	d001      	beq.n	800212c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e0b8      	b.n	800229e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0302 	and.w	r3, r3, #2
 8002134:	2b00      	cmp	r3, #0
 8002136:	d020      	beq.n	800217a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0304 	and.w	r3, r3, #4
 8002140:	2b00      	cmp	r3, #0
 8002142:	d005      	beq.n	8002150 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002144:	4b59      	ldr	r3, [pc, #356]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	4a58      	ldr	r2, [pc, #352]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 800214a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800214e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0308 	and.w	r3, r3, #8
 8002158:	2b00      	cmp	r3, #0
 800215a:	d005      	beq.n	8002168 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800215c:	4b53      	ldr	r3, [pc, #332]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	4a52      	ldr	r2, [pc, #328]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 8002162:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002166:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002168:	4b50      	ldr	r3, [pc, #320]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	494d      	ldr	r1, [pc, #308]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 8002176:	4313      	orrs	r3, r2
 8002178:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	2b00      	cmp	r3, #0
 8002184:	d040      	beq.n	8002208 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	2b01      	cmp	r3, #1
 800218c:	d107      	bne.n	800219e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800218e:	4b47      	ldr	r3, [pc, #284]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d115      	bne.n	80021c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e07f      	b.n	800229e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d107      	bne.n	80021b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021a6:	4b41      	ldr	r3, [pc, #260]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d109      	bne.n	80021c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e073      	b.n	800229e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021b6:	4b3d      	ldr	r3, [pc, #244]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d101      	bne.n	80021c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e06b      	b.n	800229e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021c6:	4b39      	ldr	r3, [pc, #228]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f023 0203 	bic.w	r2, r3, #3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	4936      	ldr	r1, [pc, #216]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021d8:	f7fe fe26 	bl	8000e28 <HAL_GetTick>
 80021dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021de:	e00a      	b.n	80021f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021e0:	f7fe fe22 	bl	8000e28 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e053      	b.n	800229e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021f6:	4b2d      	ldr	r3, [pc, #180]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f003 020c 	and.w	r2, r3, #12
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	429a      	cmp	r2, r3
 8002206:	d1eb      	bne.n	80021e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002208:	4b27      	ldr	r3, [pc, #156]	; (80022a8 <HAL_RCC_ClockConfig+0x1c0>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0307 	and.w	r3, r3, #7
 8002210:	683a      	ldr	r2, [r7, #0]
 8002212:	429a      	cmp	r2, r3
 8002214:	d210      	bcs.n	8002238 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002216:	4b24      	ldr	r3, [pc, #144]	; (80022a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f023 0207 	bic.w	r2, r3, #7
 800221e:	4922      	ldr	r1, [pc, #136]	; (80022a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	4313      	orrs	r3, r2
 8002224:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002226:	4b20      	ldr	r3, [pc, #128]	; (80022a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0307 	and.w	r3, r3, #7
 800222e:	683a      	ldr	r2, [r7, #0]
 8002230:	429a      	cmp	r2, r3
 8002232:	d001      	beq.n	8002238 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e032      	b.n	800229e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0304 	and.w	r3, r3, #4
 8002240:	2b00      	cmp	r3, #0
 8002242:	d008      	beq.n	8002256 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002244:	4b19      	ldr	r3, [pc, #100]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	4916      	ldr	r1, [pc, #88]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 8002252:	4313      	orrs	r3, r2
 8002254:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0308 	and.w	r3, r3, #8
 800225e:	2b00      	cmp	r3, #0
 8002260:	d009      	beq.n	8002276 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002262:	4b12      	ldr	r3, [pc, #72]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	490e      	ldr	r1, [pc, #56]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 8002272:	4313      	orrs	r3, r2
 8002274:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002276:	f000 f821 	bl	80022bc <HAL_RCC_GetSysClockFreq>
 800227a:	4602      	mov	r2, r0
 800227c:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	091b      	lsrs	r3, r3, #4
 8002282:	f003 030f 	and.w	r3, r3, #15
 8002286:	490a      	ldr	r1, [pc, #40]	; (80022b0 <HAL_RCC_ClockConfig+0x1c8>)
 8002288:	5ccb      	ldrb	r3, [r1, r3]
 800228a:	fa22 f303 	lsr.w	r3, r2, r3
 800228e:	4a09      	ldr	r2, [pc, #36]	; (80022b4 <HAL_RCC_ClockConfig+0x1cc>)
 8002290:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002292:	4b09      	ldr	r3, [pc, #36]	; (80022b8 <HAL_RCC_ClockConfig+0x1d0>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4618      	mov	r0, r3
 8002298:	f7fe fd84 	bl	8000da4 <HAL_InitTick>

  return HAL_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3710      	adds	r7, #16
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	40022000 	.word	0x40022000
 80022ac:	40021000 	.word	0x40021000
 80022b0:	08004924 	.word	0x08004924
 80022b4:	20000000 	.word	0x20000000
 80022b8:	20000004 	.word	0x20000004

080022bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	b087      	sub	sp, #28
 80022c0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022c2:	2300      	movs	r3, #0
 80022c4:	60fb      	str	r3, [r7, #12]
 80022c6:	2300      	movs	r3, #0
 80022c8:	60bb      	str	r3, [r7, #8]
 80022ca:	2300      	movs	r3, #0
 80022cc:	617b      	str	r3, [r7, #20]
 80022ce:	2300      	movs	r3, #0
 80022d0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80022d2:	2300      	movs	r3, #0
 80022d4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022d6:	4b1e      	ldr	r3, [pc, #120]	; (8002350 <HAL_RCC_GetSysClockFreq+0x94>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f003 030c 	and.w	r3, r3, #12
 80022e2:	2b04      	cmp	r3, #4
 80022e4:	d002      	beq.n	80022ec <HAL_RCC_GetSysClockFreq+0x30>
 80022e6:	2b08      	cmp	r3, #8
 80022e8:	d003      	beq.n	80022f2 <HAL_RCC_GetSysClockFreq+0x36>
 80022ea:	e027      	b.n	800233c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022ec:	4b19      	ldr	r3, [pc, #100]	; (8002354 <HAL_RCC_GetSysClockFreq+0x98>)
 80022ee:	613b      	str	r3, [r7, #16]
      break;
 80022f0:	e027      	b.n	8002342 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	0c9b      	lsrs	r3, r3, #18
 80022f6:	f003 030f 	and.w	r3, r3, #15
 80022fa:	4a17      	ldr	r2, [pc, #92]	; (8002358 <HAL_RCC_GetSysClockFreq+0x9c>)
 80022fc:	5cd3      	ldrb	r3, [r2, r3]
 80022fe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d010      	beq.n	800232c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800230a:	4b11      	ldr	r3, [pc, #68]	; (8002350 <HAL_RCC_GetSysClockFreq+0x94>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	0c5b      	lsrs	r3, r3, #17
 8002310:	f003 0301 	and.w	r3, r3, #1
 8002314:	4a11      	ldr	r2, [pc, #68]	; (800235c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002316:	5cd3      	ldrb	r3, [r2, r3]
 8002318:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a0d      	ldr	r2, [pc, #52]	; (8002354 <HAL_RCC_GetSysClockFreq+0x98>)
 800231e:	fb03 f202 	mul.w	r2, r3, r2
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	fbb2 f3f3 	udiv	r3, r2, r3
 8002328:	617b      	str	r3, [r7, #20]
 800232a:	e004      	b.n	8002336 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4a0c      	ldr	r2, [pc, #48]	; (8002360 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002330:	fb02 f303 	mul.w	r3, r2, r3
 8002334:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	613b      	str	r3, [r7, #16]
      break;
 800233a:	e002      	b.n	8002342 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800233c:	4b05      	ldr	r3, [pc, #20]	; (8002354 <HAL_RCC_GetSysClockFreq+0x98>)
 800233e:	613b      	str	r3, [r7, #16]
      break;
 8002340:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002342:	693b      	ldr	r3, [r7, #16]
}
 8002344:	4618      	mov	r0, r3
 8002346:	371c      	adds	r7, #28
 8002348:	46bd      	mov	sp, r7
 800234a:	bc80      	pop	{r7}
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	40021000 	.word	0x40021000
 8002354:	007a1200 	.word	0x007a1200
 8002358:	0800493c 	.word	0x0800493c
 800235c:	0800494c 	.word	0x0800494c
 8002360:	003d0900 	.word	0x003d0900

08002364 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002368:	4b02      	ldr	r3, [pc, #8]	; (8002374 <HAL_RCC_GetHCLKFreq+0x10>)
 800236a:	681b      	ldr	r3, [r3, #0]
}
 800236c:	4618      	mov	r0, r3
 800236e:	46bd      	mov	sp, r7
 8002370:	bc80      	pop	{r7}
 8002372:	4770      	bx	lr
 8002374:	20000000 	.word	0x20000000

08002378 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800237c:	f7ff fff2 	bl	8002364 <HAL_RCC_GetHCLKFreq>
 8002380:	4602      	mov	r2, r0
 8002382:	4b05      	ldr	r3, [pc, #20]	; (8002398 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	0a1b      	lsrs	r3, r3, #8
 8002388:	f003 0307 	and.w	r3, r3, #7
 800238c:	4903      	ldr	r1, [pc, #12]	; (800239c <HAL_RCC_GetPCLK1Freq+0x24>)
 800238e:	5ccb      	ldrb	r3, [r1, r3]
 8002390:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002394:	4618      	mov	r0, r3
 8002396:	bd80      	pop	{r7, pc}
 8002398:	40021000 	.word	0x40021000
 800239c:	08004934 	.word	0x08004934

080023a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023a4:	f7ff ffde 	bl	8002364 <HAL_RCC_GetHCLKFreq>
 80023a8:	4602      	mov	r2, r0
 80023aa:	4b05      	ldr	r3, [pc, #20]	; (80023c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	0adb      	lsrs	r3, r3, #11
 80023b0:	f003 0307 	and.w	r3, r3, #7
 80023b4:	4903      	ldr	r1, [pc, #12]	; (80023c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023b6:	5ccb      	ldrb	r3, [r1, r3]
 80023b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023bc:	4618      	mov	r0, r3
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	40021000 	.word	0x40021000
 80023c4:	08004934 	.word	0x08004934

080023c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b085      	sub	sp, #20
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023d0:	4b0a      	ldr	r3, [pc, #40]	; (80023fc <RCC_Delay+0x34>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a0a      	ldr	r2, [pc, #40]	; (8002400 <RCC_Delay+0x38>)
 80023d6:	fba2 2303 	umull	r2, r3, r2, r3
 80023da:	0a5b      	lsrs	r3, r3, #9
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	fb02 f303 	mul.w	r3, r2, r3
 80023e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80023e4:	bf00      	nop
  }
  while (Delay --);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	1e5a      	subs	r2, r3, #1
 80023ea:	60fa      	str	r2, [r7, #12]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d1f9      	bne.n	80023e4 <RCC_Delay+0x1c>
}
 80023f0:	bf00      	nop
 80023f2:	bf00      	nop
 80023f4:	3714      	adds	r7, #20
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bc80      	pop	{r7}
 80023fa:	4770      	bx	lr
 80023fc:	20000000 	.word	0x20000000
 8002400:	10624dd3 	.word	0x10624dd3

08002404 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d101      	bne.n	8002416 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e041      	b.n	800249a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800241c:	b2db      	uxtb	r3, r3
 800241e:	2b00      	cmp	r3, #0
 8002420:	d106      	bne.n	8002430 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f7fe fb32 	bl	8000a94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2202      	movs	r2, #2
 8002434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	3304      	adds	r3, #4
 8002440:	4619      	mov	r1, r3
 8002442:	4610      	mov	r0, r2
 8002444:	f000 fcb4 	bl	8002db0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
	...

080024a4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b085      	sub	sp, #20
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d001      	beq.n	80024bc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e03c      	b.n	8002536 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2202      	movs	r2, #2
 80024c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a1d      	ldr	r2, [pc, #116]	; (8002540 <HAL_TIM_Base_Start+0x9c>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d018      	beq.n	8002500 <HAL_TIM_Base_Start+0x5c>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a1c      	ldr	r2, [pc, #112]	; (8002544 <HAL_TIM_Base_Start+0xa0>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d013      	beq.n	8002500 <HAL_TIM_Base_Start+0x5c>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024e0:	d00e      	beq.n	8002500 <HAL_TIM_Base_Start+0x5c>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a18      	ldr	r2, [pc, #96]	; (8002548 <HAL_TIM_Base_Start+0xa4>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d009      	beq.n	8002500 <HAL_TIM_Base_Start+0x5c>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a16      	ldr	r2, [pc, #88]	; (800254c <HAL_TIM_Base_Start+0xa8>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d004      	beq.n	8002500 <HAL_TIM_Base_Start+0x5c>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a15      	ldr	r2, [pc, #84]	; (8002550 <HAL_TIM_Base_Start+0xac>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d111      	bne.n	8002524 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	f003 0307 	and.w	r3, r3, #7
 800250a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2b06      	cmp	r3, #6
 8002510:	d010      	beq.n	8002534 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f042 0201 	orr.w	r2, r2, #1
 8002520:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002522:	e007      	b.n	8002534 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f042 0201 	orr.w	r2, r2, #1
 8002532:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3714      	adds	r7, #20
 800253a:	46bd      	mov	sp, r7
 800253c:	bc80      	pop	{r7}
 800253e:	4770      	bx	lr
 8002540:	40012c00 	.word	0x40012c00
 8002544:	40013400 	.word	0x40013400
 8002548:	40000400 	.word	0x40000400
 800254c:	40000800 	.word	0x40000800
 8002550:	40000c00 	.word	0x40000c00

08002554 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d101      	bne.n	8002566 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e041      	b.n	80025ea <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b00      	cmp	r3, #0
 8002570:	d106      	bne.n	8002580 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f000 f839 	bl	80025f2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2202      	movs	r2, #2
 8002584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	3304      	adds	r3, #4
 8002590:	4619      	mov	r1, r3
 8002592:	4610      	mov	r0, r2
 8002594:	f000 fc0c 	bl	8002db0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2201      	movs	r2, #1
 80025a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80025f2:	b480      	push	{r7}
 80025f4:	b083      	sub	sp, #12
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80025fa:	bf00      	nop
 80025fc:	370c      	adds	r7, #12
 80025fe:	46bd      	mov	sp, r7
 8002600:	bc80      	pop	{r7}
 8002602:	4770      	bx	lr

08002604 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800260e:	2300      	movs	r3, #0
 8002610:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d104      	bne.n	8002622 <HAL_TIM_IC_Start_IT+0x1e>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800261e:	b2db      	uxtb	r3, r3
 8002620:	e013      	b.n	800264a <HAL_TIM_IC_Start_IT+0x46>
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	2b04      	cmp	r3, #4
 8002626:	d104      	bne.n	8002632 <HAL_TIM_IC_Start_IT+0x2e>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800262e:	b2db      	uxtb	r3, r3
 8002630:	e00b      	b.n	800264a <HAL_TIM_IC_Start_IT+0x46>
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	2b08      	cmp	r3, #8
 8002636:	d104      	bne.n	8002642 <HAL_TIM_IC_Start_IT+0x3e>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800263e:	b2db      	uxtb	r3, r3
 8002640:	e003      	b.n	800264a <HAL_TIM_IC_Start_IT+0x46>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002648:	b2db      	uxtb	r3, r3
 800264a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d104      	bne.n	800265c <HAL_TIM_IC_Start_IT+0x58>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002658:	b2db      	uxtb	r3, r3
 800265a:	e013      	b.n	8002684 <HAL_TIM_IC_Start_IT+0x80>
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	2b04      	cmp	r3, #4
 8002660:	d104      	bne.n	800266c <HAL_TIM_IC_Start_IT+0x68>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002668:	b2db      	uxtb	r3, r3
 800266a:	e00b      	b.n	8002684 <HAL_TIM_IC_Start_IT+0x80>
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	2b08      	cmp	r3, #8
 8002670:	d104      	bne.n	800267c <HAL_TIM_IC_Start_IT+0x78>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002678:	b2db      	uxtb	r3, r3
 800267a:	e003      	b.n	8002684 <HAL_TIM_IC_Start_IT+0x80>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002682:	b2db      	uxtb	r3, r3
 8002684:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002686:	7bbb      	ldrb	r3, [r7, #14]
 8002688:	2b01      	cmp	r3, #1
 800268a:	d102      	bne.n	8002692 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800268c:	7b7b      	ldrb	r3, [r7, #13]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d001      	beq.n	8002696 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e0c2      	b.n	800281c <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d104      	bne.n	80026a6 <HAL_TIM_IC_Start_IT+0xa2>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2202      	movs	r2, #2
 80026a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026a4:	e013      	b.n	80026ce <HAL_TIM_IC_Start_IT+0xca>
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	2b04      	cmp	r3, #4
 80026aa:	d104      	bne.n	80026b6 <HAL_TIM_IC_Start_IT+0xb2>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2202      	movs	r2, #2
 80026b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026b4:	e00b      	b.n	80026ce <HAL_TIM_IC_Start_IT+0xca>
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	2b08      	cmp	r3, #8
 80026ba:	d104      	bne.n	80026c6 <HAL_TIM_IC_Start_IT+0xc2>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2202      	movs	r2, #2
 80026c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026c4:	e003      	b.n	80026ce <HAL_TIM_IC_Start_IT+0xca>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2202      	movs	r2, #2
 80026ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d104      	bne.n	80026de <HAL_TIM_IC_Start_IT+0xda>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2202      	movs	r2, #2
 80026d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026dc:	e013      	b.n	8002706 <HAL_TIM_IC_Start_IT+0x102>
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	2b04      	cmp	r3, #4
 80026e2:	d104      	bne.n	80026ee <HAL_TIM_IC_Start_IT+0xea>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2202      	movs	r2, #2
 80026e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80026ec:	e00b      	b.n	8002706 <HAL_TIM_IC_Start_IT+0x102>
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	2b08      	cmp	r3, #8
 80026f2:	d104      	bne.n	80026fe <HAL_TIM_IC_Start_IT+0xfa>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2202      	movs	r2, #2
 80026f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026fc:	e003      	b.n	8002706 <HAL_TIM_IC_Start_IT+0x102>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2202      	movs	r2, #2
 8002702:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	2b0c      	cmp	r3, #12
 800270a:	d841      	bhi.n	8002790 <HAL_TIM_IC_Start_IT+0x18c>
 800270c:	a201      	add	r2, pc, #4	; (adr r2, 8002714 <HAL_TIM_IC_Start_IT+0x110>)
 800270e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002712:	bf00      	nop
 8002714:	08002749 	.word	0x08002749
 8002718:	08002791 	.word	0x08002791
 800271c:	08002791 	.word	0x08002791
 8002720:	08002791 	.word	0x08002791
 8002724:	0800275b 	.word	0x0800275b
 8002728:	08002791 	.word	0x08002791
 800272c:	08002791 	.word	0x08002791
 8002730:	08002791 	.word	0x08002791
 8002734:	0800276d 	.word	0x0800276d
 8002738:	08002791 	.word	0x08002791
 800273c:	08002791 	.word	0x08002791
 8002740:	08002791 	.word	0x08002791
 8002744:	0800277f 	.word	0x0800277f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	68da      	ldr	r2, [r3, #12]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f042 0202 	orr.w	r2, r2, #2
 8002756:	60da      	str	r2, [r3, #12]
      break;
 8002758:	e01d      	b.n	8002796 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	68da      	ldr	r2, [r3, #12]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f042 0204 	orr.w	r2, r2, #4
 8002768:	60da      	str	r2, [r3, #12]
      break;
 800276a:	e014      	b.n	8002796 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	68da      	ldr	r2, [r3, #12]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f042 0208 	orr.w	r2, r2, #8
 800277a:	60da      	str	r2, [r3, #12]
      break;
 800277c:	e00b      	b.n	8002796 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	68da      	ldr	r2, [r3, #12]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f042 0210 	orr.w	r2, r2, #16
 800278c:	60da      	str	r2, [r3, #12]
      break;
 800278e:	e002      	b.n	8002796 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	73fb      	strb	r3, [r7, #15]
      break;
 8002794:	bf00      	nop
  }

  if (status == HAL_OK)
 8002796:	7bfb      	ldrb	r3, [r7, #15]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d13e      	bne.n	800281a <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2201      	movs	r2, #1
 80027a2:	6839      	ldr	r1, [r7, #0]
 80027a4:	4618      	mov	r0, r3
 80027a6:	f000 fd38 	bl	800321a <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a1d      	ldr	r2, [pc, #116]	; (8002824 <HAL_TIM_IC_Start_IT+0x220>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d018      	beq.n	80027e6 <HAL_TIM_IC_Start_IT+0x1e2>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a1b      	ldr	r2, [pc, #108]	; (8002828 <HAL_TIM_IC_Start_IT+0x224>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d013      	beq.n	80027e6 <HAL_TIM_IC_Start_IT+0x1e2>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027c6:	d00e      	beq.n	80027e6 <HAL_TIM_IC_Start_IT+0x1e2>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a17      	ldr	r2, [pc, #92]	; (800282c <HAL_TIM_IC_Start_IT+0x228>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d009      	beq.n	80027e6 <HAL_TIM_IC_Start_IT+0x1e2>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a16      	ldr	r2, [pc, #88]	; (8002830 <HAL_TIM_IC_Start_IT+0x22c>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d004      	beq.n	80027e6 <HAL_TIM_IC_Start_IT+0x1e2>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a14      	ldr	r2, [pc, #80]	; (8002834 <HAL_TIM_IC_Start_IT+0x230>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d111      	bne.n	800280a <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f003 0307 	and.w	r3, r3, #7
 80027f0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	2b06      	cmp	r3, #6
 80027f6:	d010      	beq.n	800281a <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f042 0201 	orr.w	r2, r2, #1
 8002806:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002808:	e007      	b.n	800281a <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f042 0201 	orr.w	r2, r2, #1
 8002818:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800281a:	7bfb      	ldrb	r3, [r7, #15]
}
 800281c:	4618      	mov	r0, r3
 800281e:	3710      	adds	r7, #16
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	40012c00 	.word	0x40012c00
 8002828:	40013400 	.word	0x40013400
 800282c:	40000400 	.word	0x40000400
 8002830:	40000800 	.word	0x40000800
 8002834:	40000c00 	.word	0x40000c00

08002838 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d020      	beq.n	800289c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f003 0302 	and.w	r3, r3, #2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d01b      	beq.n	800289c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f06f 0202 	mvn.w	r2, #2
 800286c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2201      	movs	r2, #1
 8002872:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	f003 0303 	and.w	r3, r3, #3
 800287e:	2b00      	cmp	r3, #0
 8002880:	d003      	beq.n	800288a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f7fd fe4a 	bl	800051c <HAL_TIM_IC_CaptureCallback>
 8002888:	e005      	b.n	8002896 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f000 fa75 	bl	8002d7a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f000 fa7b 	bl	8002d8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	f003 0304 	and.w	r3, r3, #4
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d020      	beq.n	80028e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f003 0304 	and.w	r3, r3, #4
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d01b      	beq.n	80028e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f06f 0204 	mvn.w	r2, #4
 80028b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2202      	movs	r2, #2
 80028be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d003      	beq.n	80028d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f7fd fe24 	bl	800051c <HAL_TIM_IC_CaptureCallback>
 80028d4:	e005      	b.n	80028e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f000 fa4f 	bl	8002d7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 fa55 	bl	8002d8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	f003 0308 	and.w	r3, r3, #8
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d020      	beq.n	8002934 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f003 0308 	and.w	r3, r3, #8
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d01b      	beq.n	8002934 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f06f 0208 	mvn.w	r2, #8
 8002904:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2204      	movs	r2, #4
 800290a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	69db      	ldr	r3, [r3, #28]
 8002912:	f003 0303 	and.w	r3, r3, #3
 8002916:	2b00      	cmp	r3, #0
 8002918:	d003      	beq.n	8002922 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f7fd fdfe 	bl	800051c <HAL_TIM_IC_CaptureCallback>
 8002920:	e005      	b.n	800292e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f000 fa29 	bl	8002d7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f000 fa2f 	bl	8002d8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	f003 0310 	and.w	r3, r3, #16
 800293a:	2b00      	cmp	r3, #0
 800293c:	d020      	beq.n	8002980 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f003 0310 	and.w	r3, r3, #16
 8002944:	2b00      	cmp	r3, #0
 8002946:	d01b      	beq.n	8002980 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f06f 0210 	mvn.w	r2, #16
 8002950:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2208      	movs	r2, #8
 8002956:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	69db      	ldr	r3, [r3, #28]
 800295e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002962:	2b00      	cmp	r3, #0
 8002964:	d003      	beq.n	800296e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f7fd fdd8 	bl	800051c <HAL_TIM_IC_CaptureCallback>
 800296c:	e005      	b.n	800297a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 fa03 	bl	8002d7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f000 fa09 	bl	8002d8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00c      	beq.n	80029a4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f003 0301 	and.w	r3, r3, #1
 8002990:	2b00      	cmp	r3, #0
 8002992:	d007      	beq.n	80029a4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f06f 0201 	mvn.w	r2, #1
 800299c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f000 f9e2 	bl	8002d68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00c      	beq.n	80029c8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d007      	beq.n	80029c8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80029c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 fcc3 	bl	800334e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d00c      	beq.n	80029ec <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d007      	beq.n	80029ec <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80029e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 f9d9 	bl	8002d9e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	f003 0320 	and.w	r3, r3, #32
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00c      	beq.n	8002a10 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f003 0320 	and.w	r3, r3, #32
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d007      	beq.n	8002a10 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f06f 0220 	mvn.w	r2, #32
 8002a08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f000 fc96 	bl	800333c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a10:	bf00      	nop
 8002a12:	3710      	adds	r7, #16
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b086      	sub	sp, #24
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a24:	2300      	movs	r3, #0
 8002a26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d101      	bne.n	8002a36 <HAL_TIM_IC_ConfigChannel+0x1e>
 8002a32:	2302      	movs	r3, #2
 8002a34:	e088      	b.n	8002b48 <HAL_TIM_IC_ConfigChannel+0x130>
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d11b      	bne.n	8002a7c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8002a54:	f000 fa32 	bl	8002ebc <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	699a      	ldr	r2, [r3, #24]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f022 020c 	bic.w	r2, r2, #12
 8002a66:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	6999      	ldr	r1, [r3, #24]
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	689a      	ldr	r2, [r3, #8]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	430a      	orrs	r2, r1
 8002a78:	619a      	str	r2, [r3, #24]
 8002a7a:	e060      	b.n	8002b3e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2b04      	cmp	r3, #4
 8002a80:	d11c      	bne.n	8002abc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8002a92:	f000 faa7 	bl	8002fe4 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	699a      	ldr	r2, [r3, #24]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002aa4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	6999      	ldr	r1, [r3, #24]
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	021a      	lsls	r2, r3, #8
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	619a      	str	r2, [r3, #24]
 8002aba:	e040      	b.n	8002b3e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2b08      	cmp	r3, #8
 8002ac0:	d11b      	bne.n	8002afa <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8002ad2:	f000 faf2 	bl	80030ba <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	69da      	ldr	r2, [r3, #28]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f022 020c 	bic.w	r2, r2, #12
 8002ae4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	69d9      	ldr	r1, [r3, #28]
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	689a      	ldr	r2, [r3, #8]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	430a      	orrs	r2, r1
 8002af6:	61da      	str	r2, [r3, #28]
 8002af8:	e021      	b.n	8002b3e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2b0c      	cmp	r3, #12
 8002afe:	d11c      	bne.n	8002b3a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8002b10:	f000 fb0e 	bl	8003130 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	69da      	ldr	r2, [r3, #28]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002b22:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	69d9      	ldr	r1, [r3, #28]
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	021a      	lsls	r2, r3, #8
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	430a      	orrs	r2, r1
 8002b36:	61da      	str	r2, [r3, #28]
 8002b38:	e001      	b.n	8002b3e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002b46:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3718      	adds	r7, #24
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d101      	bne.n	8002b6c <HAL_TIM_ConfigClockSource+0x1c>
 8002b68:	2302      	movs	r3, #2
 8002b6a:	e0b4      	b.n	8002cd6 <HAL_TIM_ConfigClockSource+0x186>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2202      	movs	r2, #2
 8002b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	68ba      	ldr	r2, [r7, #8]
 8002b9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ba4:	d03e      	beq.n	8002c24 <HAL_TIM_ConfigClockSource+0xd4>
 8002ba6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002baa:	f200 8087 	bhi.w	8002cbc <HAL_TIM_ConfigClockSource+0x16c>
 8002bae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bb2:	f000 8086 	beq.w	8002cc2 <HAL_TIM_ConfigClockSource+0x172>
 8002bb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bba:	d87f      	bhi.n	8002cbc <HAL_TIM_ConfigClockSource+0x16c>
 8002bbc:	2b70      	cmp	r3, #112	; 0x70
 8002bbe:	d01a      	beq.n	8002bf6 <HAL_TIM_ConfigClockSource+0xa6>
 8002bc0:	2b70      	cmp	r3, #112	; 0x70
 8002bc2:	d87b      	bhi.n	8002cbc <HAL_TIM_ConfigClockSource+0x16c>
 8002bc4:	2b60      	cmp	r3, #96	; 0x60
 8002bc6:	d050      	beq.n	8002c6a <HAL_TIM_ConfigClockSource+0x11a>
 8002bc8:	2b60      	cmp	r3, #96	; 0x60
 8002bca:	d877      	bhi.n	8002cbc <HAL_TIM_ConfigClockSource+0x16c>
 8002bcc:	2b50      	cmp	r3, #80	; 0x50
 8002bce:	d03c      	beq.n	8002c4a <HAL_TIM_ConfigClockSource+0xfa>
 8002bd0:	2b50      	cmp	r3, #80	; 0x50
 8002bd2:	d873      	bhi.n	8002cbc <HAL_TIM_ConfigClockSource+0x16c>
 8002bd4:	2b40      	cmp	r3, #64	; 0x40
 8002bd6:	d058      	beq.n	8002c8a <HAL_TIM_ConfigClockSource+0x13a>
 8002bd8:	2b40      	cmp	r3, #64	; 0x40
 8002bda:	d86f      	bhi.n	8002cbc <HAL_TIM_ConfigClockSource+0x16c>
 8002bdc:	2b30      	cmp	r3, #48	; 0x30
 8002bde:	d064      	beq.n	8002caa <HAL_TIM_ConfigClockSource+0x15a>
 8002be0:	2b30      	cmp	r3, #48	; 0x30
 8002be2:	d86b      	bhi.n	8002cbc <HAL_TIM_ConfigClockSource+0x16c>
 8002be4:	2b20      	cmp	r3, #32
 8002be6:	d060      	beq.n	8002caa <HAL_TIM_ConfigClockSource+0x15a>
 8002be8:	2b20      	cmp	r3, #32
 8002bea:	d867      	bhi.n	8002cbc <HAL_TIM_ConfigClockSource+0x16c>
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d05c      	beq.n	8002caa <HAL_TIM_ConfigClockSource+0x15a>
 8002bf0:	2b10      	cmp	r3, #16
 8002bf2:	d05a      	beq.n	8002caa <HAL_TIM_ConfigClockSource+0x15a>
 8002bf4:	e062      	b.n	8002cbc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c06:	f000 fae9 	bl	80031dc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	68ba      	ldr	r2, [r7, #8]
 8002c20:	609a      	str	r2, [r3, #8]
      break;
 8002c22:	e04f      	b.n	8002cc4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c34:	f000 fad2 	bl	80031dc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	689a      	ldr	r2, [r3, #8]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c46:	609a      	str	r2, [r3, #8]
      break;
 8002c48:	e03c      	b.n	8002cc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c56:	461a      	mov	r2, r3
 8002c58:	f000 f996 	bl	8002f88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2150      	movs	r1, #80	; 0x50
 8002c62:	4618      	mov	r0, r3
 8002c64:	f000 faa0 	bl	80031a8 <TIM_ITRx_SetConfig>
      break;
 8002c68:	e02c      	b.n	8002cc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c76:	461a      	mov	r2, r3
 8002c78:	f000 f9f0 	bl	800305c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2160      	movs	r1, #96	; 0x60
 8002c82:	4618      	mov	r0, r3
 8002c84:	f000 fa90 	bl	80031a8 <TIM_ITRx_SetConfig>
      break;
 8002c88:	e01c      	b.n	8002cc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c96:	461a      	mov	r2, r3
 8002c98:	f000 f976 	bl	8002f88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2140      	movs	r1, #64	; 0x40
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f000 fa80 	bl	80031a8 <TIM_ITRx_SetConfig>
      break;
 8002ca8:	e00c      	b.n	8002cc4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	4610      	mov	r0, r2
 8002cb6:	f000 fa77 	bl	80031a8 <TIM_ITRx_SetConfig>
      break;
 8002cba:	e003      	b.n	8002cc4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	73fb      	strb	r3, [r7, #15]
      break;
 8002cc0:	e000      	b.n	8002cc4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002cc2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3710      	adds	r7, #16
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
	...

08002ce0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b085      	sub	sp, #20
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002cea:	2300      	movs	r3, #0
 8002cec:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	2b0c      	cmp	r3, #12
 8002cf2:	d831      	bhi.n	8002d58 <HAL_TIM_ReadCapturedValue+0x78>
 8002cf4:	a201      	add	r2, pc, #4	; (adr r2, 8002cfc <HAL_TIM_ReadCapturedValue+0x1c>)
 8002cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cfa:	bf00      	nop
 8002cfc:	08002d31 	.word	0x08002d31
 8002d00:	08002d59 	.word	0x08002d59
 8002d04:	08002d59 	.word	0x08002d59
 8002d08:	08002d59 	.word	0x08002d59
 8002d0c:	08002d3b 	.word	0x08002d3b
 8002d10:	08002d59 	.word	0x08002d59
 8002d14:	08002d59 	.word	0x08002d59
 8002d18:	08002d59 	.word	0x08002d59
 8002d1c:	08002d45 	.word	0x08002d45
 8002d20:	08002d59 	.word	0x08002d59
 8002d24:	08002d59 	.word	0x08002d59
 8002d28:	08002d59 	.word	0x08002d59
 8002d2c:	08002d4f 	.word	0x08002d4f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d36:	60fb      	str	r3, [r7, #12]

      break;
 8002d38:	e00f      	b.n	8002d5a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d40:	60fb      	str	r3, [r7, #12]

      break;
 8002d42:	e00a      	b.n	8002d5a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d4a:	60fb      	str	r3, [r7, #12]

      break;
 8002d4c:	e005      	b.n	8002d5a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d54:	60fb      	str	r3, [r7, #12]

      break;
 8002d56:	e000      	b.n	8002d5a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8002d58:	bf00      	nop
  }

  return tmpreg;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3714      	adds	r7, #20
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bc80      	pop	{r7}
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop

08002d68 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bc80      	pop	{r7}
 8002d78:	4770      	bx	lr

08002d7a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	b083      	sub	sp, #12
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d82:	bf00      	nop
 8002d84:	370c      	adds	r7, #12
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bc80      	pop	{r7}
 8002d8a:	4770      	bx	lr

08002d8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d94:	bf00      	nop
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bc80      	pop	{r7}
 8002d9c:	4770      	bx	lr

08002d9e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b083      	sub	sp, #12
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002da6:	bf00      	nop
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bc80      	pop	{r7}
 8002dae:	4770      	bx	lr

08002db0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b085      	sub	sp, #20
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4a39      	ldr	r2, [pc, #228]	; (8002ea8 <TIM_Base_SetConfig+0xf8>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d013      	beq.n	8002df0 <TIM_Base_SetConfig+0x40>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	4a38      	ldr	r2, [pc, #224]	; (8002eac <TIM_Base_SetConfig+0xfc>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d00f      	beq.n	8002df0 <TIM_Base_SetConfig+0x40>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dd6:	d00b      	beq.n	8002df0 <TIM_Base_SetConfig+0x40>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4a35      	ldr	r2, [pc, #212]	; (8002eb0 <TIM_Base_SetConfig+0x100>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d007      	beq.n	8002df0 <TIM_Base_SetConfig+0x40>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4a34      	ldr	r2, [pc, #208]	; (8002eb4 <TIM_Base_SetConfig+0x104>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d003      	beq.n	8002df0 <TIM_Base_SetConfig+0x40>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a33      	ldr	r2, [pc, #204]	; (8002eb8 <TIM_Base_SetConfig+0x108>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d108      	bne.n	8002e02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002df6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	68fa      	ldr	r2, [r7, #12]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a28      	ldr	r2, [pc, #160]	; (8002ea8 <TIM_Base_SetConfig+0xf8>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d013      	beq.n	8002e32 <TIM_Base_SetConfig+0x82>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a27      	ldr	r2, [pc, #156]	; (8002eac <TIM_Base_SetConfig+0xfc>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d00f      	beq.n	8002e32 <TIM_Base_SetConfig+0x82>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e18:	d00b      	beq.n	8002e32 <TIM_Base_SetConfig+0x82>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a24      	ldr	r2, [pc, #144]	; (8002eb0 <TIM_Base_SetConfig+0x100>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d007      	beq.n	8002e32 <TIM_Base_SetConfig+0x82>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a23      	ldr	r2, [pc, #140]	; (8002eb4 <TIM_Base_SetConfig+0x104>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d003      	beq.n	8002e32 <TIM_Base_SetConfig+0x82>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a22      	ldr	r2, [pc, #136]	; (8002eb8 <TIM_Base_SetConfig+0x108>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d108      	bne.n	8002e44 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	68fa      	ldr	r2, [r7, #12]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	68fa      	ldr	r2, [r7, #12]
 8002e56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	689a      	ldr	r2, [r3, #8]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	4a0f      	ldr	r2, [pc, #60]	; (8002ea8 <TIM_Base_SetConfig+0xf8>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d003      	beq.n	8002e78 <TIM_Base_SetConfig+0xc8>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4a0e      	ldr	r2, [pc, #56]	; (8002eac <TIM_Base_SetConfig+0xfc>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d103      	bne.n	8002e80 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	691a      	ldr	r2, [r3, #16]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	691b      	ldr	r3, [r3, #16]
 8002e8a:	f003 0301 	and.w	r3, r3, #1
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d005      	beq.n	8002e9e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	f023 0201 	bic.w	r2, r3, #1
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	611a      	str	r2, [r3, #16]
  }
}
 8002e9e:	bf00      	nop
 8002ea0:	3714      	adds	r7, #20
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bc80      	pop	{r7}
 8002ea6:	4770      	bx	lr
 8002ea8:	40012c00 	.word	0x40012c00
 8002eac:	40013400 	.word	0x40013400
 8002eb0:	40000400 	.word	0x40000400
 8002eb4:	40000800 	.word	0x40000800
 8002eb8:	40000c00 	.word	0x40000c00

08002ebc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b087      	sub	sp, #28
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	607a      	str	r2, [r7, #4]
 8002ec8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6a1b      	ldr	r3, [r3, #32]
 8002ece:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6a1b      	ldr	r3, [r3, #32]
 8002ed4:	f023 0201 	bic.w	r2, r3, #1
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	699b      	ldr	r3, [r3, #24]
 8002ee0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	4a23      	ldr	r2, [pc, #140]	; (8002f74 <TIM_TI1_SetConfig+0xb8>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d013      	beq.n	8002f12 <TIM_TI1_SetConfig+0x56>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	4a22      	ldr	r2, [pc, #136]	; (8002f78 <TIM_TI1_SetConfig+0xbc>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d00f      	beq.n	8002f12 <TIM_TI1_SetConfig+0x56>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ef8:	d00b      	beq.n	8002f12 <TIM_TI1_SetConfig+0x56>
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	4a1f      	ldr	r2, [pc, #124]	; (8002f7c <TIM_TI1_SetConfig+0xc0>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d007      	beq.n	8002f12 <TIM_TI1_SetConfig+0x56>
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	4a1e      	ldr	r2, [pc, #120]	; (8002f80 <TIM_TI1_SetConfig+0xc4>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d003      	beq.n	8002f12 <TIM_TI1_SetConfig+0x56>
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	4a1d      	ldr	r2, [pc, #116]	; (8002f84 <TIM_TI1_SetConfig+0xc8>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d101      	bne.n	8002f16 <TIM_TI1_SetConfig+0x5a>
 8002f12:	2301      	movs	r3, #1
 8002f14:	e000      	b.n	8002f18 <TIM_TI1_SetConfig+0x5c>
 8002f16:	2300      	movs	r3, #0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d008      	beq.n	8002f2e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	f023 0303 	bic.w	r3, r3, #3
 8002f22:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002f24:	697a      	ldr	r2, [r7, #20]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	617b      	str	r3, [r7, #20]
 8002f2c:	e003      	b.n	8002f36 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	f043 0301 	orr.w	r3, r3, #1
 8002f34:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	011b      	lsls	r3, r3, #4
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	697a      	ldr	r2, [r7, #20]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	f023 030a 	bic.w	r3, r3, #10
 8002f50:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	f003 030a 	and.w	r3, r3, #10
 8002f58:	693a      	ldr	r2, [r7, #16]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	697a      	ldr	r2, [r7, #20]
 8002f62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	693a      	ldr	r2, [r7, #16]
 8002f68:	621a      	str	r2, [r3, #32]
}
 8002f6a:	bf00      	nop
 8002f6c:	371c      	adds	r7, #28
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bc80      	pop	{r7}
 8002f72:	4770      	bx	lr
 8002f74:	40012c00 	.word	0x40012c00
 8002f78:	40013400 	.word	0x40013400
 8002f7c:	40000400 	.word	0x40000400
 8002f80:	40000800 	.word	0x40000800
 8002f84:	40000c00 	.word	0x40000c00

08002f88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b087      	sub	sp, #28
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6a1b      	ldr	r3, [r3, #32]
 8002f98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6a1b      	ldr	r3, [r3, #32]
 8002f9e:	f023 0201 	bic.w	r2, r3, #1
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	011b      	lsls	r3, r3, #4
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	f023 030a 	bic.w	r3, r3, #10
 8002fc4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002fc6:	697a      	ldr	r2, [r7, #20]
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	693a      	ldr	r2, [r7, #16]
 8002fd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	697a      	ldr	r2, [r7, #20]
 8002fd8:	621a      	str	r2, [r3, #32]
}
 8002fda:	bf00      	nop
 8002fdc:	371c      	adds	r7, #28
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bc80      	pop	{r7}
 8002fe2:	4770      	bx	lr

08002fe4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b087      	sub	sp, #28
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	607a      	str	r2, [r7, #4]
 8002ff0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6a1b      	ldr	r3, [r3, #32]
 8002ff6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6a1b      	ldr	r3, [r3, #32]
 8002ffc:	f023 0210 	bic.w	r2, r3, #16
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003010:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	021b      	lsls	r3, r3, #8
 8003016:	693a      	ldr	r2, [r7, #16]
 8003018:	4313      	orrs	r3, r2
 800301a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003022:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	031b      	lsls	r3, r3, #12
 8003028:	b29b      	uxth	r3, r3
 800302a:	693a      	ldr	r2, [r7, #16]
 800302c:	4313      	orrs	r3, r2
 800302e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003036:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	011b      	lsls	r3, r3, #4
 800303c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003040:	697a      	ldr	r2, [r7, #20]
 8003042:	4313      	orrs	r3, r2
 8003044:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	693a      	ldr	r2, [r7, #16]
 800304a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	697a      	ldr	r2, [r7, #20]
 8003050:	621a      	str	r2, [r3, #32]
}
 8003052:	bf00      	nop
 8003054:	371c      	adds	r7, #28
 8003056:	46bd      	mov	sp, r7
 8003058:	bc80      	pop	{r7}
 800305a:	4770      	bx	lr

0800305c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800305c:	b480      	push	{r7}
 800305e:	b087      	sub	sp, #28
 8003060:	af00      	add	r7, sp, #0
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6a1b      	ldr	r3, [r3, #32]
 800306c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6a1b      	ldr	r3, [r3, #32]
 8003072:	f023 0210 	bic.w	r2, r3, #16
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003086:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	031b      	lsls	r3, r3, #12
 800308c:	693a      	ldr	r2, [r7, #16]
 800308e:	4313      	orrs	r3, r2
 8003090:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003098:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	011b      	lsls	r3, r3, #4
 800309e:	697a      	ldr	r2, [r7, #20]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	693a      	ldr	r2, [r7, #16]
 80030a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	697a      	ldr	r2, [r7, #20]
 80030ae:	621a      	str	r2, [r3, #32]
}
 80030b0:	bf00      	nop
 80030b2:	371c      	adds	r7, #28
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bc80      	pop	{r7}
 80030b8:	4770      	bx	lr

080030ba <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80030ba:	b480      	push	{r7}
 80030bc:	b087      	sub	sp, #28
 80030be:	af00      	add	r7, sp, #0
 80030c0:	60f8      	str	r0, [r7, #12]
 80030c2:	60b9      	str	r1, [r7, #8]
 80030c4:	607a      	str	r2, [r7, #4]
 80030c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6a1b      	ldr	r3, [r3, #32]
 80030cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6a1b      	ldr	r3, [r3, #32]
 80030d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	69db      	ldr	r3, [r3, #28]
 80030de:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	f023 0303 	bic.w	r3, r3, #3
 80030e6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030f6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	011b      	lsls	r3, r3, #4
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	4313      	orrs	r3, r2
 8003102:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800310a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	021b      	lsls	r3, r3, #8
 8003110:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003114:	697a      	ldr	r2, [r7, #20]
 8003116:	4313      	orrs	r3, r2
 8003118:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	693a      	ldr	r2, [r7, #16]
 800311e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	697a      	ldr	r2, [r7, #20]
 8003124:	621a      	str	r2, [r3, #32]
}
 8003126:	bf00      	nop
 8003128:	371c      	adds	r7, #28
 800312a:	46bd      	mov	sp, r7
 800312c:	bc80      	pop	{r7}
 800312e:	4770      	bx	lr

08003130 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003130:	b480      	push	{r7}
 8003132:	b087      	sub	sp, #28
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	607a      	str	r2, [r7, #4]
 800313c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6a1b      	ldr	r3, [r3, #32]
 8003142:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6a1b      	ldr	r3, [r3, #32]
 8003148:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	69db      	ldr	r3, [r3, #28]
 8003154:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800315c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	021b      	lsls	r3, r3, #8
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	4313      	orrs	r3, r2
 8003166:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800316e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	031b      	lsls	r3, r3, #12
 8003174:	b29b      	uxth	r3, r3
 8003176:	693a      	ldr	r2, [r7, #16]
 8003178:	4313      	orrs	r3, r2
 800317a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003182:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	031b      	lsls	r3, r3, #12
 8003188:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800318c:	697a      	ldr	r2, [r7, #20]
 800318e:	4313      	orrs	r3, r2
 8003190:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	693a      	ldr	r2, [r7, #16]
 8003196:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	697a      	ldr	r2, [r7, #20]
 800319c:	621a      	str	r2, [r3, #32]
}
 800319e:	bf00      	nop
 80031a0:	371c      	adds	r7, #28
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bc80      	pop	{r7}
 80031a6:	4770      	bx	lr

080031a8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b085      	sub	sp, #20
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031be:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80031c0:	683a      	ldr	r2, [r7, #0]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	f043 0307 	orr.w	r3, r3, #7
 80031ca:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	609a      	str	r2, [r3, #8]
}
 80031d2:	bf00      	nop
 80031d4:	3714      	adds	r7, #20
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bc80      	pop	{r7}
 80031da:	4770      	bx	lr

080031dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031dc:	b480      	push	{r7}
 80031de:	b087      	sub	sp, #28
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	607a      	str	r2, [r7, #4]
 80031e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	021a      	lsls	r2, r3, #8
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	431a      	orrs	r2, r3
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	4313      	orrs	r3, r2
 8003204:	697a      	ldr	r2, [r7, #20]
 8003206:	4313      	orrs	r3, r2
 8003208:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	697a      	ldr	r2, [r7, #20]
 800320e:	609a      	str	r2, [r3, #8]
}
 8003210:	bf00      	nop
 8003212:	371c      	adds	r7, #28
 8003214:	46bd      	mov	sp, r7
 8003216:	bc80      	pop	{r7}
 8003218:	4770      	bx	lr

0800321a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800321a:	b480      	push	{r7}
 800321c:	b087      	sub	sp, #28
 800321e:	af00      	add	r7, sp, #0
 8003220:	60f8      	str	r0, [r7, #12]
 8003222:	60b9      	str	r1, [r7, #8]
 8003224:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	f003 031f 	and.w	r3, r3, #31
 800322c:	2201      	movs	r2, #1
 800322e:	fa02 f303 	lsl.w	r3, r2, r3
 8003232:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6a1a      	ldr	r2, [r3, #32]
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	43db      	mvns	r3, r3
 800323c:	401a      	ands	r2, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6a1a      	ldr	r2, [r3, #32]
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	f003 031f 	and.w	r3, r3, #31
 800324c:	6879      	ldr	r1, [r7, #4]
 800324e:	fa01 f303 	lsl.w	r3, r1, r3
 8003252:	431a      	orrs	r2, r3
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	621a      	str	r2, [r3, #32]
}
 8003258:	bf00      	nop
 800325a:	371c      	adds	r7, #28
 800325c:	46bd      	mov	sp, r7
 800325e:	bc80      	pop	{r7}
 8003260:	4770      	bx	lr
	...

08003264 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003264:	b480      	push	{r7}
 8003266:	b085      	sub	sp, #20
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003274:	2b01      	cmp	r3, #1
 8003276:	d101      	bne.n	800327c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003278:	2302      	movs	r3, #2
 800327a:	e050      	b.n	800331e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2202      	movs	r2, #2
 8003288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68fa      	ldr	r2, [r7, #12]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68fa      	ldr	r2, [r7, #12]
 80032b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a1b      	ldr	r2, [pc, #108]	; (8003328 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d018      	beq.n	80032f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a19      	ldr	r2, [pc, #100]	; (800332c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d013      	beq.n	80032f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032d2:	d00e      	beq.n	80032f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a15      	ldr	r2, [pc, #84]	; (8003330 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d009      	beq.n	80032f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a14      	ldr	r2, [pc, #80]	; (8003334 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d004      	beq.n	80032f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a12      	ldr	r2, [pc, #72]	; (8003338 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d10c      	bne.n	800330c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	68ba      	ldr	r2, [r7, #8]
 8003300:	4313      	orrs	r3, r2
 8003302:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	68ba      	ldr	r2, [r7, #8]
 800330a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3714      	adds	r7, #20
 8003322:	46bd      	mov	sp, r7
 8003324:	bc80      	pop	{r7}
 8003326:	4770      	bx	lr
 8003328:	40012c00 	.word	0x40012c00
 800332c:	40013400 	.word	0x40013400
 8003330:	40000400 	.word	0x40000400
 8003334:	40000800 	.word	0x40000800
 8003338:	40000c00 	.word	0x40000c00

0800333c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003344:	bf00      	nop
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	bc80      	pop	{r7}
 800334c:	4770      	bx	lr

0800334e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800334e:	b480      	push	{r7}
 8003350:	b083      	sub	sp, #12
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003356:	bf00      	nop
 8003358:	370c      	adds	r7, #12
 800335a:	46bd      	mov	sp, r7
 800335c:	bc80      	pop	{r7}
 800335e:	4770      	bx	lr

08003360 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d101      	bne.n	8003372 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e042      	b.n	80033f8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003378:	b2db      	uxtb	r3, r3
 800337a:	2b00      	cmp	r3, #0
 800337c:	d106      	bne.n	800338c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f7fd fc26 	bl	8000bd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2224      	movs	r2, #36	; 0x24
 8003390:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	68da      	ldr	r2, [r3, #12]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f000 fd63 	bl	8003e70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	691a      	ldr	r2, [r3, #16]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	695a      	ldr	r2, [r3, #20]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	68da      	ldr	r2, [r3, #12]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2220      	movs	r2, #32
 80033e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2220      	movs	r2, #32
 80033ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80033f6:	2300      	movs	r3, #0
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3708      	adds	r7, #8
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}

08003400 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b08a      	sub	sp, #40	; 0x28
 8003404:	af02      	add	r7, sp, #8
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	603b      	str	r3, [r7, #0]
 800340c:	4613      	mov	r3, r2
 800340e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003410:	2300      	movs	r3, #0
 8003412:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800341a:	b2db      	uxtb	r3, r3
 800341c:	2b20      	cmp	r3, #32
 800341e:	d175      	bne.n	800350c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d002      	beq.n	800342c <HAL_UART_Transmit+0x2c>
 8003426:	88fb      	ldrh	r3, [r7, #6]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d101      	bne.n	8003430 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e06e      	b.n	800350e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2200      	movs	r2, #0
 8003434:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2221      	movs	r2, #33	; 0x21
 800343a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800343e:	f7fd fcf3 	bl	8000e28 <HAL_GetTick>
 8003442:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	88fa      	ldrh	r2, [r7, #6]
 8003448:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	88fa      	ldrh	r2, [r7, #6]
 800344e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003458:	d108      	bne.n	800346c <HAL_UART_Transmit+0x6c>
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d104      	bne.n	800346c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003462:	2300      	movs	r3, #0
 8003464:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	61bb      	str	r3, [r7, #24]
 800346a:	e003      	b.n	8003474 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003470:	2300      	movs	r3, #0
 8003472:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003474:	e02e      	b.n	80034d4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	9300      	str	r3, [sp, #0]
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	2200      	movs	r2, #0
 800347e:	2180      	movs	r1, #128	; 0x80
 8003480:	68f8      	ldr	r0, [r7, #12]
 8003482:	f000 fb01 	bl	8003a88 <UART_WaitOnFlagUntilTimeout>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d005      	beq.n	8003498 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2220      	movs	r2, #32
 8003490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e03a      	b.n	800350e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d10b      	bne.n	80034b6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	881b      	ldrh	r3, [r3, #0]
 80034a2:	461a      	mov	r2, r3
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	3302      	adds	r3, #2
 80034b2:	61bb      	str	r3, [r7, #24]
 80034b4:	e007      	b.n	80034c6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	781a      	ldrb	r2, [r3, #0]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	3301      	adds	r3, #1
 80034c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	3b01      	subs	r3, #1
 80034ce:	b29a      	uxth	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034d8:	b29b      	uxth	r3, r3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d1cb      	bne.n	8003476 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	9300      	str	r3, [sp, #0]
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	2200      	movs	r2, #0
 80034e6:	2140      	movs	r1, #64	; 0x40
 80034e8:	68f8      	ldr	r0, [r7, #12]
 80034ea:	f000 facd 	bl	8003a88 <UART_WaitOnFlagUntilTimeout>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d005      	beq.n	8003500 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2220      	movs	r2, #32
 80034f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e006      	b.n	800350e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2220      	movs	r2, #32
 8003504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003508:	2300      	movs	r3, #0
 800350a:	e000      	b.n	800350e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800350c:	2302      	movs	r3, #2
  }
}
 800350e:	4618      	mov	r0, r3
 8003510:	3720      	adds	r7, #32
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
	...

08003518 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b0ba      	sub	sp, #232	; 0xe8
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	695b      	ldr	r3, [r3, #20]
 800353a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800353e:	2300      	movs	r3, #0
 8003540:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003544:	2300      	movs	r3, #0
 8003546:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800354a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800354e:	f003 030f 	and.w	r3, r3, #15
 8003552:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003556:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800355a:	2b00      	cmp	r3, #0
 800355c:	d10f      	bne.n	800357e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800355e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003562:	f003 0320 	and.w	r3, r3, #32
 8003566:	2b00      	cmp	r3, #0
 8003568:	d009      	beq.n	800357e <HAL_UART_IRQHandler+0x66>
 800356a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800356e:	f003 0320 	and.w	r3, r3, #32
 8003572:	2b00      	cmp	r3, #0
 8003574:	d003      	beq.n	800357e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 fbbc 	bl	8003cf4 <UART_Receive_IT>
      return;
 800357c:	e25b      	b.n	8003a36 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800357e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003582:	2b00      	cmp	r3, #0
 8003584:	f000 80de 	beq.w	8003744 <HAL_UART_IRQHandler+0x22c>
 8003588:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800358c:	f003 0301 	and.w	r3, r3, #1
 8003590:	2b00      	cmp	r3, #0
 8003592:	d106      	bne.n	80035a2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003594:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003598:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800359c:	2b00      	cmp	r3, #0
 800359e:	f000 80d1 	beq.w	8003744 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80035a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00b      	beq.n	80035c6 <HAL_UART_IRQHandler+0xae>
 80035ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d005      	beq.n	80035c6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035be:	f043 0201 	orr.w	r2, r3, #1
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80035c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035ca:	f003 0304 	and.w	r3, r3, #4
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00b      	beq.n	80035ea <HAL_UART_IRQHandler+0xd2>
 80035d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d005      	beq.n	80035ea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e2:	f043 0202 	orr.w	r2, r3, #2
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80035ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035ee:	f003 0302 	and.w	r3, r3, #2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00b      	beq.n	800360e <HAL_UART_IRQHandler+0xf6>
 80035f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035fa:	f003 0301 	and.w	r3, r3, #1
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d005      	beq.n	800360e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003606:	f043 0204 	orr.w	r2, r3, #4
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800360e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003612:	f003 0308 	and.w	r3, r3, #8
 8003616:	2b00      	cmp	r3, #0
 8003618:	d011      	beq.n	800363e <HAL_UART_IRQHandler+0x126>
 800361a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800361e:	f003 0320 	and.w	r3, r3, #32
 8003622:	2b00      	cmp	r3, #0
 8003624:	d105      	bne.n	8003632 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003626:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	2b00      	cmp	r3, #0
 8003630:	d005      	beq.n	800363e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003636:	f043 0208 	orr.w	r2, r3, #8
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003642:	2b00      	cmp	r3, #0
 8003644:	f000 81f2 	beq.w	8003a2c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003648:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800364c:	f003 0320 	and.w	r3, r3, #32
 8003650:	2b00      	cmp	r3, #0
 8003652:	d008      	beq.n	8003666 <HAL_UART_IRQHandler+0x14e>
 8003654:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003658:	f003 0320 	and.w	r3, r3, #32
 800365c:	2b00      	cmp	r3, #0
 800365e:	d002      	beq.n	8003666 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f000 fb47 	bl	8003cf4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	695b      	ldr	r3, [r3, #20]
 800366c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003670:	2b00      	cmp	r3, #0
 8003672:	bf14      	ite	ne
 8003674:	2301      	movne	r3, #1
 8003676:	2300      	moveq	r3, #0
 8003678:	b2db      	uxtb	r3, r3
 800367a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003682:	f003 0308 	and.w	r3, r3, #8
 8003686:	2b00      	cmp	r3, #0
 8003688:	d103      	bne.n	8003692 <HAL_UART_IRQHandler+0x17a>
 800368a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800368e:	2b00      	cmp	r3, #0
 8003690:	d04f      	beq.n	8003732 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 fa51 	bl	8003b3a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d041      	beq.n	800372a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	3314      	adds	r3, #20
 80036ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80036b4:	e853 3f00 	ldrex	r3, [r3]
 80036b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80036bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80036c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	3314      	adds	r3, #20
 80036ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80036d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80036d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80036de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80036e2:	e841 2300 	strex	r3, r2, [r1]
 80036e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80036ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d1d9      	bne.n	80036a6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d013      	beq.n	8003722 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036fe:	4a7e      	ldr	r2, [pc, #504]	; (80038f8 <HAL_UART_IRQHandler+0x3e0>)
 8003700:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003706:	4618      	mov	r0, r3
 8003708:	f7fd fd7c 	bl	8001204 <HAL_DMA_Abort_IT>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d016      	beq.n	8003740 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800371c:	4610      	mov	r0, r2
 800371e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003720:	e00e      	b.n	8003740 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f000 f99c 	bl	8003a60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003728:	e00a      	b.n	8003740 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 f998 	bl	8003a60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003730:	e006      	b.n	8003740 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 f994 	bl	8003a60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800373e:	e175      	b.n	8003a2c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003740:	bf00      	nop
    return;
 8003742:	e173      	b.n	8003a2c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003748:	2b01      	cmp	r3, #1
 800374a:	f040 814f 	bne.w	80039ec <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800374e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003752:	f003 0310 	and.w	r3, r3, #16
 8003756:	2b00      	cmp	r3, #0
 8003758:	f000 8148 	beq.w	80039ec <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800375c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003760:	f003 0310 	and.w	r3, r3, #16
 8003764:	2b00      	cmp	r3, #0
 8003766:	f000 8141 	beq.w	80039ec <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800376a:	2300      	movs	r3, #0
 800376c:	60bb      	str	r3, [r7, #8]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	60bb      	str	r3, [r7, #8]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	60bb      	str	r3, [r7, #8]
 800377e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800378a:	2b00      	cmp	r3, #0
 800378c:	f000 80b6 	beq.w	80038fc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800379c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	f000 8145 	beq.w	8003a30 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80037aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80037ae:	429a      	cmp	r2, r3
 80037b0:	f080 813e 	bcs.w	8003a30 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80037ba:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037c0:	699b      	ldr	r3, [r3, #24]
 80037c2:	2b20      	cmp	r3, #32
 80037c4:	f000 8088 	beq.w	80038d8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	330c      	adds	r3, #12
 80037ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80037d6:	e853 3f00 	ldrex	r3, [r3]
 80037da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80037de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80037e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037e6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	330c      	adds	r3, #12
 80037f0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80037f4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80037f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037fc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003800:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003804:	e841 2300 	strex	r3, r2, [r1]
 8003808:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800380c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003810:	2b00      	cmp	r3, #0
 8003812:	d1d9      	bne.n	80037c8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	3314      	adds	r3, #20
 800381a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800381c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800381e:	e853 3f00 	ldrex	r3, [r3]
 8003822:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003824:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003826:	f023 0301 	bic.w	r3, r3, #1
 800382a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	3314      	adds	r3, #20
 8003834:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003838:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800383c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800383e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003840:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003844:	e841 2300 	strex	r3, r2, [r1]
 8003848:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800384a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800384c:	2b00      	cmp	r3, #0
 800384e:	d1e1      	bne.n	8003814 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	3314      	adds	r3, #20
 8003856:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003858:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800385a:	e853 3f00 	ldrex	r3, [r3]
 800385e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003860:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003862:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003866:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	3314      	adds	r3, #20
 8003870:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003874:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003876:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003878:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800387a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800387c:	e841 2300 	strex	r3, r2, [r1]
 8003880:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003882:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003884:	2b00      	cmp	r3, #0
 8003886:	d1e3      	bne.n	8003850 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2220      	movs	r2, #32
 800388c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	330c      	adds	r3, #12
 800389c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800389e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038a0:	e853 3f00 	ldrex	r3, [r3]
 80038a4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80038a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038a8:	f023 0310 	bic.w	r3, r3, #16
 80038ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	330c      	adds	r3, #12
 80038b6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80038ba:	65ba      	str	r2, [r7, #88]	; 0x58
 80038bc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038be:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80038c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80038c2:	e841 2300 	strex	r3, r2, [r1]
 80038c6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80038c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1e3      	bne.n	8003896 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7fd fc5a 	bl	800118c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2202      	movs	r2, #2
 80038dc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	4619      	mov	r1, r3
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f000 f8bf 	bl	8003a72 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80038f4:	e09c      	b.n	8003a30 <HAL_UART_IRQHandler+0x518>
 80038f6:	bf00      	nop
 80038f8:	08003bff 	.word	0x08003bff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003904:	b29b      	uxth	r3, r3
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003910:	b29b      	uxth	r3, r3
 8003912:	2b00      	cmp	r3, #0
 8003914:	f000 808e 	beq.w	8003a34 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003918:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800391c:	2b00      	cmp	r3, #0
 800391e:	f000 8089 	beq.w	8003a34 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	330c      	adds	r3, #12
 8003928:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800392a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800392c:	e853 3f00 	ldrex	r3, [r3]
 8003930:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003934:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003938:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	330c      	adds	r3, #12
 8003942:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003946:	647a      	str	r2, [r7, #68]	; 0x44
 8003948:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800394a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800394c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800394e:	e841 2300 	strex	r3, r2, [r1]
 8003952:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003956:	2b00      	cmp	r3, #0
 8003958:	d1e3      	bne.n	8003922 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	3314      	adds	r3, #20
 8003960:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003964:	e853 3f00 	ldrex	r3, [r3]
 8003968:	623b      	str	r3, [r7, #32]
   return(result);
 800396a:	6a3b      	ldr	r3, [r7, #32]
 800396c:	f023 0301 	bic.w	r3, r3, #1
 8003970:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	3314      	adds	r3, #20
 800397a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800397e:	633a      	str	r2, [r7, #48]	; 0x30
 8003980:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003982:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003984:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003986:	e841 2300 	strex	r3, r2, [r1]
 800398a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800398c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1e3      	bne.n	800395a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2220      	movs	r2, #32
 8003996:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	330c      	adds	r3, #12
 80039a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	e853 3f00 	ldrex	r3, [r3]
 80039ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f023 0310 	bic.w	r3, r3, #16
 80039b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	330c      	adds	r3, #12
 80039c0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80039c4:	61fa      	str	r2, [r7, #28]
 80039c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c8:	69b9      	ldr	r1, [r7, #24]
 80039ca:	69fa      	ldr	r2, [r7, #28]
 80039cc:	e841 2300 	strex	r3, r2, [r1]
 80039d0:	617b      	str	r3, [r7, #20]
   return(result);
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d1e3      	bne.n	80039a0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2202      	movs	r2, #2
 80039dc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80039de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80039e2:	4619      	mov	r1, r3
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f000 f844 	bl	8003a72 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80039ea:	e023      	b.n	8003a34 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80039ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d009      	beq.n	8003a0c <HAL_UART_IRQHandler+0x4f4>
 80039f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d003      	beq.n	8003a0c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 f90e 	bl	8003c26 <UART_Transmit_IT>
    return;
 8003a0a:	e014      	b.n	8003a36 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003a0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d00e      	beq.n	8003a36 <HAL_UART_IRQHandler+0x51e>
 8003a18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d008      	beq.n	8003a36 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f000 f94d 	bl	8003cc4 <UART_EndTransmit_IT>
    return;
 8003a2a:	e004      	b.n	8003a36 <HAL_UART_IRQHandler+0x51e>
    return;
 8003a2c:	bf00      	nop
 8003a2e:	e002      	b.n	8003a36 <HAL_UART_IRQHandler+0x51e>
      return;
 8003a30:	bf00      	nop
 8003a32:	e000      	b.n	8003a36 <HAL_UART_IRQHandler+0x51e>
      return;
 8003a34:	bf00      	nop
  }
}
 8003a36:	37e8      	adds	r7, #232	; 0xe8
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003a44:	bf00      	nop
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bc80      	pop	{r7}
 8003a4c:	4770      	bx	lr

08003a4e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a4e:	b480      	push	{r7}
 8003a50:	b083      	sub	sp, #12
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003a56:	bf00      	nop
 8003a58:	370c      	adds	r7, #12
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bc80      	pop	{r7}
 8003a5e:	4770      	bx	lr

08003a60 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003a68:	bf00      	nop
 8003a6a:	370c      	adds	r7, #12
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bc80      	pop	{r7}
 8003a70:	4770      	bx	lr

08003a72 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003a72:	b480      	push	{r7}
 8003a74:	b083      	sub	sp, #12
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003a7e:	bf00      	nop
 8003a80:	370c      	adds	r7, #12
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bc80      	pop	{r7}
 8003a86:	4770      	bx	lr

08003a88 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	603b      	str	r3, [r7, #0]
 8003a94:	4613      	mov	r3, r2
 8003a96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a98:	e03b      	b.n	8003b12 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a9a:	6a3b      	ldr	r3, [r7, #32]
 8003a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aa0:	d037      	beq.n	8003b12 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aa2:	f7fd f9c1 	bl	8000e28 <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	6a3a      	ldr	r2, [r7, #32]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d302      	bcc.n	8003ab8 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ab2:	6a3b      	ldr	r3, [r7, #32]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d101      	bne.n	8003abc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e03a      	b.n	8003b32 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	f003 0304 	and.w	r3, r3, #4
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d023      	beq.n	8003b12 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	2b80      	cmp	r3, #128	; 0x80
 8003ace:	d020      	beq.n	8003b12 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	2b40      	cmp	r3, #64	; 0x40
 8003ad4:	d01d      	beq.n	8003b12 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0308 	and.w	r3, r3, #8
 8003ae0:	2b08      	cmp	r3, #8
 8003ae2:	d116      	bne.n	8003b12 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	617b      	str	r3, [r7, #20]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	617b      	str	r3, [r7, #20]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	617b      	str	r3, [r7, #20]
 8003af8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003afa:	68f8      	ldr	r0, [r7, #12]
 8003afc:	f000 f81d 	bl	8003b3a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2208      	movs	r2, #8
 8003b04:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e00f      	b.n	8003b32 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	68ba      	ldr	r2, [r7, #8]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	bf0c      	ite	eq
 8003b22:	2301      	moveq	r3, #1
 8003b24:	2300      	movne	r3, #0
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	461a      	mov	r2, r3
 8003b2a:	79fb      	ldrb	r3, [r7, #7]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d0b4      	beq.n	8003a9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3718      	adds	r7, #24
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}

08003b3a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b3a:	b480      	push	{r7}
 8003b3c:	b095      	sub	sp, #84	; 0x54
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	330c      	adds	r3, #12
 8003b48:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b4c:	e853 3f00 	ldrex	r3, [r3]
 8003b50:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b58:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	330c      	adds	r3, #12
 8003b60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b62:	643a      	str	r2, [r7, #64]	; 0x40
 8003b64:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b66:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003b68:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b6a:	e841 2300 	strex	r3, r2, [r1]
 8003b6e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d1e5      	bne.n	8003b42 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	3314      	adds	r3, #20
 8003b7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b7e:	6a3b      	ldr	r3, [r7, #32]
 8003b80:	e853 3f00 	ldrex	r3, [r3]
 8003b84:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	f023 0301 	bic.w	r3, r3, #1
 8003b8c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	3314      	adds	r3, #20
 8003b94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b98:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b9e:	e841 2300 	strex	r3, r2, [r1]
 8003ba2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d1e5      	bne.n	8003b76 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d119      	bne.n	8003be6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	330c      	adds	r3, #12
 8003bb8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	e853 3f00 	ldrex	r3, [r3]
 8003bc0:	60bb      	str	r3, [r7, #8]
   return(result);
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	f023 0310 	bic.w	r3, r3, #16
 8003bc8:	647b      	str	r3, [r7, #68]	; 0x44
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	330c      	adds	r3, #12
 8003bd0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003bd2:	61ba      	str	r2, [r7, #24]
 8003bd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd6:	6979      	ldr	r1, [r7, #20]
 8003bd8:	69ba      	ldr	r2, [r7, #24]
 8003bda:	e841 2300 	strex	r3, r2, [r1]
 8003bde:	613b      	str	r3, [r7, #16]
   return(result);
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d1e5      	bne.n	8003bb2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2220      	movs	r2, #32
 8003bea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003bf4:	bf00      	nop
 8003bf6:	3754      	adds	r7, #84	; 0x54
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bc80      	pop	{r7}
 8003bfc:	4770      	bx	lr

08003bfe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003bfe:	b580      	push	{r7, lr}
 8003c00:	b084      	sub	sp, #16
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2200      	movs	r2, #0
 8003c16:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c18:	68f8      	ldr	r0, [r7, #12]
 8003c1a:	f7ff ff21 	bl	8003a60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c1e:	bf00      	nop
 8003c20:	3710      	adds	r7, #16
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}

08003c26 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003c26:	b480      	push	{r7}
 8003c28:	b085      	sub	sp, #20
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	2b21      	cmp	r3, #33	; 0x21
 8003c38:	d13e      	bne.n	8003cb8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c42:	d114      	bne.n	8003c6e <UART_Transmit_IT+0x48>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	691b      	ldr	r3, [r3, #16]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d110      	bne.n	8003c6e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6a1b      	ldr	r3, [r3, #32]
 8003c50:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	881b      	ldrh	r3, [r3, #0]
 8003c56:	461a      	mov	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c60:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a1b      	ldr	r3, [r3, #32]
 8003c66:	1c9a      	adds	r2, r3, #2
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	621a      	str	r2, [r3, #32]
 8003c6c:	e008      	b.n	8003c80 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a1b      	ldr	r3, [r3, #32]
 8003c72:	1c59      	adds	r1, r3, #1
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	6211      	str	r1, [r2, #32]
 8003c78:	781a      	ldrb	r2, [r3, #0]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	3b01      	subs	r3, #1
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d10f      	bne.n	8003cb4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68da      	ldr	r2, [r3, #12]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ca2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68da      	ldr	r2, [r3, #12]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cb2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	e000      	b.n	8003cba <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003cb8:	2302      	movs	r3, #2
  }
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3714      	adds	r7, #20
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bc80      	pop	{r7}
 8003cc2:	4770      	bx	lr

08003cc4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68da      	ldr	r2, [r3, #12]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cda:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2220      	movs	r2, #32
 8003ce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f7ff fea9 	bl	8003a3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3708      	adds	r7, #8
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b08c      	sub	sp, #48	; 0x30
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	2b22      	cmp	r3, #34	; 0x22
 8003d06:	f040 80ae 	bne.w	8003e66 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d12:	d117      	bne.n	8003d44 <UART_Receive_IT+0x50>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	691b      	ldr	r3, [r3, #16]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d113      	bne.n	8003d44 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d24:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d32:	b29a      	uxth	r2, r3
 8003d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d36:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d3c:	1c9a      	adds	r2, r3, #2
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	629a      	str	r2, [r3, #40]	; 0x28
 8003d42:	e026      	b.n	8003d92 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d48:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d56:	d007      	beq.n	8003d68 <UART_Receive_IT+0x74>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d10a      	bne.n	8003d76 <UART_Receive_IT+0x82>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	691b      	ldr	r3, [r3, #16]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d106      	bne.n	8003d76 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	b2da      	uxtb	r2, r3
 8003d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d72:	701a      	strb	r2, [r3, #0]
 8003d74:	e008      	b.n	8003d88 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d82:	b2da      	uxtb	r2, r3
 8003d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d86:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d8c:	1c5a      	adds	r2, r3, #1
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	4619      	mov	r1, r3
 8003da0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d15d      	bne.n	8003e62 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	68da      	ldr	r2, [r3, #12]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f022 0220 	bic.w	r2, r2, #32
 8003db4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	68da      	ldr	r2, [r3, #12]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003dc4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	695a      	ldr	r2, [r3, #20]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f022 0201 	bic.w	r2, r2, #1
 8003dd4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2220      	movs	r2, #32
 8003dda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d135      	bne.n	8003e58 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	330c      	adds	r3, #12
 8003df8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	e853 3f00 	ldrex	r3, [r3]
 8003e00:	613b      	str	r3, [r7, #16]
   return(result);
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	f023 0310 	bic.w	r3, r3, #16
 8003e08:	627b      	str	r3, [r7, #36]	; 0x24
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	330c      	adds	r3, #12
 8003e10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e12:	623a      	str	r2, [r7, #32]
 8003e14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e16:	69f9      	ldr	r1, [r7, #28]
 8003e18:	6a3a      	ldr	r2, [r7, #32]
 8003e1a:	e841 2300 	strex	r3, r2, [r1]
 8003e1e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d1e5      	bne.n	8003df2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0310 	and.w	r3, r3, #16
 8003e30:	2b10      	cmp	r3, #16
 8003e32:	d10a      	bne.n	8003e4a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e34:	2300      	movs	r3, #0
 8003e36:	60fb      	str	r3, [r7, #12]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	60fb      	str	r3, [r7, #12]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	60fb      	str	r3, [r7, #12]
 8003e48:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e4e:	4619      	mov	r1, r3
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f7ff fe0e 	bl	8003a72 <HAL_UARTEx_RxEventCallback>
 8003e56:	e002      	b.n	8003e5e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f7ff fdf8 	bl	8003a4e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	e002      	b.n	8003e68 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003e62:	2300      	movs	r3, #0
 8003e64:	e000      	b.n	8003e68 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003e66:	2302      	movs	r3, #2
  }
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3730      	adds	r7, #48	; 0x30
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	68da      	ldr	r2, [r3, #12]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	430a      	orrs	r2, r1
 8003e8c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	689a      	ldr	r2, [r3, #8]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	431a      	orrs	r2, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	695b      	ldr	r3, [r3, #20]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003eaa:	f023 030c 	bic.w	r3, r3, #12
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	6812      	ldr	r2, [r2, #0]
 8003eb2:	68b9      	ldr	r1, [r7, #8]
 8003eb4:	430b      	orrs	r3, r1
 8003eb6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	695b      	ldr	r3, [r3, #20]
 8003ebe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	699a      	ldr	r2, [r3, #24]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a2c      	ldr	r2, [pc, #176]	; (8003f84 <UART_SetConfig+0x114>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d103      	bne.n	8003ee0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003ed8:	f7fe fa62 	bl	80023a0 <HAL_RCC_GetPCLK2Freq>
 8003edc:	60f8      	str	r0, [r7, #12]
 8003ede:	e002      	b.n	8003ee6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003ee0:	f7fe fa4a 	bl	8002378 <HAL_RCC_GetPCLK1Freq>
 8003ee4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	4613      	mov	r3, r2
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	4413      	add	r3, r2
 8003eee:	009a      	lsls	r2, r3, #2
 8003ef0:	441a      	add	r2, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003efc:	4a22      	ldr	r2, [pc, #136]	; (8003f88 <UART_SetConfig+0x118>)
 8003efe:	fba2 2303 	umull	r2, r3, r2, r3
 8003f02:	095b      	lsrs	r3, r3, #5
 8003f04:	0119      	lsls	r1, r3, #4
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	4613      	mov	r3, r2
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	4413      	add	r3, r2
 8003f0e:	009a      	lsls	r2, r3, #2
 8003f10:	441a      	add	r2, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f1c:	4b1a      	ldr	r3, [pc, #104]	; (8003f88 <UART_SetConfig+0x118>)
 8003f1e:	fba3 0302 	umull	r0, r3, r3, r2
 8003f22:	095b      	lsrs	r3, r3, #5
 8003f24:	2064      	movs	r0, #100	; 0x64
 8003f26:	fb00 f303 	mul.w	r3, r0, r3
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	011b      	lsls	r3, r3, #4
 8003f2e:	3332      	adds	r3, #50	; 0x32
 8003f30:	4a15      	ldr	r2, [pc, #84]	; (8003f88 <UART_SetConfig+0x118>)
 8003f32:	fba2 2303 	umull	r2, r3, r2, r3
 8003f36:	095b      	lsrs	r3, r3, #5
 8003f38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f3c:	4419      	add	r1, r3
 8003f3e:	68fa      	ldr	r2, [r7, #12]
 8003f40:	4613      	mov	r3, r2
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	4413      	add	r3, r2
 8003f46:	009a      	lsls	r2, r3, #2
 8003f48:	441a      	add	r2, r3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f54:	4b0c      	ldr	r3, [pc, #48]	; (8003f88 <UART_SetConfig+0x118>)
 8003f56:	fba3 0302 	umull	r0, r3, r3, r2
 8003f5a:	095b      	lsrs	r3, r3, #5
 8003f5c:	2064      	movs	r0, #100	; 0x64
 8003f5e:	fb00 f303 	mul.w	r3, r0, r3
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	011b      	lsls	r3, r3, #4
 8003f66:	3332      	adds	r3, #50	; 0x32
 8003f68:	4a07      	ldr	r2, [pc, #28]	; (8003f88 <UART_SetConfig+0x118>)
 8003f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f6e:	095b      	lsrs	r3, r3, #5
 8003f70:	f003 020f 	and.w	r2, r3, #15
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	440a      	add	r2, r1
 8003f7a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003f7c:	bf00      	nop
 8003f7e:	3710      	adds	r7, #16
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	40013800 	.word	0x40013800
 8003f88:	51eb851f 	.word	0x51eb851f

08003f8c <siprintf>:
 8003f8c:	b40e      	push	{r1, r2, r3}
 8003f8e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003f92:	b500      	push	{lr}
 8003f94:	b09c      	sub	sp, #112	; 0x70
 8003f96:	ab1d      	add	r3, sp, #116	; 0x74
 8003f98:	9002      	str	r0, [sp, #8]
 8003f9a:	9006      	str	r0, [sp, #24]
 8003f9c:	9107      	str	r1, [sp, #28]
 8003f9e:	9104      	str	r1, [sp, #16]
 8003fa0:	4808      	ldr	r0, [pc, #32]	; (8003fc4 <siprintf+0x38>)
 8003fa2:	4909      	ldr	r1, [pc, #36]	; (8003fc8 <siprintf+0x3c>)
 8003fa4:	f853 2b04 	ldr.w	r2, [r3], #4
 8003fa8:	9105      	str	r1, [sp, #20]
 8003faa:	6800      	ldr	r0, [r0, #0]
 8003fac:	a902      	add	r1, sp, #8
 8003fae:	9301      	str	r3, [sp, #4]
 8003fb0:	f000 f98e 	bl	80042d0 <_svfiprintf_r>
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	9b02      	ldr	r3, [sp, #8]
 8003fb8:	701a      	strb	r2, [r3, #0]
 8003fba:	b01c      	add	sp, #112	; 0x70
 8003fbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8003fc0:	b003      	add	sp, #12
 8003fc2:	4770      	bx	lr
 8003fc4:	20000058 	.word	0x20000058
 8003fc8:	ffff0208 	.word	0xffff0208

08003fcc <memset>:
 8003fcc:	4603      	mov	r3, r0
 8003fce:	4402      	add	r2, r0
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d100      	bne.n	8003fd6 <memset+0xa>
 8003fd4:	4770      	bx	lr
 8003fd6:	f803 1b01 	strb.w	r1, [r3], #1
 8003fda:	e7f9      	b.n	8003fd0 <memset+0x4>

08003fdc <__errno>:
 8003fdc:	4b01      	ldr	r3, [pc, #4]	; (8003fe4 <__errno+0x8>)
 8003fde:	6818      	ldr	r0, [r3, #0]
 8003fe0:	4770      	bx	lr
 8003fe2:	bf00      	nop
 8003fe4:	20000058 	.word	0x20000058

08003fe8 <__libc_init_array>:
 8003fe8:	b570      	push	{r4, r5, r6, lr}
 8003fea:	2600      	movs	r6, #0
 8003fec:	4d0c      	ldr	r5, [pc, #48]	; (8004020 <__libc_init_array+0x38>)
 8003fee:	4c0d      	ldr	r4, [pc, #52]	; (8004024 <__libc_init_array+0x3c>)
 8003ff0:	1b64      	subs	r4, r4, r5
 8003ff2:	10a4      	asrs	r4, r4, #2
 8003ff4:	42a6      	cmp	r6, r4
 8003ff6:	d109      	bne.n	800400c <__libc_init_array+0x24>
 8003ff8:	f000 fc7a 	bl	80048f0 <_init>
 8003ffc:	2600      	movs	r6, #0
 8003ffe:	4d0a      	ldr	r5, [pc, #40]	; (8004028 <__libc_init_array+0x40>)
 8004000:	4c0a      	ldr	r4, [pc, #40]	; (800402c <__libc_init_array+0x44>)
 8004002:	1b64      	subs	r4, r4, r5
 8004004:	10a4      	asrs	r4, r4, #2
 8004006:	42a6      	cmp	r6, r4
 8004008:	d105      	bne.n	8004016 <__libc_init_array+0x2e>
 800400a:	bd70      	pop	{r4, r5, r6, pc}
 800400c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004010:	4798      	blx	r3
 8004012:	3601      	adds	r6, #1
 8004014:	e7ee      	b.n	8003ff4 <__libc_init_array+0xc>
 8004016:	f855 3b04 	ldr.w	r3, [r5], #4
 800401a:	4798      	blx	r3
 800401c:	3601      	adds	r6, #1
 800401e:	e7f2      	b.n	8004006 <__libc_init_array+0x1e>
 8004020:	08004984 	.word	0x08004984
 8004024:	08004984 	.word	0x08004984
 8004028:	08004984 	.word	0x08004984
 800402c:	08004988 	.word	0x08004988

08004030 <__retarget_lock_acquire_recursive>:
 8004030:	4770      	bx	lr

08004032 <__retarget_lock_release_recursive>:
 8004032:	4770      	bx	lr

08004034 <_free_r>:
 8004034:	b538      	push	{r3, r4, r5, lr}
 8004036:	4605      	mov	r5, r0
 8004038:	2900      	cmp	r1, #0
 800403a:	d040      	beq.n	80040be <_free_r+0x8a>
 800403c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004040:	1f0c      	subs	r4, r1, #4
 8004042:	2b00      	cmp	r3, #0
 8004044:	bfb8      	it	lt
 8004046:	18e4      	addlt	r4, r4, r3
 8004048:	f000 f8dc 	bl	8004204 <__malloc_lock>
 800404c:	4a1c      	ldr	r2, [pc, #112]	; (80040c0 <_free_r+0x8c>)
 800404e:	6813      	ldr	r3, [r2, #0]
 8004050:	b933      	cbnz	r3, 8004060 <_free_r+0x2c>
 8004052:	6063      	str	r3, [r4, #4]
 8004054:	6014      	str	r4, [r2, #0]
 8004056:	4628      	mov	r0, r5
 8004058:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800405c:	f000 b8d8 	b.w	8004210 <__malloc_unlock>
 8004060:	42a3      	cmp	r3, r4
 8004062:	d908      	bls.n	8004076 <_free_r+0x42>
 8004064:	6820      	ldr	r0, [r4, #0]
 8004066:	1821      	adds	r1, r4, r0
 8004068:	428b      	cmp	r3, r1
 800406a:	bf01      	itttt	eq
 800406c:	6819      	ldreq	r1, [r3, #0]
 800406e:	685b      	ldreq	r3, [r3, #4]
 8004070:	1809      	addeq	r1, r1, r0
 8004072:	6021      	streq	r1, [r4, #0]
 8004074:	e7ed      	b.n	8004052 <_free_r+0x1e>
 8004076:	461a      	mov	r2, r3
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	b10b      	cbz	r3, 8004080 <_free_r+0x4c>
 800407c:	42a3      	cmp	r3, r4
 800407e:	d9fa      	bls.n	8004076 <_free_r+0x42>
 8004080:	6811      	ldr	r1, [r2, #0]
 8004082:	1850      	adds	r0, r2, r1
 8004084:	42a0      	cmp	r0, r4
 8004086:	d10b      	bne.n	80040a0 <_free_r+0x6c>
 8004088:	6820      	ldr	r0, [r4, #0]
 800408a:	4401      	add	r1, r0
 800408c:	1850      	adds	r0, r2, r1
 800408e:	4283      	cmp	r3, r0
 8004090:	6011      	str	r1, [r2, #0]
 8004092:	d1e0      	bne.n	8004056 <_free_r+0x22>
 8004094:	6818      	ldr	r0, [r3, #0]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	4408      	add	r0, r1
 800409a:	6010      	str	r0, [r2, #0]
 800409c:	6053      	str	r3, [r2, #4]
 800409e:	e7da      	b.n	8004056 <_free_r+0x22>
 80040a0:	d902      	bls.n	80040a8 <_free_r+0x74>
 80040a2:	230c      	movs	r3, #12
 80040a4:	602b      	str	r3, [r5, #0]
 80040a6:	e7d6      	b.n	8004056 <_free_r+0x22>
 80040a8:	6820      	ldr	r0, [r4, #0]
 80040aa:	1821      	adds	r1, r4, r0
 80040ac:	428b      	cmp	r3, r1
 80040ae:	bf01      	itttt	eq
 80040b0:	6819      	ldreq	r1, [r3, #0]
 80040b2:	685b      	ldreq	r3, [r3, #4]
 80040b4:	1809      	addeq	r1, r1, r0
 80040b6:	6021      	streq	r1, [r4, #0]
 80040b8:	6063      	str	r3, [r4, #4]
 80040ba:	6054      	str	r4, [r2, #4]
 80040bc:	e7cb      	b.n	8004056 <_free_r+0x22>
 80040be:	bd38      	pop	{r3, r4, r5, pc}
 80040c0:	2000035c 	.word	0x2000035c

080040c4 <sbrk_aligned>:
 80040c4:	b570      	push	{r4, r5, r6, lr}
 80040c6:	4e0e      	ldr	r6, [pc, #56]	; (8004100 <sbrk_aligned+0x3c>)
 80040c8:	460c      	mov	r4, r1
 80040ca:	6831      	ldr	r1, [r6, #0]
 80040cc:	4605      	mov	r5, r0
 80040ce:	b911      	cbnz	r1, 80040d6 <sbrk_aligned+0x12>
 80040d0:	f000 fbaa 	bl	8004828 <_sbrk_r>
 80040d4:	6030      	str	r0, [r6, #0]
 80040d6:	4621      	mov	r1, r4
 80040d8:	4628      	mov	r0, r5
 80040da:	f000 fba5 	bl	8004828 <_sbrk_r>
 80040de:	1c43      	adds	r3, r0, #1
 80040e0:	d00a      	beq.n	80040f8 <sbrk_aligned+0x34>
 80040e2:	1cc4      	adds	r4, r0, #3
 80040e4:	f024 0403 	bic.w	r4, r4, #3
 80040e8:	42a0      	cmp	r0, r4
 80040ea:	d007      	beq.n	80040fc <sbrk_aligned+0x38>
 80040ec:	1a21      	subs	r1, r4, r0
 80040ee:	4628      	mov	r0, r5
 80040f0:	f000 fb9a 	bl	8004828 <_sbrk_r>
 80040f4:	3001      	adds	r0, #1
 80040f6:	d101      	bne.n	80040fc <sbrk_aligned+0x38>
 80040f8:	f04f 34ff 	mov.w	r4, #4294967295
 80040fc:	4620      	mov	r0, r4
 80040fe:	bd70      	pop	{r4, r5, r6, pc}
 8004100:	20000360 	.word	0x20000360

08004104 <_malloc_r>:
 8004104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004108:	1ccd      	adds	r5, r1, #3
 800410a:	f025 0503 	bic.w	r5, r5, #3
 800410e:	3508      	adds	r5, #8
 8004110:	2d0c      	cmp	r5, #12
 8004112:	bf38      	it	cc
 8004114:	250c      	movcc	r5, #12
 8004116:	2d00      	cmp	r5, #0
 8004118:	4607      	mov	r7, r0
 800411a:	db01      	blt.n	8004120 <_malloc_r+0x1c>
 800411c:	42a9      	cmp	r1, r5
 800411e:	d905      	bls.n	800412c <_malloc_r+0x28>
 8004120:	230c      	movs	r3, #12
 8004122:	2600      	movs	r6, #0
 8004124:	603b      	str	r3, [r7, #0]
 8004126:	4630      	mov	r0, r6
 8004128:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800412c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004200 <_malloc_r+0xfc>
 8004130:	f000 f868 	bl	8004204 <__malloc_lock>
 8004134:	f8d8 3000 	ldr.w	r3, [r8]
 8004138:	461c      	mov	r4, r3
 800413a:	bb5c      	cbnz	r4, 8004194 <_malloc_r+0x90>
 800413c:	4629      	mov	r1, r5
 800413e:	4638      	mov	r0, r7
 8004140:	f7ff ffc0 	bl	80040c4 <sbrk_aligned>
 8004144:	1c43      	adds	r3, r0, #1
 8004146:	4604      	mov	r4, r0
 8004148:	d155      	bne.n	80041f6 <_malloc_r+0xf2>
 800414a:	f8d8 4000 	ldr.w	r4, [r8]
 800414e:	4626      	mov	r6, r4
 8004150:	2e00      	cmp	r6, #0
 8004152:	d145      	bne.n	80041e0 <_malloc_r+0xdc>
 8004154:	2c00      	cmp	r4, #0
 8004156:	d048      	beq.n	80041ea <_malloc_r+0xe6>
 8004158:	6823      	ldr	r3, [r4, #0]
 800415a:	4631      	mov	r1, r6
 800415c:	4638      	mov	r0, r7
 800415e:	eb04 0903 	add.w	r9, r4, r3
 8004162:	f000 fb61 	bl	8004828 <_sbrk_r>
 8004166:	4581      	cmp	r9, r0
 8004168:	d13f      	bne.n	80041ea <_malloc_r+0xe6>
 800416a:	6821      	ldr	r1, [r4, #0]
 800416c:	4638      	mov	r0, r7
 800416e:	1a6d      	subs	r5, r5, r1
 8004170:	4629      	mov	r1, r5
 8004172:	f7ff ffa7 	bl	80040c4 <sbrk_aligned>
 8004176:	3001      	adds	r0, #1
 8004178:	d037      	beq.n	80041ea <_malloc_r+0xe6>
 800417a:	6823      	ldr	r3, [r4, #0]
 800417c:	442b      	add	r3, r5
 800417e:	6023      	str	r3, [r4, #0]
 8004180:	f8d8 3000 	ldr.w	r3, [r8]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d038      	beq.n	80041fa <_malloc_r+0xf6>
 8004188:	685a      	ldr	r2, [r3, #4]
 800418a:	42a2      	cmp	r2, r4
 800418c:	d12b      	bne.n	80041e6 <_malloc_r+0xe2>
 800418e:	2200      	movs	r2, #0
 8004190:	605a      	str	r2, [r3, #4]
 8004192:	e00f      	b.n	80041b4 <_malloc_r+0xb0>
 8004194:	6822      	ldr	r2, [r4, #0]
 8004196:	1b52      	subs	r2, r2, r5
 8004198:	d41f      	bmi.n	80041da <_malloc_r+0xd6>
 800419a:	2a0b      	cmp	r2, #11
 800419c:	d917      	bls.n	80041ce <_malloc_r+0xca>
 800419e:	1961      	adds	r1, r4, r5
 80041a0:	42a3      	cmp	r3, r4
 80041a2:	6025      	str	r5, [r4, #0]
 80041a4:	bf18      	it	ne
 80041a6:	6059      	strne	r1, [r3, #4]
 80041a8:	6863      	ldr	r3, [r4, #4]
 80041aa:	bf08      	it	eq
 80041ac:	f8c8 1000 	streq.w	r1, [r8]
 80041b0:	5162      	str	r2, [r4, r5]
 80041b2:	604b      	str	r3, [r1, #4]
 80041b4:	4638      	mov	r0, r7
 80041b6:	f104 060b 	add.w	r6, r4, #11
 80041ba:	f000 f829 	bl	8004210 <__malloc_unlock>
 80041be:	f026 0607 	bic.w	r6, r6, #7
 80041c2:	1d23      	adds	r3, r4, #4
 80041c4:	1af2      	subs	r2, r6, r3
 80041c6:	d0ae      	beq.n	8004126 <_malloc_r+0x22>
 80041c8:	1b9b      	subs	r3, r3, r6
 80041ca:	50a3      	str	r3, [r4, r2]
 80041cc:	e7ab      	b.n	8004126 <_malloc_r+0x22>
 80041ce:	42a3      	cmp	r3, r4
 80041d0:	6862      	ldr	r2, [r4, #4]
 80041d2:	d1dd      	bne.n	8004190 <_malloc_r+0x8c>
 80041d4:	f8c8 2000 	str.w	r2, [r8]
 80041d8:	e7ec      	b.n	80041b4 <_malloc_r+0xb0>
 80041da:	4623      	mov	r3, r4
 80041dc:	6864      	ldr	r4, [r4, #4]
 80041de:	e7ac      	b.n	800413a <_malloc_r+0x36>
 80041e0:	4634      	mov	r4, r6
 80041e2:	6876      	ldr	r6, [r6, #4]
 80041e4:	e7b4      	b.n	8004150 <_malloc_r+0x4c>
 80041e6:	4613      	mov	r3, r2
 80041e8:	e7cc      	b.n	8004184 <_malloc_r+0x80>
 80041ea:	230c      	movs	r3, #12
 80041ec:	4638      	mov	r0, r7
 80041ee:	603b      	str	r3, [r7, #0]
 80041f0:	f000 f80e 	bl	8004210 <__malloc_unlock>
 80041f4:	e797      	b.n	8004126 <_malloc_r+0x22>
 80041f6:	6025      	str	r5, [r4, #0]
 80041f8:	e7dc      	b.n	80041b4 <_malloc_r+0xb0>
 80041fa:	605b      	str	r3, [r3, #4]
 80041fc:	deff      	udf	#255	; 0xff
 80041fe:	bf00      	nop
 8004200:	2000035c 	.word	0x2000035c

08004204 <__malloc_lock>:
 8004204:	4801      	ldr	r0, [pc, #4]	; (800420c <__malloc_lock+0x8>)
 8004206:	f7ff bf13 	b.w	8004030 <__retarget_lock_acquire_recursive>
 800420a:	bf00      	nop
 800420c:	20000358 	.word	0x20000358

08004210 <__malloc_unlock>:
 8004210:	4801      	ldr	r0, [pc, #4]	; (8004218 <__malloc_unlock+0x8>)
 8004212:	f7ff bf0e 	b.w	8004032 <__retarget_lock_release_recursive>
 8004216:	bf00      	nop
 8004218:	20000358 	.word	0x20000358

0800421c <__ssputs_r>:
 800421c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004220:	461f      	mov	r7, r3
 8004222:	688e      	ldr	r6, [r1, #8]
 8004224:	4682      	mov	sl, r0
 8004226:	42be      	cmp	r6, r7
 8004228:	460c      	mov	r4, r1
 800422a:	4690      	mov	r8, r2
 800422c:	680b      	ldr	r3, [r1, #0]
 800422e:	d82c      	bhi.n	800428a <__ssputs_r+0x6e>
 8004230:	898a      	ldrh	r2, [r1, #12]
 8004232:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004236:	d026      	beq.n	8004286 <__ssputs_r+0x6a>
 8004238:	6965      	ldr	r5, [r4, #20]
 800423a:	6909      	ldr	r1, [r1, #16]
 800423c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004240:	eba3 0901 	sub.w	r9, r3, r1
 8004244:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004248:	1c7b      	adds	r3, r7, #1
 800424a:	444b      	add	r3, r9
 800424c:	106d      	asrs	r5, r5, #1
 800424e:	429d      	cmp	r5, r3
 8004250:	bf38      	it	cc
 8004252:	461d      	movcc	r5, r3
 8004254:	0553      	lsls	r3, r2, #21
 8004256:	d527      	bpl.n	80042a8 <__ssputs_r+0x8c>
 8004258:	4629      	mov	r1, r5
 800425a:	f7ff ff53 	bl	8004104 <_malloc_r>
 800425e:	4606      	mov	r6, r0
 8004260:	b360      	cbz	r0, 80042bc <__ssputs_r+0xa0>
 8004262:	464a      	mov	r2, r9
 8004264:	6921      	ldr	r1, [r4, #16]
 8004266:	f000 fafd 	bl	8004864 <memcpy>
 800426a:	89a3      	ldrh	r3, [r4, #12]
 800426c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004274:	81a3      	strh	r3, [r4, #12]
 8004276:	6126      	str	r6, [r4, #16]
 8004278:	444e      	add	r6, r9
 800427a:	6026      	str	r6, [r4, #0]
 800427c:	463e      	mov	r6, r7
 800427e:	6165      	str	r5, [r4, #20]
 8004280:	eba5 0509 	sub.w	r5, r5, r9
 8004284:	60a5      	str	r5, [r4, #8]
 8004286:	42be      	cmp	r6, r7
 8004288:	d900      	bls.n	800428c <__ssputs_r+0x70>
 800428a:	463e      	mov	r6, r7
 800428c:	4632      	mov	r2, r6
 800428e:	4641      	mov	r1, r8
 8004290:	6820      	ldr	r0, [r4, #0]
 8004292:	f000 faaf 	bl	80047f4 <memmove>
 8004296:	2000      	movs	r0, #0
 8004298:	68a3      	ldr	r3, [r4, #8]
 800429a:	1b9b      	subs	r3, r3, r6
 800429c:	60a3      	str	r3, [r4, #8]
 800429e:	6823      	ldr	r3, [r4, #0]
 80042a0:	4433      	add	r3, r6
 80042a2:	6023      	str	r3, [r4, #0]
 80042a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042a8:	462a      	mov	r2, r5
 80042aa:	f000 fae9 	bl	8004880 <_realloc_r>
 80042ae:	4606      	mov	r6, r0
 80042b0:	2800      	cmp	r0, #0
 80042b2:	d1e0      	bne.n	8004276 <__ssputs_r+0x5a>
 80042b4:	4650      	mov	r0, sl
 80042b6:	6921      	ldr	r1, [r4, #16]
 80042b8:	f7ff febc 	bl	8004034 <_free_r>
 80042bc:	230c      	movs	r3, #12
 80042be:	f8ca 3000 	str.w	r3, [sl]
 80042c2:	89a3      	ldrh	r3, [r4, #12]
 80042c4:	f04f 30ff 	mov.w	r0, #4294967295
 80042c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042cc:	81a3      	strh	r3, [r4, #12]
 80042ce:	e7e9      	b.n	80042a4 <__ssputs_r+0x88>

080042d0 <_svfiprintf_r>:
 80042d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042d4:	4698      	mov	r8, r3
 80042d6:	898b      	ldrh	r3, [r1, #12]
 80042d8:	4607      	mov	r7, r0
 80042da:	061b      	lsls	r3, r3, #24
 80042dc:	460d      	mov	r5, r1
 80042de:	4614      	mov	r4, r2
 80042e0:	b09d      	sub	sp, #116	; 0x74
 80042e2:	d50e      	bpl.n	8004302 <_svfiprintf_r+0x32>
 80042e4:	690b      	ldr	r3, [r1, #16]
 80042e6:	b963      	cbnz	r3, 8004302 <_svfiprintf_r+0x32>
 80042e8:	2140      	movs	r1, #64	; 0x40
 80042ea:	f7ff ff0b 	bl	8004104 <_malloc_r>
 80042ee:	6028      	str	r0, [r5, #0]
 80042f0:	6128      	str	r0, [r5, #16]
 80042f2:	b920      	cbnz	r0, 80042fe <_svfiprintf_r+0x2e>
 80042f4:	230c      	movs	r3, #12
 80042f6:	603b      	str	r3, [r7, #0]
 80042f8:	f04f 30ff 	mov.w	r0, #4294967295
 80042fc:	e0d0      	b.n	80044a0 <_svfiprintf_r+0x1d0>
 80042fe:	2340      	movs	r3, #64	; 0x40
 8004300:	616b      	str	r3, [r5, #20]
 8004302:	2300      	movs	r3, #0
 8004304:	9309      	str	r3, [sp, #36]	; 0x24
 8004306:	2320      	movs	r3, #32
 8004308:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800430c:	2330      	movs	r3, #48	; 0x30
 800430e:	f04f 0901 	mov.w	r9, #1
 8004312:	f8cd 800c 	str.w	r8, [sp, #12]
 8004316:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80044b8 <_svfiprintf_r+0x1e8>
 800431a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800431e:	4623      	mov	r3, r4
 8004320:	469a      	mov	sl, r3
 8004322:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004326:	b10a      	cbz	r2, 800432c <_svfiprintf_r+0x5c>
 8004328:	2a25      	cmp	r2, #37	; 0x25
 800432a:	d1f9      	bne.n	8004320 <_svfiprintf_r+0x50>
 800432c:	ebba 0b04 	subs.w	fp, sl, r4
 8004330:	d00b      	beq.n	800434a <_svfiprintf_r+0x7a>
 8004332:	465b      	mov	r3, fp
 8004334:	4622      	mov	r2, r4
 8004336:	4629      	mov	r1, r5
 8004338:	4638      	mov	r0, r7
 800433a:	f7ff ff6f 	bl	800421c <__ssputs_r>
 800433e:	3001      	adds	r0, #1
 8004340:	f000 80a9 	beq.w	8004496 <_svfiprintf_r+0x1c6>
 8004344:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004346:	445a      	add	r2, fp
 8004348:	9209      	str	r2, [sp, #36]	; 0x24
 800434a:	f89a 3000 	ldrb.w	r3, [sl]
 800434e:	2b00      	cmp	r3, #0
 8004350:	f000 80a1 	beq.w	8004496 <_svfiprintf_r+0x1c6>
 8004354:	2300      	movs	r3, #0
 8004356:	f04f 32ff 	mov.w	r2, #4294967295
 800435a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800435e:	f10a 0a01 	add.w	sl, sl, #1
 8004362:	9304      	str	r3, [sp, #16]
 8004364:	9307      	str	r3, [sp, #28]
 8004366:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800436a:	931a      	str	r3, [sp, #104]	; 0x68
 800436c:	4654      	mov	r4, sl
 800436e:	2205      	movs	r2, #5
 8004370:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004374:	4850      	ldr	r0, [pc, #320]	; (80044b8 <_svfiprintf_r+0x1e8>)
 8004376:	f000 fa67 	bl	8004848 <memchr>
 800437a:	9a04      	ldr	r2, [sp, #16]
 800437c:	b9d8      	cbnz	r0, 80043b6 <_svfiprintf_r+0xe6>
 800437e:	06d0      	lsls	r0, r2, #27
 8004380:	bf44      	itt	mi
 8004382:	2320      	movmi	r3, #32
 8004384:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004388:	0711      	lsls	r1, r2, #28
 800438a:	bf44      	itt	mi
 800438c:	232b      	movmi	r3, #43	; 0x2b
 800438e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004392:	f89a 3000 	ldrb.w	r3, [sl]
 8004396:	2b2a      	cmp	r3, #42	; 0x2a
 8004398:	d015      	beq.n	80043c6 <_svfiprintf_r+0xf6>
 800439a:	4654      	mov	r4, sl
 800439c:	2000      	movs	r0, #0
 800439e:	f04f 0c0a 	mov.w	ip, #10
 80043a2:	9a07      	ldr	r2, [sp, #28]
 80043a4:	4621      	mov	r1, r4
 80043a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80043aa:	3b30      	subs	r3, #48	; 0x30
 80043ac:	2b09      	cmp	r3, #9
 80043ae:	d94d      	bls.n	800444c <_svfiprintf_r+0x17c>
 80043b0:	b1b0      	cbz	r0, 80043e0 <_svfiprintf_r+0x110>
 80043b2:	9207      	str	r2, [sp, #28]
 80043b4:	e014      	b.n	80043e0 <_svfiprintf_r+0x110>
 80043b6:	eba0 0308 	sub.w	r3, r0, r8
 80043ba:	fa09 f303 	lsl.w	r3, r9, r3
 80043be:	4313      	orrs	r3, r2
 80043c0:	46a2      	mov	sl, r4
 80043c2:	9304      	str	r3, [sp, #16]
 80043c4:	e7d2      	b.n	800436c <_svfiprintf_r+0x9c>
 80043c6:	9b03      	ldr	r3, [sp, #12]
 80043c8:	1d19      	adds	r1, r3, #4
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	9103      	str	r1, [sp, #12]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	bfbb      	ittet	lt
 80043d2:	425b      	neglt	r3, r3
 80043d4:	f042 0202 	orrlt.w	r2, r2, #2
 80043d8:	9307      	strge	r3, [sp, #28]
 80043da:	9307      	strlt	r3, [sp, #28]
 80043dc:	bfb8      	it	lt
 80043de:	9204      	strlt	r2, [sp, #16]
 80043e0:	7823      	ldrb	r3, [r4, #0]
 80043e2:	2b2e      	cmp	r3, #46	; 0x2e
 80043e4:	d10c      	bne.n	8004400 <_svfiprintf_r+0x130>
 80043e6:	7863      	ldrb	r3, [r4, #1]
 80043e8:	2b2a      	cmp	r3, #42	; 0x2a
 80043ea:	d134      	bne.n	8004456 <_svfiprintf_r+0x186>
 80043ec:	9b03      	ldr	r3, [sp, #12]
 80043ee:	3402      	adds	r4, #2
 80043f0:	1d1a      	adds	r2, r3, #4
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	9203      	str	r2, [sp, #12]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	bfb8      	it	lt
 80043fa:	f04f 33ff 	movlt.w	r3, #4294967295
 80043fe:	9305      	str	r3, [sp, #20]
 8004400:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80044bc <_svfiprintf_r+0x1ec>
 8004404:	2203      	movs	r2, #3
 8004406:	4650      	mov	r0, sl
 8004408:	7821      	ldrb	r1, [r4, #0]
 800440a:	f000 fa1d 	bl	8004848 <memchr>
 800440e:	b138      	cbz	r0, 8004420 <_svfiprintf_r+0x150>
 8004410:	2240      	movs	r2, #64	; 0x40
 8004412:	9b04      	ldr	r3, [sp, #16]
 8004414:	eba0 000a 	sub.w	r0, r0, sl
 8004418:	4082      	lsls	r2, r0
 800441a:	4313      	orrs	r3, r2
 800441c:	3401      	adds	r4, #1
 800441e:	9304      	str	r3, [sp, #16]
 8004420:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004424:	2206      	movs	r2, #6
 8004426:	4826      	ldr	r0, [pc, #152]	; (80044c0 <_svfiprintf_r+0x1f0>)
 8004428:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800442c:	f000 fa0c 	bl	8004848 <memchr>
 8004430:	2800      	cmp	r0, #0
 8004432:	d038      	beq.n	80044a6 <_svfiprintf_r+0x1d6>
 8004434:	4b23      	ldr	r3, [pc, #140]	; (80044c4 <_svfiprintf_r+0x1f4>)
 8004436:	bb1b      	cbnz	r3, 8004480 <_svfiprintf_r+0x1b0>
 8004438:	9b03      	ldr	r3, [sp, #12]
 800443a:	3307      	adds	r3, #7
 800443c:	f023 0307 	bic.w	r3, r3, #7
 8004440:	3308      	adds	r3, #8
 8004442:	9303      	str	r3, [sp, #12]
 8004444:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004446:	4433      	add	r3, r6
 8004448:	9309      	str	r3, [sp, #36]	; 0x24
 800444a:	e768      	b.n	800431e <_svfiprintf_r+0x4e>
 800444c:	460c      	mov	r4, r1
 800444e:	2001      	movs	r0, #1
 8004450:	fb0c 3202 	mla	r2, ip, r2, r3
 8004454:	e7a6      	b.n	80043a4 <_svfiprintf_r+0xd4>
 8004456:	2300      	movs	r3, #0
 8004458:	f04f 0c0a 	mov.w	ip, #10
 800445c:	4619      	mov	r1, r3
 800445e:	3401      	adds	r4, #1
 8004460:	9305      	str	r3, [sp, #20]
 8004462:	4620      	mov	r0, r4
 8004464:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004468:	3a30      	subs	r2, #48	; 0x30
 800446a:	2a09      	cmp	r2, #9
 800446c:	d903      	bls.n	8004476 <_svfiprintf_r+0x1a6>
 800446e:	2b00      	cmp	r3, #0
 8004470:	d0c6      	beq.n	8004400 <_svfiprintf_r+0x130>
 8004472:	9105      	str	r1, [sp, #20]
 8004474:	e7c4      	b.n	8004400 <_svfiprintf_r+0x130>
 8004476:	4604      	mov	r4, r0
 8004478:	2301      	movs	r3, #1
 800447a:	fb0c 2101 	mla	r1, ip, r1, r2
 800447e:	e7f0      	b.n	8004462 <_svfiprintf_r+0x192>
 8004480:	ab03      	add	r3, sp, #12
 8004482:	9300      	str	r3, [sp, #0]
 8004484:	462a      	mov	r2, r5
 8004486:	4638      	mov	r0, r7
 8004488:	4b0f      	ldr	r3, [pc, #60]	; (80044c8 <_svfiprintf_r+0x1f8>)
 800448a:	a904      	add	r1, sp, #16
 800448c:	f3af 8000 	nop.w
 8004490:	1c42      	adds	r2, r0, #1
 8004492:	4606      	mov	r6, r0
 8004494:	d1d6      	bne.n	8004444 <_svfiprintf_r+0x174>
 8004496:	89ab      	ldrh	r3, [r5, #12]
 8004498:	065b      	lsls	r3, r3, #25
 800449a:	f53f af2d 	bmi.w	80042f8 <_svfiprintf_r+0x28>
 800449e:	9809      	ldr	r0, [sp, #36]	; 0x24
 80044a0:	b01d      	add	sp, #116	; 0x74
 80044a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044a6:	ab03      	add	r3, sp, #12
 80044a8:	9300      	str	r3, [sp, #0]
 80044aa:	462a      	mov	r2, r5
 80044ac:	4638      	mov	r0, r7
 80044ae:	4b06      	ldr	r3, [pc, #24]	; (80044c8 <_svfiprintf_r+0x1f8>)
 80044b0:	a904      	add	r1, sp, #16
 80044b2:	f000 f87d 	bl	80045b0 <_printf_i>
 80044b6:	e7eb      	b.n	8004490 <_svfiprintf_r+0x1c0>
 80044b8:	0800494e 	.word	0x0800494e
 80044bc:	08004954 	.word	0x08004954
 80044c0:	08004958 	.word	0x08004958
 80044c4:	00000000 	.word	0x00000000
 80044c8:	0800421d 	.word	0x0800421d

080044cc <_printf_common>:
 80044cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044d0:	4616      	mov	r6, r2
 80044d2:	4699      	mov	r9, r3
 80044d4:	688a      	ldr	r2, [r1, #8]
 80044d6:	690b      	ldr	r3, [r1, #16]
 80044d8:	4607      	mov	r7, r0
 80044da:	4293      	cmp	r3, r2
 80044dc:	bfb8      	it	lt
 80044de:	4613      	movlt	r3, r2
 80044e0:	6033      	str	r3, [r6, #0]
 80044e2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80044e6:	460c      	mov	r4, r1
 80044e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80044ec:	b10a      	cbz	r2, 80044f2 <_printf_common+0x26>
 80044ee:	3301      	adds	r3, #1
 80044f0:	6033      	str	r3, [r6, #0]
 80044f2:	6823      	ldr	r3, [r4, #0]
 80044f4:	0699      	lsls	r1, r3, #26
 80044f6:	bf42      	ittt	mi
 80044f8:	6833      	ldrmi	r3, [r6, #0]
 80044fa:	3302      	addmi	r3, #2
 80044fc:	6033      	strmi	r3, [r6, #0]
 80044fe:	6825      	ldr	r5, [r4, #0]
 8004500:	f015 0506 	ands.w	r5, r5, #6
 8004504:	d106      	bne.n	8004514 <_printf_common+0x48>
 8004506:	f104 0a19 	add.w	sl, r4, #25
 800450a:	68e3      	ldr	r3, [r4, #12]
 800450c:	6832      	ldr	r2, [r6, #0]
 800450e:	1a9b      	subs	r3, r3, r2
 8004510:	42ab      	cmp	r3, r5
 8004512:	dc2b      	bgt.n	800456c <_printf_common+0xa0>
 8004514:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004518:	1e13      	subs	r3, r2, #0
 800451a:	6822      	ldr	r2, [r4, #0]
 800451c:	bf18      	it	ne
 800451e:	2301      	movne	r3, #1
 8004520:	0692      	lsls	r2, r2, #26
 8004522:	d430      	bmi.n	8004586 <_printf_common+0xba>
 8004524:	4649      	mov	r1, r9
 8004526:	4638      	mov	r0, r7
 8004528:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800452c:	47c0      	blx	r8
 800452e:	3001      	adds	r0, #1
 8004530:	d023      	beq.n	800457a <_printf_common+0xae>
 8004532:	6823      	ldr	r3, [r4, #0]
 8004534:	6922      	ldr	r2, [r4, #16]
 8004536:	f003 0306 	and.w	r3, r3, #6
 800453a:	2b04      	cmp	r3, #4
 800453c:	bf14      	ite	ne
 800453e:	2500      	movne	r5, #0
 8004540:	6833      	ldreq	r3, [r6, #0]
 8004542:	f04f 0600 	mov.w	r6, #0
 8004546:	bf08      	it	eq
 8004548:	68e5      	ldreq	r5, [r4, #12]
 800454a:	f104 041a 	add.w	r4, r4, #26
 800454e:	bf08      	it	eq
 8004550:	1aed      	subeq	r5, r5, r3
 8004552:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004556:	bf08      	it	eq
 8004558:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800455c:	4293      	cmp	r3, r2
 800455e:	bfc4      	itt	gt
 8004560:	1a9b      	subgt	r3, r3, r2
 8004562:	18ed      	addgt	r5, r5, r3
 8004564:	42b5      	cmp	r5, r6
 8004566:	d11a      	bne.n	800459e <_printf_common+0xd2>
 8004568:	2000      	movs	r0, #0
 800456a:	e008      	b.n	800457e <_printf_common+0xb2>
 800456c:	2301      	movs	r3, #1
 800456e:	4652      	mov	r2, sl
 8004570:	4649      	mov	r1, r9
 8004572:	4638      	mov	r0, r7
 8004574:	47c0      	blx	r8
 8004576:	3001      	adds	r0, #1
 8004578:	d103      	bne.n	8004582 <_printf_common+0xb6>
 800457a:	f04f 30ff 	mov.w	r0, #4294967295
 800457e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004582:	3501      	adds	r5, #1
 8004584:	e7c1      	b.n	800450a <_printf_common+0x3e>
 8004586:	2030      	movs	r0, #48	; 0x30
 8004588:	18e1      	adds	r1, r4, r3
 800458a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800458e:	1c5a      	adds	r2, r3, #1
 8004590:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004594:	4422      	add	r2, r4
 8004596:	3302      	adds	r3, #2
 8004598:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800459c:	e7c2      	b.n	8004524 <_printf_common+0x58>
 800459e:	2301      	movs	r3, #1
 80045a0:	4622      	mov	r2, r4
 80045a2:	4649      	mov	r1, r9
 80045a4:	4638      	mov	r0, r7
 80045a6:	47c0      	blx	r8
 80045a8:	3001      	adds	r0, #1
 80045aa:	d0e6      	beq.n	800457a <_printf_common+0xae>
 80045ac:	3601      	adds	r6, #1
 80045ae:	e7d9      	b.n	8004564 <_printf_common+0x98>

080045b0 <_printf_i>:
 80045b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80045b4:	7e0f      	ldrb	r7, [r1, #24]
 80045b6:	4691      	mov	r9, r2
 80045b8:	2f78      	cmp	r7, #120	; 0x78
 80045ba:	4680      	mov	r8, r0
 80045bc:	460c      	mov	r4, r1
 80045be:	469a      	mov	sl, r3
 80045c0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80045c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80045c6:	d807      	bhi.n	80045d8 <_printf_i+0x28>
 80045c8:	2f62      	cmp	r7, #98	; 0x62
 80045ca:	d80a      	bhi.n	80045e2 <_printf_i+0x32>
 80045cc:	2f00      	cmp	r7, #0
 80045ce:	f000 80d5 	beq.w	800477c <_printf_i+0x1cc>
 80045d2:	2f58      	cmp	r7, #88	; 0x58
 80045d4:	f000 80c1 	beq.w	800475a <_printf_i+0x1aa>
 80045d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80045e0:	e03a      	b.n	8004658 <_printf_i+0xa8>
 80045e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80045e6:	2b15      	cmp	r3, #21
 80045e8:	d8f6      	bhi.n	80045d8 <_printf_i+0x28>
 80045ea:	a101      	add	r1, pc, #4	; (adr r1, 80045f0 <_printf_i+0x40>)
 80045ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80045f0:	08004649 	.word	0x08004649
 80045f4:	0800465d 	.word	0x0800465d
 80045f8:	080045d9 	.word	0x080045d9
 80045fc:	080045d9 	.word	0x080045d9
 8004600:	080045d9 	.word	0x080045d9
 8004604:	080045d9 	.word	0x080045d9
 8004608:	0800465d 	.word	0x0800465d
 800460c:	080045d9 	.word	0x080045d9
 8004610:	080045d9 	.word	0x080045d9
 8004614:	080045d9 	.word	0x080045d9
 8004618:	080045d9 	.word	0x080045d9
 800461c:	08004763 	.word	0x08004763
 8004620:	08004689 	.word	0x08004689
 8004624:	0800471d 	.word	0x0800471d
 8004628:	080045d9 	.word	0x080045d9
 800462c:	080045d9 	.word	0x080045d9
 8004630:	08004785 	.word	0x08004785
 8004634:	080045d9 	.word	0x080045d9
 8004638:	08004689 	.word	0x08004689
 800463c:	080045d9 	.word	0x080045d9
 8004640:	080045d9 	.word	0x080045d9
 8004644:	08004725 	.word	0x08004725
 8004648:	682b      	ldr	r3, [r5, #0]
 800464a:	1d1a      	adds	r2, r3, #4
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	602a      	str	r2, [r5, #0]
 8004650:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004654:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004658:	2301      	movs	r3, #1
 800465a:	e0a0      	b.n	800479e <_printf_i+0x1ee>
 800465c:	6820      	ldr	r0, [r4, #0]
 800465e:	682b      	ldr	r3, [r5, #0]
 8004660:	0607      	lsls	r7, r0, #24
 8004662:	f103 0104 	add.w	r1, r3, #4
 8004666:	6029      	str	r1, [r5, #0]
 8004668:	d501      	bpl.n	800466e <_printf_i+0xbe>
 800466a:	681e      	ldr	r6, [r3, #0]
 800466c:	e003      	b.n	8004676 <_printf_i+0xc6>
 800466e:	0646      	lsls	r6, r0, #25
 8004670:	d5fb      	bpl.n	800466a <_printf_i+0xba>
 8004672:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004676:	2e00      	cmp	r6, #0
 8004678:	da03      	bge.n	8004682 <_printf_i+0xd2>
 800467a:	232d      	movs	r3, #45	; 0x2d
 800467c:	4276      	negs	r6, r6
 800467e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004682:	230a      	movs	r3, #10
 8004684:	4859      	ldr	r0, [pc, #356]	; (80047ec <_printf_i+0x23c>)
 8004686:	e012      	b.n	80046ae <_printf_i+0xfe>
 8004688:	682b      	ldr	r3, [r5, #0]
 800468a:	6820      	ldr	r0, [r4, #0]
 800468c:	1d19      	adds	r1, r3, #4
 800468e:	6029      	str	r1, [r5, #0]
 8004690:	0605      	lsls	r5, r0, #24
 8004692:	d501      	bpl.n	8004698 <_printf_i+0xe8>
 8004694:	681e      	ldr	r6, [r3, #0]
 8004696:	e002      	b.n	800469e <_printf_i+0xee>
 8004698:	0641      	lsls	r1, r0, #25
 800469a:	d5fb      	bpl.n	8004694 <_printf_i+0xe4>
 800469c:	881e      	ldrh	r6, [r3, #0]
 800469e:	2f6f      	cmp	r7, #111	; 0x6f
 80046a0:	bf0c      	ite	eq
 80046a2:	2308      	moveq	r3, #8
 80046a4:	230a      	movne	r3, #10
 80046a6:	4851      	ldr	r0, [pc, #324]	; (80047ec <_printf_i+0x23c>)
 80046a8:	2100      	movs	r1, #0
 80046aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80046ae:	6865      	ldr	r5, [r4, #4]
 80046b0:	2d00      	cmp	r5, #0
 80046b2:	bfa8      	it	ge
 80046b4:	6821      	ldrge	r1, [r4, #0]
 80046b6:	60a5      	str	r5, [r4, #8]
 80046b8:	bfa4      	itt	ge
 80046ba:	f021 0104 	bicge.w	r1, r1, #4
 80046be:	6021      	strge	r1, [r4, #0]
 80046c0:	b90e      	cbnz	r6, 80046c6 <_printf_i+0x116>
 80046c2:	2d00      	cmp	r5, #0
 80046c4:	d04b      	beq.n	800475e <_printf_i+0x1ae>
 80046c6:	4615      	mov	r5, r2
 80046c8:	fbb6 f1f3 	udiv	r1, r6, r3
 80046cc:	fb03 6711 	mls	r7, r3, r1, r6
 80046d0:	5dc7      	ldrb	r7, [r0, r7]
 80046d2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80046d6:	4637      	mov	r7, r6
 80046d8:	42bb      	cmp	r3, r7
 80046da:	460e      	mov	r6, r1
 80046dc:	d9f4      	bls.n	80046c8 <_printf_i+0x118>
 80046de:	2b08      	cmp	r3, #8
 80046e0:	d10b      	bne.n	80046fa <_printf_i+0x14a>
 80046e2:	6823      	ldr	r3, [r4, #0]
 80046e4:	07de      	lsls	r6, r3, #31
 80046e6:	d508      	bpl.n	80046fa <_printf_i+0x14a>
 80046e8:	6923      	ldr	r3, [r4, #16]
 80046ea:	6861      	ldr	r1, [r4, #4]
 80046ec:	4299      	cmp	r1, r3
 80046ee:	bfde      	ittt	le
 80046f0:	2330      	movle	r3, #48	; 0x30
 80046f2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80046f6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80046fa:	1b52      	subs	r2, r2, r5
 80046fc:	6122      	str	r2, [r4, #16]
 80046fe:	464b      	mov	r3, r9
 8004700:	4621      	mov	r1, r4
 8004702:	4640      	mov	r0, r8
 8004704:	f8cd a000 	str.w	sl, [sp]
 8004708:	aa03      	add	r2, sp, #12
 800470a:	f7ff fedf 	bl	80044cc <_printf_common>
 800470e:	3001      	adds	r0, #1
 8004710:	d14a      	bne.n	80047a8 <_printf_i+0x1f8>
 8004712:	f04f 30ff 	mov.w	r0, #4294967295
 8004716:	b004      	add	sp, #16
 8004718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800471c:	6823      	ldr	r3, [r4, #0]
 800471e:	f043 0320 	orr.w	r3, r3, #32
 8004722:	6023      	str	r3, [r4, #0]
 8004724:	2778      	movs	r7, #120	; 0x78
 8004726:	4832      	ldr	r0, [pc, #200]	; (80047f0 <_printf_i+0x240>)
 8004728:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800472c:	6823      	ldr	r3, [r4, #0]
 800472e:	6829      	ldr	r1, [r5, #0]
 8004730:	061f      	lsls	r7, r3, #24
 8004732:	f851 6b04 	ldr.w	r6, [r1], #4
 8004736:	d402      	bmi.n	800473e <_printf_i+0x18e>
 8004738:	065f      	lsls	r7, r3, #25
 800473a:	bf48      	it	mi
 800473c:	b2b6      	uxthmi	r6, r6
 800473e:	07df      	lsls	r7, r3, #31
 8004740:	bf48      	it	mi
 8004742:	f043 0320 	orrmi.w	r3, r3, #32
 8004746:	6029      	str	r1, [r5, #0]
 8004748:	bf48      	it	mi
 800474a:	6023      	strmi	r3, [r4, #0]
 800474c:	b91e      	cbnz	r6, 8004756 <_printf_i+0x1a6>
 800474e:	6823      	ldr	r3, [r4, #0]
 8004750:	f023 0320 	bic.w	r3, r3, #32
 8004754:	6023      	str	r3, [r4, #0]
 8004756:	2310      	movs	r3, #16
 8004758:	e7a6      	b.n	80046a8 <_printf_i+0xf8>
 800475a:	4824      	ldr	r0, [pc, #144]	; (80047ec <_printf_i+0x23c>)
 800475c:	e7e4      	b.n	8004728 <_printf_i+0x178>
 800475e:	4615      	mov	r5, r2
 8004760:	e7bd      	b.n	80046de <_printf_i+0x12e>
 8004762:	682b      	ldr	r3, [r5, #0]
 8004764:	6826      	ldr	r6, [r4, #0]
 8004766:	1d18      	adds	r0, r3, #4
 8004768:	6961      	ldr	r1, [r4, #20]
 800476a:	6028      	str	r0, [r5, #0]
 800476c:	0635      	lsls	r5, r6, #24
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	d501      	bpl.n	8004776 <_printf_i+0x1c6>
 8004772:	6019      	str	r1, [r3, #0]
 8004774:	e002      	b.n	800477c <_printf_i+0x1cc>
 8004776:	0670      	lsls	r0, r6, #25
 8004778:	d5fb      	bpl.n	8004772 <_printf_i+0x1c2>
 800477a:	8019      	strh	r1, [r3, #0]
 800477c:	2300      	movs	r3, #0
 800477e:	4615      	mov	r5, r2
 8004780:	6123      	str	r3, [r4, #16]
 8004782:	e7bc      	b.n	80046fe <_printf_i+0x14e>
 8004784:	682b      	ldr	r3, [r5, #0]
 8004786:	2100      	movs	r1, #0
 8004788:	1d1a      	adds	r2, r3, #4
 800478a:	602a      	str	r2, [r5, #0]
 800478c:	681d      	ldr	r5, [r3, #0]
 800478e:	6862      	ldr	r2, [r4, #4]
 8004790:	4628      	mov	r0, r5
 8004792:	f000 f859 	bl	8004848 <memchr>
 8004796:	b108      	cbz	r0, 800479c <_printf_i+0x1ec>
 8004798:	1b40      	subs	r0, r0, r5
 800479a:	6060      	str	r0, [r4, #4]
 800479c:	6863      	ldr	r3, [r4, #4]
 800479e:	6123      	str	r3, [r4, #16]
 80047a0:	2300      	movs	r3, #0
 80047a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047a6:	e7aa      	b.n	80046fe <_printf_i+0x14e>
 80047a8:	462a      	mov	r2, r5
 80047aa:	4649      	mov	r1, r9
 80047ac:	4640      	mov	r0, r8
 80047ae:	6923      	ldr	r3, [r4, #16]
 80047b0:	47d0      	blx	sl
 80047b2:	3001      	adds	r0, #1
 80047b4:	d0ad      	beq.n	8004712 <_printf_i+0x162>
 80047b6:	6823      	ldr	r3, [r4, #0]
 80047b8:	079b      	lsls	r3, r3, #30
 80047ba:	d413      	bmi.n	80047e4 <_printf_i+0x234>
 80047bc:	68e0      	ldr	r0, [r4, #12]
 80047be:	9b03      	ldr	r3, [sp, #12]
 80047c0:	4298      	cmp	r0, r3
 80047c2:	bfb8      	it	lt
 80047c4:	4618      	movlt	r0, r3
 80047c6:	e7a6      	b.n	8004716 <_printf_i+0x166>
 80047c8:	2301      	movs	r3, #1
 80047ca:	4632      	mov	r2, r6
 80047cc:	4649      	mov	r1, r9
 80047ce:	4640      	mov	r0, r8
 80047d0:	47d0      	blx	sl
 80047d2:	3001      	adds	r0, #1
 80047d4:	d09d      	beq.n	8004712 <_printf_i+0x162>
 80047d6:	3501      	adds	r5, #1
 80047d8:	68e3      	ldr	r3, [r4, #12]
 80047da:	9903      	ldr	r1, [sp, #12]
 80047dc:	1a5b      	subs	r3, r3, r1
 80047de:	42ab      	cmp	r3, r5
 80047e0:	dcf2      	bgt.n	80047c8 <_printf_i+0x218>
 80047e2:	e7eb      	b.n	80047bc <_printf_i+0x20c>
 80047e4:	2500      	movs	r5, #0
 80047e6:	f104 0619 	add.w	r6, r4, #25
 80047ea:	e7f5      	b.n	80047d8 <_printf_i+0x228>
 80047ec:	0800495f 	.word	0x0800495f
 80047f0:	08004970 	.word	0x08004970

080047f4 <memmove>:
 80047f4:	4288      	cmp	r0, r1
 80047f6:	b510      	push	{r4, lr}
 80047f8:	eb01 0402 	add.w	r4, r1, r2
 80047fc:	d902      	bls.n	8004804 <memmove+0x10>
 80047fe:	4284      	cmp	r4, r0
 8004800:	4623      	mov	r3, r4
 8004802:	d807      	bhi.n	8004814 <memmove+0x20>
 8004804:	1e43      	subs	r3, r0, #1
 8004806:	42a1      	cmp	r1, r4
 8004808:	d008      	beq.n	800481c <memmove+0x28>
 800480a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800480e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004812:	e7f8      	b.n	8004806 <memmove+0x12>
 8004814:	4601      	mov	r1, r0
 8004816:	4402      	add	r2, r0
 8004818:	428a      	cmp	r2, r1
 800481a:	d100      	bne.n	800481e <memmove+0x2a>
 800481c:	bd10      	pop	{r4, pc}
 800481e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004822:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004826:	e7f7      	b.n	8004818 <memmove+0x24>

08004828 <_sbrk_r>:
 8004828:	b538      	push	{r3, r4, r5, lr}
 800482a:	2300      	movs	r3, #0
 800482c:	4d05      	ldr	r5, [pc, #20]	; (8004844 <_sbrk_r+0x1c>)
 800482e:	4604      	mov	r4, r0
 8004830:	4608      	mov	r0, r1
 8004832:	602b      	str	r3, [r5, #0]
 8004834:	f7fc f812 	bl	800085c <_sbrk>
 8004838:	1c43      	adds	r3, r0, #1
 800483a:	d102      	bne.n	8004842 <_sbrk_r+0x1a>
 800483c:	682b      	ldr	r3, [r5, #0]
 800483e:	b103      	cbz	r3, 8004842 <_sbrk_r+0x1a>
 8004840:	6023      	str	r3, [r4, #0]
 8004842:	bd38      	pop	{r3, r4, r5, pc}
 8004844:	20000354 	.word	0x20000354

08004848 <memchr>:
 8004848:	4603      	mov	r3, r0
 800484a:	b510      	push	{r4, lr}
 800484c:	b2c9      	uxtb	r1, r1
 800484e:	4402      	add	r2, r0
 8004850:	4293      	cmp	r3, r2
 8004852:	4618      	mov	r0, r3
 8004854:	d101      	bne.n	800485a <memchr+0x12>
 8004856:	2000      	movs	r0, #0
 8004858:	e003      	b.n	8004862 <memchr+0x1a>
 800485a:	7804      	ldrb	r4, [r0, #0]
 800485c:	3301      	adds	r3, #1
 800485e:	428c      	cmp	r4, r1
 8004860:	d1f6      	bne.n	8004850 <memchr+0x8>
 8004862:	bd10      	pop	{r4, pc}

08004864 <memcpy>:
 8004864:	440a      	add	r2, r1
 8004866:	4291      	cmp	r1, r2
 8004868:	f100 33ff 	add.w	r3, r0, #4294967295
 800486c:	d100      	bne.n	8004870 <memcpy+0xc>
 800486e:	4770      	bx	lr
 8004870:	b510      	push	{r4, lr}
 8004872:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004876:	4291      	cmp	r1, r2
 8004878:	f803 4f01 	strb.w	r4, [r3, #1]!
 800487c:	d1f9      	bne.n	8004872 <memcpy+0xe>
 800487e:	bd10      	pop	{r4, pc}

08004880 <_realloc_r>:
 8004880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004884:	4680      	mov	r8, r0
 8004886:	4614      	mov	r4, r2
 8004888:	460e      	mov	r6, r1
 800488a:	b921      	cbnz	r1, 8004896 <_realloc_r+0x16>
 800488c:	4611      	mov	r1, r2
 800488e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004892:	f7ff bc37 	b.w	8004104 <_malloc_r>
 8004896:	b92a      	cbnz	r2, 80048a4 <_realloc_r+0x24>
 8004898:	f7ff fbcc 	bl	8004034 <_free_r>
 800489c:	4625      	mov	r5, r4
 800489e:	4628      	mov	r0, r5
 80048a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048a4:	f000 f81b 	bl	80048de <_malloc_usable_size_r>
 80048a8:	4284      	cmp	r4, r0
 80048aa:	4607      	mov	r7, r0
 80048ac:	d802      	bhi.n	80048b4 <_realloc_r+0x34>
 80048ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80048b2:	d812      	bhi.n	80048da <_realloc_r+0x5a>
 80048b4:	4621      	mov	r1, r4
 80048b6:	4640      	mov	r0, r8
 80048b8:	f7ff fc24 	bl	8004104 <_malloc_r>
 80048bc:	4605      	mov	r5, r0
 80048be:	2800      	cmp	r0, #0
 80048c0:	d0ed      	beq.n	800489e <_realloc_r+0x1e>
 80048c2:	42bc      	cmp	r4, r7
 80048c4:	4622      	mov	r2, r4
 80048c6:	4631      	mov	r1, r6
 80048c8:	bf28      	it	cs
 80048ca:	463a      	movcs	r2, r7
 80048cc:	f7ff ffca 	bl	8004864 <memcpy>
 80048d0:	4631      	mov	r1, r6
 80048d2:	4640      	mov	r0, r8
 80048d4:	f7ff fbae 	bl	8004034 <_free_r>
 80048d8:	e7e1      	b.n	800489e <_realloc_r+0x1e>
 80048da:	4635      	mov	r5, r6
 80048dc:	e7df      	b.n	800489e <_realloc_r+0x1e>

080048de <_malloc_usable_size_r>:
 80048de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048e2:	1f18      	subs	r0, r3, #4
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	bfbc      	itt	lt
 80048e8:	580b      	ldrlt	r3, [r1, r0]
 80048ea:	18c0      	addlt	r0, r0, r3
 80048ec:	4770      	bx	lr
	...

080048f0 <_init>:
 80048f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048f2:	bf00      	nop
 80048f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048f6:	bc08      	pop	{r3}
 80048f8:	469e      	mov	lr, r3
 80048fa:	4770      	bx	lr

080048fc <_fini>:
 80048fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048fe:	bf00      	nop
 8004900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004902:	bc08      	pop	{r3}
 8004904:	469e      	mov	lr, r3
 8004906:	4770      	bx	lr
